{
  // Если этот параметр имеет значение false, телеметрия не будет отправляться независимо от значения нового параметра. Не рекомендуется к использованию, поскольку в более новых версиях эти данные агрегированы в параметр `telemetry.telemetryLevel`.
  // Включить сбор отчетов о сбоях. Это помогает нам улучшить стабильность.
  // Этот параметр требует перезапуска для вступления в силу.
  "telemetry.enableCrashReporter": true,

  // Если этот параметр имеет значение false, телеметрия не будет отправляться независимо от значения нового параметра. Не рекомендуется к использованию, поскольку эти данные перенесены в параметр `telemetry.telemetryLevel`.
  // Включите сбор диагностических данных. Это поможет нам лучше понять, как работает Visual Studio Code и где необходимо внести улучшения. [Дополнительные сведения] (https://go.microsoft.com/fwlink/?LinkId=521839) о том, что какие данные мы собираем и о нашем заявлении о конфиденциальности.
  "telemetry.enableTelemetry": true,

  //
  // Управляет Visual Studio Code телеметрией, телеметрией собственных расширений и телеметрией участвующих сторонних расширений. Некоторые сторонние расширения могут не учитывать этот параметр. Обратитесь к документации конкретного расширения, чтобы быть уверенным. Телеметрия помогает нам лучше понять, как работает Visual Studio Code, где необходимо внести улучшения и как используются функции. Подробнее о [data we collect] (https://aka.ms/vscode-telemetry) и наш документ [privacy statement] (https://go.microsoft.com/fwlink/?LinkId=521839). Чтобы изменения в отчетах о сбоях вступили в силу, требуется полная перезагрузка приложения.
  //
  // &nbsp;
  //
  // В следующей таблице указаны данные, отправляемые каждым параметром:
  //
  // |       | Отчеты о сбоях | Ошибка телеметрии | Данные об использовании |
  // |:------|:---------------------:|:---------------:|:--------------:|
  // | all   |            ✓          |        ✓        |        ✓       |
  // | error |            ✓          |        ✓        |        -       |
  // | crash |            ✓          |        -        |        -       |
  // | off   |            -          |        -        |        -       |
  //
  //
  // &nbsp;
  //
  // Примечание.*** Если этот параметр установлен в значение "выкл.", телеметрия не будет отправляться независимо от других параметров телеметрии. Если для этого параметра задано любое значение, отличное от "выкл.", а телеметрия отключена с устаревшими параметрами, телеметрия не будет отправляться.*
  //
  //  - all: Отправляет данные об использовании, сведения об ошибках и отчеты о сбоях.
  //  - error: Отправляет общие отчеты об ошибках телеметрии и сбоях.
  //  - crash: Отправляет отчеты о сбоях на уровне ОС.
  //  - off: Отключает все данные телеметрии продукта.
  "telemetry.telemetryLevel": "all",

  // Определяет, отображается ли CodeLens в редакторе.
  "diffEditor.codeLens": false,

  //
  //  - legacy: Использует устаревший алгоритм сравнения.
  //  - advanced: Использует расширенный алгоритм сравнения.
  "diffEditor.diffAlgorithm": "advanced",

  // Определяет, отображает ли редактор несовпадений пустые элементы оформления, чтобы увидеть, где вставлены или удалены символы.
  "diffEditor.experimental.showEmptyDecorations": true,

  // Определяет, должен ли редактор несовпадений показывать обнаруженные перемещения кода. Работает только при настройке параметра `diffEditor.experimental.useVersion2`.
  "diffEditor.experimental.showMoves": false,

  // Определяет реализацию, используемую редактором несовпадений (новая или старая реализация).
  "diffEditor.experimental.useVersion2": true,

  // Controls how many lines are used as context when comparing unchanged regions. Only works when `diffEditor.experimental.useVersion2` is set.
  "diffEditor.hideUnchangedRegions.contextLineCount": 3,

  // Controls whether the diff editor shows unchanged regions. Only works when `diffEditor.experimental.useVersion2` is set.
  "diffEditor.hideUnchangedRegions.enabled": false,

  // Controls how many lines are used as a minimum for unchanged regions. Only works when `diffEditor.experimental.useVersion2` is set.
  "diffEditor.hideUnchangedRegions.minimumLineCount": 3,

  // Controls how many lines are used for unchanged regions. Only works when `diffEditor.experimental.useVersion2` is set.
  "diffEditor.hideUnchangedRegions.revealLineCount": 20,

  // Когда параметр включен, редактор несовпадений игнорирует изменения начального или конечного пробела.
  "diffEditor.ignoreTrimWhitespace": true,

  // Время ожидания в миллисекундах, по истечении которого вычисление несовпадений отменяется. Укажите значение 0, чтобы не использовать время ожидания.
  "diffEditor.maxComputationTime": 5000,

  // Максимальный размер файла в МБ для вычисления различий. Используйте 0 без ограничений.
  "diffEditor.maxFileSize": 50,

  // Определяет, должны ли в редакторе отображаться индикаторы +/- для добавленных или удаленных изменений.
  "diffEditor.renderIndicators": true,

  // Если этот параметр включен, в редакторе несовпадений на поле глифа отображаются стрелки для отмены изменений.
  "diffEditor.renderMarginRevertIcon": true,

  // Определяет, как редактор несовпадений отображает отличия: рядом или в тексте.
  "diffEditor.renderSideBySide": true,

  // If the diff editor width is smaller than this value, the inline view is used.
  "diffEditor.renderSideBySideInlineBreakpoint": 900,

  // If enabled and the editor width is too small, the inline view is used.
  "diffEditor.useInlineViewWhenSpaceIsLimited": true,

  //
  //  - off: Строки не будут переноситься никогда.
  //  - on: Строки будут переноситься по ширине окна просмотра.
  //  - inherit: Строки будут переноситься в соответствии с настройкой `editor.wordWrap`.
  "diffEditor.wordWrap": "inherit",

  // Определяет, будут ли предложения приниматься при вводе символов фиксации. Например, в JavaScript точка с запятой (";") может быть символом фиксации, при вводе которого предложение принимается.
  "editor.acceptSuggestionOnCommitCharacter": true,

  // Определяет, будут ли предложения приниматься клавишей ВВОД в дополнение к клавише TAB. Это помогает избежать неоднозначности между вставкой новых строк и принятием предложений.
  //  - on
  //  - smart: Принимать предложение при нажатии клавиши ВВОД только в том случае, если оно изменяет текст.
  //  - off
  "editor.acceptSuggestionOnEnter": "on",

  // Управляет числом строк в редакторе, которые могут быть прочитаны средством чтения с экрана за один раз. При обнаружении средства чтения с экрана автоматически устанавливается значение по умолчанию 500. Внимание! При указании числа строк, превышающего значение по умолчанию, возможно снижение производительности.
  "editor.accessibilityPageSize": 10,

  // Определяет, следует ли запустить пользовательский интерфейс в режиме оптимизации для средства чтения с экрана.
  //  - auto: Использовать API-интерфейсы платформы, чтобы определять, подключено ли средство чтения с экрана
  //  - on: Оптимизировать для использования со средством чтения с экрана
  //  - off: Предполагать, что средство чтения с экрана не подключено
  "editor.accessibilitySupport": "auto",

  // Определяет, должен ли редактор автоматически добавлять закрывающую скобку при вводе пользователем открывающей скобки.
  //  - always
  //  - languageDefined: Использовать конфигурации языка для автоматического закрытия скобок.
  //  - beforeWhitespace: Автоматически закрывать скобки только в том случае, если курсор находится слева от пробела.
  //  - never
  "editor.autoClosingBrackets": "languageDefined",

  // Определяет, должен ли редактор удалять соседние закрывающие кавычки или квадратные скобки при удалении.
  //  - always
  //  - auto: Удалять соседние закрывающие кавычки и квадратные скобки только в том случае, если они были вставлены автоматически.
  //  - never
  "editor.autoClosingDelete": "auto",

  // Определяет, должны ли в редакторе заменяться закрывающие кавычки или скобки при вводе.
  //  - always
  //  - auto: Заменять закрывающие кавычки и скобки при вводе только в том случае, если кавычки или скобки были вставлены автоматически.
  //  - never
  "editor.autoClosingOvertype": "auto",

  // Определяет, должен ли редактор автоматически закрывать кавычки, если пользователь добавил открывающую кавычку.
  //  - always
  //  - languageDefined: Использовать конфигурации языка для автоматического закрытия кавычек.
  //  - beforeWhitespace: Автоматически закрывать кавычки только в том случае, если курсор находится слева от пробела.
  //  - never
  "editor.autoClosingQuotes": "languageDefined",

  // Определяет, должен ли редактор автоматически изменять отступы, когда пользователи вводят, вставляют или перемещают текст или изменяют отступы строк.
  //  - none: Редактор не будет вставлять отступы автоматически.
  //  - keep: Редактор будет сохранять отступ текущей строки.
  //  - brackets: Редактор будет сохранять отступы текущей строки и учитывать скобки в соответствии с синтаксисом языка.
  //  - advanced: Редактор будет сохранять отступ текущей строки, учитывать определенные языком скобки и вызывать специальные правила onEnterRules, определяемые языками.
  //  - full: Редактор будет сохранять отступ текущей строки, учитывать определенные языком скобки, вызывать специальные правила onEnterRules, определяемые языками и учитывать правила отступа indentationRules, определяемые языками.
  "editor.autoIndent": "full",

  // Определяет, должен ли редактор автоматически обрамлять выделения при вводе кавычек или квадратных скобок.
  //  - languageDefined: Использовать конфигурации языка для автоматического обрамления выделений.
  //  - quotes: Обрамлять с помощью кавычек, а не скобок.
  //  - brackets: Обрамлять с помощью скобок, а не кавычек.
  //  - never
  "editor.autoSurround": "languageDefined",

  // Определяет, включена ли раскраска пар скобок. Используйте `workbench.colorCustomizations` для переопределения цветов выделения скобок.
  "editor.bracketPairColorization.enabled": true,

  // Определяет, имеет ли каждый тип скобок собственный независимый пул цветов.
  "editor.bracketPairColorization.independentColorPoolPerBracketType": false,

  // Типы действий кода, которые будут выполнены при сохранении.
  "editor.codeActionsOnSave": {},

  // Включить или отключить отображение заголовков групп в меню действий кода.
  "editor.codeActionWidget.showHeaders": true,

  // Определяет, отображается ли CodeLens в редакторе.
  "editor.codeLens": true,

  // Управляет семейством шрифтов для CodeLens.
  "editor.codeLensFontFamily": "",

  // Определяет размер шрифта в пикселях для CodeLens. Если задано значение 0, то используется 90% от размера #editor.fontSize#.
  "editor.codeLensFontSize": 0,

  // Определяет, должны ли в редакторе отображаться внутренние декораторы цвета и средство выбора цвета.
  "editor.colorDecorators": true,

  // Управляет условием отображения палитры в декораторе цвета
  //  - clickAndHover: Показывать палитру при щелчке и при наведении указателя на декоратор цвета
  //  - hover: Показывать палитру при наведении указателя на декоратор цвета
  //  - click: Показывать палитру при щелчке декоратора цвета
  "editor.colorDecoratorsActivatedOn": "clickAndHover",

  // Управляет максимальным количеством цветовых декораторов, которые можно отрисовать в редакторе одновременно.
  "editor.colorDecoratorsLimit": 500,

  // Включение того, что выбор с помощью клавиатуры и мыши приводит к выбору столбца.
  "editor.columnSelection": false,

  // Определяет, должны ли пустые строки игнорироваться с помощью действий переключения, добавления или удаления для комментариев к строкам.
  "editor.comments.ignoreEmptyLines": true,

  // Определяет, вставляется ли пробел при комментировании.
  "editor.comments.insertSpace": true,

  // Определяет, будет ли текст скопирован в буфер обмена с подсветкой синтаксиса.
  "editor.copyWithSyntaxHighlighting": true,

  // Управляет стилем анимации курсора.
  "editor.cursorBlinking": "blink",

  // Управляет тем, следует ли включить плавную анимацию курсора.
  //  - off: Плавная анимация курсора отключена.
  //  - explicit: Плавная анимация курсора включена, только если пользователь перемещает курсор явным жестом.
  //  - on: Плавная анимация курсора всегда включена.
  "editor.cursorSmoothCaretAnimation": "off",

  // Управляет стилем курсора.
  "editor.cursorStyle": "line",

  // Определяет минимальное число видимых начальных линий (минимум 0) и конечных линий (минимум 1), окружающих курсор. Этот параметр имеет название "scrollOff" или "scrollOffset" в некоторых других редакторах.
  "editor.cursorSurroundingLines": 0,

  // Определяет, когда необходимо применять "cursorSurroundingLines".
  //  - default: "cursorSurroundingLines" применяется только при запуске с помощью клавиатуры или API.
  //  - all: "cursorSurroundingLines" принудительно применяется во всех случаях.
  "editor.cursorSurroundingLinesStyle": "default",

  // Управляет шириной курсора, когда для параметра "#editor.cursorStyle#" установлено значение 'line'
  "editor.cursorWidth": 0,

  // Определяет, должны ли отображаться встроенные цветовые оформления с использованием поставщика цвета документа по умолчанию.
  "editor.defaultColorDecorators": false,

  // Определяет поставщик диапазона свертывания по умолчанию, который получает приоритет над всеми другими поставщиками. Это должен быть ИД расширения, предоставляющего поставщик.
  //  - null: Все поставщики активных диапазонов свертывания
  //  - formulahendry.auto-close-tag: Automatically add HTML/XML close tag, same as Visual Studio IDE or Sublime Text
  //  - formulahendry.auto-rename-tag: Auto rename paired HTML/XML tag
  //  - vscode.css-language-features: Предоставляет широкую поддержку языка для файлов CSS, LESS и SCSS.
  //  - Zignd.html-css-class-completion: CSS class name completion for the HTML class attribute based on the definitions found in your workspace.
  //  - vscode.html-language-features: Обеспечивает полноценную поддержку языков для файлов Handlebar и HTML
  //  - solnurkarim.html-to-css-autocompletion: Provides completion suggestions for classes and ids from markup documents to stylesheets.
  //  - vscode.json-language-features: Предоставляет широкую поддержку языка для файлов JSON.
  //  - vscode.markdown-language-features: Предоставляет широкую поддержку языка для Markdown.
  //  - vscode.php-language-features: Предоставляет широкую поддержку возможностей языка для файлов PHP.
  //  - vscode.references-view: Ссылаться на результаты поиска как отдельное стабильное представление на боковой панели
  //  - vscode.search-result: Обеспечивает подсветку синтаксиса и функции языка для результатов поиска с вкладками.
  //  - TabNine.tabnine-vscode: Tabnine is the AI code assistant that accelerates and simplifies software development while keeping your code private, secure, and compliant. It provides accurate, highly personalized results for generating code, writing unit tests, creating documentation, explaining legacy code, fixing code, and much more.
  //  - vscode.typescript-language-features: Предоставляет широкую поддержку языка для JavaScript и TypeScript.
  //  - vscode.configuration-editing: Предоставляет возможности (такие как IntelliSense и автоматическое исправление) для конфигурационных файлов, таких как файлы параметров, файлы запуска и файлы рекомендаций для расширений.
  //  - vscode.debug-auto-launch: Вспомогательный метод для функции автоматического подключения, когда расширения отладки узла не активны.
  //  - vscode.debug-server-ready: Открыть URI в браузере, если сервер в режиме отладки готов.
  //  - vscode.emmet: Поддержка Emmet для VS Code
  //  - vscode.extension-editing: Предоставляет функции жанров для разработки расширений.
  //  - vscode.git: Интеграция системы контроля версий Git
  //  - vscode.git-base: Статические вклады и сборщики Git.
  //  - vscode.github: Возможности GitHub для VS Code
  //  - vscode.github-authentication: Поставщик проверки подлинности GitHub
  //  - vscode.grunt: Extension to add Grunt capabilities to VS Code.
  //  - vscode.gulp: Разрешение для добавления возможностей Gulp в VSCode.
  //  - anteprimorac.html-end-tag-labels: Labels HTML end tags in VSCode
  //  - vscode.ipynb: Обеспечивает базовую поддержку открытия и чтения IPYNB-файлов записной книжки Jupyter
  //  - vscode.jake: Разрешение для добавления возможностей Jake в VS Code.
  //  - ms-vscode.js-debug: An extension for debugging Node.js programs and Chrome.
  //  - ms-vscode.js-debug-companion: Companion extension to js-debug that provides capability for remote debugging
  //  - glenn2223.live-sass: Compile Sass or Scss to CSS at realtime.
  //  - ritwickdey.LiveServer: Launch a development local Server with live reload feature for static & dynamic pages
  //  - vscode.markdown-math: Добавляет поддержку математических символов для Markdown в записных книжках.
  //  - PKief.material-icon-theme: Material Design Icons for Visual Studio Code
  //  - vscode.media-preview: Предоставляет встроенные в VS Code предварительные просмотры изображений, аудио и видео.
  //  - vscode.merge-conflict: Выделение и команды для внутренних конфликтов слияния.
  //  - vscode.microsoft-authentication: Поставщик проверки подлинности Майкрософт
  //  - vscode.npm: Расширение для добавления поддержки задач в скрипты npm.
  //  - esbenp.prettier-vscode: Code formatter using prettier
  //  - ms-vscode-remote.remote-wsl-recommender: Рекомендуется использовать подсистему Windows для Linux (WSL) и расширение WSL.
  //  - vscode.simple-browser: Очень простое встроенное веб-представление для отображения веб-содержимого.
  //  - vscode.tunnel-forwarding: Allows forwarding local ports to be accessible over the internet.
  //  - ms-vscode.vscode-js-profile-table: Text visualizer for profiles taken from the JavaScript debugger
  //  - bradlc.vscode-tailwindcss: Intelligent Tailwind CSS tooling for VS Code
  "editor.defaultFoldingRangeProvider": null,

  // Определяет форматировщик по умолчанию, который имеет приоритет над всеми другими форматировщиками. Должен быть идентификатором расширения, предоставляющего форматировщик.
  //  - null: NONE
  //  - formulahendry.auto-close-tag: Automatically add HTML/XML close tag, same as Visual Studio IDE or Sublime Text
  //  - formulahendry.auto-rename-tag: Auto rename paired HTML/XML tag
  //  - vscode.css-language-features: Предоставляет широкую поддержку языка для файлов CSS, LESS и SCSS.
  //  - Zignd.html-css-class-completion: CSS class name completion for the HTML class attribute based on the definitions found in your workspace.
  //  - vscode.html-language-features: Обеспечивает полноценную поддержку языков для файлов Handlebar и HTML
  //  - solnurkarim.html-to-css-autocompletion: Provides completion suggestions for classes and ids from markup documents to stylesheets.
  //  - vscode.json-language-features: Предоставляет широкую поддержку языка для файлов JSON.
  //  - vscode.markdown-language-features: Предоставляет широкую поддержку языка для Markdown.
  //  - vscode.php-language-features: Предоставляет широкую поддержку возможностей языка для файлов PHP.
  //  - esbenp.prettier-vscode: Code formatter using prettier
  //  - vscode.references-view: Ссылаться на результаты поиска как отдельное стабильное представление на боковой панели
  //  - vscode.search-result: Обеспечивает подсветку синтаксиса и функции языка для результатов поиска с вкладками.
  //  - TabNine.tabnine-vscode: Tabnine is the AI code assistant that accelerates and simplifies software development while keeping your code private, secure, and compliant. It provides accurate, highly personalized results for generating code, writing unit tests, creating documentation, explaining legacy code, fixing code, and much more.
  //  - vscode.typescript-language-features: Предоставляет широкую поддержку языка для JavaScript и TypeScript.
  //  - vscode.configuration-editing: Предоставляет возможности (такие как IntelliSense и автоматическое исправление) для конфигурационных файлов, таких как файлы параметров, файлы запуска и файлы рекомендаций для расширений.
  //  - vscode.debug-auto-launch: Вспомогательный метод для функции автоматического подключения, когда расширения отладки узла не активны.
  //  - vscode.debug-server-ready: Открыть URI в браузере, если сервер в режиме отладки готов.
  //  - vscode.emmet: Поддержка Emmet для VS Code
  //  - vscode.extension-editing: Предоставляет функции жанров для разработки расширений.
  //  - vscode.git: Интеграция системы контроля версий Git
  //  - vscode.git-base: Статические вклады и сборщики Git.
  //  - vscode.github: Возможности GitHub для VS Code
  //  - vscode.github-authentication: Поставщик проверки подлинности GitHub
  //  - vscode.grunt: Extension to add Grunt capabilities to VS Code.
  //  - vscode.gulp: Разрешение для добавления возможностей Gulp в VSCode.
  //  - anteprimorac.html-end-tag-labels: Labels HTML end tags in VSCode
  //  - vscode.ipynb: Обеспечивает базовую поддержку открытия и чтения IPYNB-файлов записной книжки Jupyter
  //  - vscode.jake: Разрешение для добавления возможностей Jake в VS Code.
  //  - ms-vscode.js-debug: An extension for debugging Node.js programs and Chrome.
  //  - ms-vscode.js-debug-companion: Companion extension to js-debug that provides capability for remote debugging
  //  - glenn2223.live-sass: Compile Sass or Scss to CSS at realtime.
  //  - ritwickdey.LiveServer: Launch a development local Server with live reload feature for static & dynamic pages
  //  - vscode.markdown-math: Добавляет поддержку математических символов для Markdown в записных книжках.
  //  - PKief.material-icon-theme: Material Design Icons for Visual Studio Code
  //  - vscode.media-preview: Предоставляет встроенные в VS Code предварительные просмотры изображений, аудио и видео.
  //  - vscode.merge-conflict: Выделение и команды для внутренних конфликтов слияния.
  //  - vscode.microsoft-authentication: Поставщик проверки подлинности Майкрософт
  //  - vscode.npm: Расширение для добавления поддержки задач в скрипты npm.
  //  - ms-vscode-remote.remote-wsl-recommender: Рекомендуется использовать подсистему Windows для Linux (WSL) и расширение WSL.
  //  - vscode.simple-browser: Очень простое встроенное веб-представление для отображения веб-содержимого.
  //  - vscode.tunnel-forwarding: Allows forwarding local ports to be accessible over the internet.
  //  - ms-vscode.vscode-js-profile-table: Text visualizer for profiles taken from the JavaScript debugger
  //  - bradlc.vscode-tailwindcss: Intelligent Tailwind CSS tooling for VS Code
  "editor.defaultFormatter": null,

  // Определяет, всегда ли жест мышью для перехода к определению открывает мини-приложение быстрого редактирования.
  "editor.definitionLinkOpensInPeek": false,

  // На основе содержимого файла определяет, будут ли `editor.tabSize#` и `#editor.insertSpaces` автоматически обнаружены при открытии файла.
  "editor.detectIndentation": true,

  // Определяет, следует ли редактору разрешить перемещение выделенных элементов с помощью перетаскивания.
  "editor.dragAndDrop": true,

  // Определяет, можно ли перетаскивать файл в редактор, удерживая нажатой клавишу SHIFT (вместо открытия файла в самом редакторе).
  "editor.dropIntoEditor.enabled": true,

  // Определяет, отображается ли мини-приложение при сбросе файлов в редактор. Это мини-приложение позволяет управлять тем, как сбрасывается файл.
  //  - afterDrop: Отображать мини-приложение выбора сброса после сброса файла в редактор.
  //  - never: Никогда не показывать мини-приложение выбора сброса. Вместо этого всегда используется поставщик сброса по умолчанию.
  "editor.dropIntoEditor.showDropSelector": "afterDrop",

  // Управляет тем, копируется ли текущая строка при копировании без выделения.
  "editor.emptySelectionClipboard": true,

  // Определяет, должна ли разметка происходить асинхронно в рабочей роли.
  "editor.experimental.asyncTokenization": true,

  // Определяет, следует ли регистрировать асинхронную разметку. Только для отладки.
  "editor.experimental.asyncTokenizationLogging": false,

  // Определяет, должна ли асинхронная разметка проверяться по отношению к устаревшей фоновой разметке. Может замедлить разметку. Только для отладки.
  "editor.experimental.asyncTokenizationVerification": false,

  // Configures the default drop provider to use for content of a given mime type.
  "editor.experimental.dropIntoEditor.defaultProvider": {},

  // Определяет, отрисовывается ли пробел с использованием нового экспериментального метода.
  //  - svg: Использовать новый метод отрисовки с SVG.
  //  - font: Использовать новый метод отрисовки с символами шрифта.
  //  - off: Использовать стабильный метод отрисовки.
  "editor.experimentalWhitespaceRendering": "svg",

  // Коэффициент увеличения скорости прокрутки при нажатии клавиши ALT.
  "editor.fastScrollSensitivity": 5,

  // Определяет, должно ли мини-приложение поиска добавлять дополнительные строки в начале окна редактора. Если задано значение true, вы можете прокрутить первую строку при отображаемом мини-приложении поиска.
  "editor.find.addExtraSpaceOnTop": true,

  // Управляет условием автоматического включения функции «Найти в выделении».
  //  - never: Никогда не включать функцию «Найти в выделении» автоматически (по умолчанию).
  //  - always: Всегда включать функцию «Найти в выделении» автоматически.
  //  - multiline: Автоматическое включение функции «Найти в выделении» при выборе нескольких строк содержимого.
  "editor.find.autoFindInSelection": "never",

  // Определяет, должен ли курсор перемещаться для поиска совпадений при вводе.
  "editor.find.cursorMoveOnType": true,

  // Определяет, будет ли поиск автоматически перезапускаться с начала (или с конца), если не найдено никаких других соответствий.
  "editor.find.loop": true,

  // Определяет, можно ли передать строку поиска в мини-приложение поиска из текста, выделенного в редакторе.
  //  - never: Никогда не вставлять начальные значения в строку поиска из выделенного фрагмента редактора.
  //  - always: Всегда вставлять начальные значения в строку поиска из выделенного фрагмента редактора, включая слова в позиции курсора.
  //  - selection: Вставлять начальные значения в строку поиска только из выделенного фрагмента редактора.
  "editor.find.seedSearchStringFromSelection": "always",

  // Определяет, включено ли свертывание кода в редакторе.
  "editor.folding": true,

  // Определяет, должен ли редактор выделять сложенные диапазоны.
  "editor.foldingHighlight": true,

  // Определяет, будет ли редактор автоматически сворачивать диапазоны импорта.
  "editor.foldingImportsByDefault": false,

  // Максимальное количество свертываемых регионов. Увеличение этого значения может привести к снижению скорости отклика редактора, если текущий источник содержит большое количество свертываемых регионов.
  "editor.foldingMaximumRegions": 5000,

  // Управляет стратегией для вычисления свертываемых диапазонов.
  //  - auto: Используйте стратегию свертывания для конкретного языка, если она доступна, в противном случае используйте стратегию на основе отступов.
  //  - indentation: Используйте стратегию свертывания на основе отступов.
  "editor.foldingStrategy": "auto",

  // Определяет семейство шрифтов.
  "editor.fontFamily": "Consolas, 'Courier New', monospace",

  // Настраивает лигатуры или характеристики шрифта. Можно указать логическое значение, чтобы включить или отключить лигатуры, или строку для значения свойства CSS "font-feature-settings".
  "editor.fontLigatures": false,

  // Определяет размер шрифта в пикселях.
  "editor.fontSize": 14,

  // Настраивает варианты шрифтов. Может представлять собой логическое значение для включения или отключения преобразования из параметра font-weight в параметр font-variation-settings или строку, содержащую значение свойства CSS font-variation-settings.
  "editor.fontVariations": false,

  // Управляет насыщенностью шрифта. Допустимые значения: ключевые слова "normal" или "bold", а также числа в диапазоне от 1 до 1000.
  "editor.fontWeight": "normal",

  // Определяет, будет ли редактор автоматически форматировать вставленное содержимое. Модуль форматирования должен быть доступен и иметь возможность форматировать диапазон в документе.
  "editor.formatOnPaste": false,

  // Форматирование файла при сохранении. Модуль форматирования должен быть доступен, файл не должен сохраняться по истечении времени задержки, и работа редактора не должна завершаться.
  "editor.formatOnSave": false,

  // Определяет, применяется ли формат при сохранении ко всему файлу или только к изменениям в файле. Этот параметр применяется только в том случае, если параметр "#editor.formatOnSave#" включен.
  //  - file: Форматирование всего файла.
  //  - modifications: Форматирование изменений (требуется система управления версиями).
  //  - modificationsIfAvailable: Будет выполнена попытка форматировать только изменения (требуется система управления версиями). Если не удается использовать систему управления версиями, будет отформатирован весь файл.
  "editor.formatOnSaveMode": "file",

  // Управляет параметром, определяющим, должен ли редактор автоматически форматировать строку после ввода.
  "editor.formatOnType": false,

  // Управляет отображением вертикальных полей глифа в редакторе. Поля глифа в основном используются для отладки.
  "editor.glyphMargin": true,

  // Идентификатор альтернативный команды, выполняемой в том случае, когда результатом операции "Перейти к объявлению" является текущее расположение.
  "editor.gotoLocation.alternativeDeclarationCommand": "editor.action.goToReferences",

  // Идентификатор альтернативной команды, выполняемой в том случае, когда результатом операции "Перейти к определению" является текущее расположение.
  "editor.gotoLocation.alternativeDefinitionCommand": "editor.action.goToReferences",

  // Идентификатор альтернативный команды, выполняемой, когда результатом команды "Перейти к реализации" является текущее расположение.
  "editor.gotoLocation.alternativeImplementationCommand": "",

  // Идентификатор альтернативной команды, выполняемой в том случае, когда результатом выполнения операции "Перейти к ссылке" является текущее расположение.
  "editor.gotoLocation.alternativeReferenceCommand": "",

  // Идентификатор альтернативной команды, которая выполняется в том случае, если результатом операции "Перейти к определению типа" является текущее расположение.
  "editor.gotoLocation.alternativeTypeDefinitionCommand": "editor.action.goToReferences",

  // Этот параметр устарел. Используйте вместо него отдельные параметры, например, 'editor.editor.gotoLocation.multipleDefinitions' или 'editor.editor.gotoLocation.multipleImplementations'.
  //
  "editor.gotoLocation.multiple": null,

  // Управляет поведением команды "Перейти к объявлению" при наличии нескольких целевых расположений.
  //  - peek: Показать предварительные результаты (по умолчанию)
  //  - gotoAndPeek: Перейти к основному результату и показать быстрый редактор
  //  - goto: Перейти к основному результату и включить быструю навигацию для остальных
  "editor.gotoLocation.multipleDeclarations": "peek",

  // Управляет поведением команды "Перейти к определению" при наличии нескольких целевых расположений.
  //  - peek: Показать предварительные результаты (по умолчанию)
  //  - gotoAndPeek: Перейти к основному результату и показать быстрый редактор
  //  - goto: Перейти к основному результату и включить быструю навигацию для остальных
  "editor.gotoLocation.multipleDefinitions": "peek",

  // Управляет поведением команды "Перейти к реализациям" при наличии нескольких целевых расположений.
  //  - peek: Показать предварительные результаты (по умолчанию)
  //  - gotoAndPeek: Перейти к основному результату и показать быстрый редактор
  //  - goto: Перейти к основному результату и включить быструю навигацию для остальных
  "editor.gotoLocation.multipleImplementations": "peek",

  // Управляет поведением команды "Перейти к ссылкам" при наличии нескольких целевых расположений.
  //  - peek: Показать предварительные результаты (по умолчанию)
  //  - gotoAndPeek: Перейти к основному результату и показать быстрый редактор
  //  - goto: Перейти к основному результату и включить быструю навигацию для остальных
  "editor.gotoLocation.multipleReferences": "peek",

  // Управляет поведением команды "Перейти к определению типа" при наличии нескольких целевых расположений.
  //  - peek: Показать предварительные результаты (по умолчанию)
  //  - gotoAndPeek: Перейти к основному результату и показать быстрый редактор
  //  - goto: Перейти к основному результату и включить быструю навигацию для остальных
  "editor.gotoLocation.multipleTypeDefinitions": "peek",

  // Определяет, включены ли направляющие пар скобок.
  //  - true: Включение направляющих для пар скобок.
  //  - active: Включение направляющих для пар скобок только для активной пары скобок.
  //  - false: Отключение направляющих для пар скобок.
  "editor.guides.bracketPairs": false,

  // Определяет, включены ли горизонтальные направляющие для скобок.
  //  - true: Включение горизонтальных направляющих в дополнение к вертикальным направляющим для пар скобок.
  //  - active: Включение горизонтальных направляющих только для активной пары скобок.
  //  - false: Отключение горизонтальных направляющих для пар скобок.
  "editor.guides.bracketPairsHorizontal": "active",

  // Управляет тем, должна ли выделяться активная пара квадратных скобок в редакторе.
  "editor.guides.highlightActiveBracketPair": true,

  // Управляет тем, должна ли выделяться активная направляющая отступа в редакторе.
  //  - true: Выделяет активную направляющую отступа.
  //  - always: Выделяет активную направляющую отступа, даже если выделены направляющие скобок.
  //  - false: Не выделять активную направляющую отступа.
  "editor.guides.highlightActiveIndentation": true,

  // Определяет, должны ли в редакторе отображаться направляющие отступа.
  "editor.guides.indentation": true,

  // Управляет скрытием курсора в обзорной линейке.
  "editor.hideCursorInOverviewRuler": false,

  // Предпочитать отображать наведение над строкой, если есть место.
  "editor.hover.above": true,

  // Определяет время задержки в миллисекундах перед отображением наведения.
  "editor.hover.delay": 300,

  // Управляет тем, отображается ли наведение.
  "editor.hover.enabled": true,

  // Управляет тем, должно ли наведение оставаться видимым при наведении на него курсора мыши.
  "editor.hover.sticky": true,

  // Число пробелов, используемых для отступа, либо `"tabSize"` для использования значения из "#editor.tabSize#". Этот параметр переопределяется на основе содержимого файла, если включен параметр "#editor.detectIndentation#".
  "editor.indentSize": "tabSize",

  // Включает встроенные указания в редакторе.
  //  - on: Вложенные подсказки включены.
  //  - onUnlessPressed: Вложенные подсказки отображаются по умолчанию и скрываются удержанием клавиш Ctrl+Alt.
  //  - offUnlessPressed: Вложенные подсказки по умолчанию скрыты и отображаются при удержании Ctrl+Alt.
  //  - off: Вложенные подсказки отключены.
  "editor.inlayHints.enabled": "on",

  // Управляет семейством шрифтов для вложенных подсказок в редакторе. Если значение не задано, используется `editor.fontFamily`.
  "editor.inlayHints.fontFamily": "",

  // Управляет размером шрифта вложенных подсказок в редакторе. По умолчанию `editor.fontSize` используется, когда сконфигурированное значение меньше `5` или больше размера шрифта редактора.
  "editor.inlayHints.fontSize": 0,

  // Включает поля вокруг встроенных указаний в редакторе.
  "editor.inlayHints.padding": false,

  // Controls whether the accessibility hint should be provided to screen reader users when an inline completion is shown.
  "editor.inlineCompletionsAccessibilityVerbose": false,

  // Определяет, следует ли автоматически показывать встроенные предложения в редакторе.
  "editor.inlineSuggest.enabled": true,

  // Определяет, когда отображать встроенную панель инструментов предложений.
  //  - always: Отображать панель инструментов встроенного предложения при каждом отображении встроенного предложения.
  //  - onHover: Отображать панель инструментов предложений при наведении указателя мыши на встроенное предложение.
  "editor.inlineSuggest.showToolbar": "onHover",

  // Управляет взаимодействием встроенных предложений с мини-приложением предложений. Если этот параметр включен, мини-приложение предложений не отображается автоматически, когда доступны встроенные предложения.
  "editor.inlineSuggest.suppressSuggestions": false,

  // Вставлять пробелы при нажатии клавиши TAB. Этот параметр переопределяется на основе содержимого файла, если включен параметр `editor.detectIndentation`.
  "editor.insertSpaces": true,

  // Определяет символы скобок, увеличивающие или уменьшающие отступ.
  "editor.language.brackets": null,

  // Определяет пары скобок, цвет которых зависит от их уровня вложения, если включена опция выделения цветом.
  "editor.language.colorizedBracketPairs": null,

  // Специальная обработка для больших файлов с отключением некоторых функций, которые интенсивно используют память.
  "editor.largeFileOptimizations": true,

  // Управляет интервалом между буквами в пикселях.
  "editor.letterSpacing": 0,

  // Включает значок лампочки для действия кода в редакторе.
  "editor.lightbulb.enabled": true,

  // Определяет высоту строки.
  // – Используйте 0, чтобы автоматически вычислить высоту строки на основе размера шрифта.
  // – Значения от 0 до 8 будут использоваться в качестве множителя для размера шрифта.
  // – Значения больше или равные 8 будут использоваться в качестве действующих значений.
  "editor.lineHeight": 0,

  // Управляет отображением номеров строк.
  //  - off: Номера строк не отображаются.
  //  - on: Отображаются абсолютные номера строк.
  //  - relative: Отображаемые номера строк вычисляются как расстояние в строках до положения курсора.
  //  - interval: Номера строк отображаются каждые 10 строк.
  "editor.lineNumbers": "on",

  // Определяет, включена ли поддержка связанного редактирования в редакторе. В зависимости от языка, связанные символы, например теги HTML, обновляются при редактировании.
  "editor.linkedEditing": false,

  // Определяет, должен ли редактор определять ссылки и делать их доступными для щелчка.
  "editor.links": true,

  // Выделять соответствующие скобки.
  "editor.matchBrackets": "always",

  // Строки, длина которых превышает указанное значение, не будут размечены из соображений производительности
  "editor.maxTokenizationLineLength": 20000,

  // Определяет, скрыта ли мини-карта автоматически.
  "editor.minimap.autohide": false,

  // Определяет, отображается ли мини-карта.
  "editor.minimap.enabled": true,

  // Ограничивает ширину мини-карты, чтобы количество отображаемых столбцов не превышало определенное количество.
  "editor.minimap.maxColumn": 120,

  // Отображает фактические символы в строке вместо цветных блоков.
  "editor.minimap.renderCharacters": true,

  // Масштаб содержимого, нарисованного на мини-карте: 1, 2 или 3.
  "editor.minimap.scale": 1,

  // Определяет, когда отображается ползунок мини-карты.
  "editor.minimap.showSlider": "mouseover",

  // Определяет, с какой стороны будет отображаться мини-карта.
  "editor.minimap.side": "right",

  // Управляет размером миникарты.
  //  - proportional: Мини-карта имеет такой же размер, что и содержимое редактора (возможна прокрутка).
  //  - fill: Мини-карта будет растягиваться или сжиматься по мере необходимости, чтобы заполнить редактор по высоте (без прокрутки).
  //  - fit: Миникарта будет уменьшаться по мере необходимости, чтобы никогда не быть больше, чем редактор (без прокрутки).
  "editor.minimap.size": "proportional",

  // Множитель, используемый для параметров deltaX и deltaY событий прокрутки колесика мыши.
  "editor.mouseWheelScrollSensitivity": 1,

  // Изменение размера шрифта в редакторе при нажатой клавише CTRL и движении колесика мыши.
  "editor.mouseWheelZoom": false,

  // Управляет максимальным числом курсоров, которые могут одновременно отображаться в активном редакторе.
  "editor.multiCursorLimit": 10000,

  // Объединить несколько курсоров, когда они перекрываются.
  "editor.multiCursorMergeOverlapping": true,

  // Модификатор, который будет использоваться для добавления нескольких курсоров с помощью мыши. Жесты мыши "Перейти к определению" и "Открыть ссылку" будут изменены так, чтобы они не конфликтовали c [multicursor modifier](https://code.visualstudio.com/docs/editor/codebasics#_multicursor-modifier).
  //  - ctrlCmd: Соответствует клавише CTRL в Windows и Linux и клавише COMMAND в macOS.
  //  - alt: Соответствует клавише ALT в Windows и Linux и клавише OPTION в macOS.
  "editor.multiCursorModifier": "alt",

  // Управляет вставкой, когда число вставляемых строк соответствует числу курсоров.
  //  - spread: Каждый курсор вставляет одну строку текста.
  //  - full: Каждый курсор вставляет полный текст.
  "editor.multiCursorPaste": "spread",

  // Определяет, должен ли редактор выделять экземпляры семантических символов.
  "editor.occurrencesHighlight": true,

  // Определяет, должна ли отображаться граница на обзорной линейке.
  "editor.overviewRulerBorder": true,

  // Задает пространство между нижним краем редактора и последней строкой.
  "editor.padding.bottom": 0,

  // Задает пространство между верхним краем редактора и первой строкой.
  "editor.padding.top": 0,

  // Определяет, меню подсказок остается открытым или закроется при достижении конца списка.
  "editor.parameterHints.cycle": true,

  // Включает всплывающее окно с документацией по параметру и сведениями о типе, которое отображается во время набора.
  "editor.parameterHints.enabled": true,

  // Определяет, можно ли вставлять содержимое различными способами.
  "editor.pasteAs.enabled": true,

  // Определяет, отображается ли мини-приложение при вставке содержимого в редактор. Это мини-приложение позволяет управлять тем, как вставляется файл.
  //  - afterPaste: Отображать мини-приложение выбора вставки после вставки содержимого в редактор.
  //  - never: Никогда не показывать мини-приложение выбора вставки. Вместо этого всегда используется действие вставки по умолчанию.
  "editor.pasteAs.showPasteSelector": "afterPaste",

  // Определяет, следует ли переключить фокус на встроенный редактор или дерево в виджете обзора.
  //  - tree: Фокусировка на дереве при открытии обзора
  //  - editor: Фокусировка на редакторе при открытии обзора
  "editor.peekWidgetDefaultFocus": "tree",

  // Определяет, должны ли предложения автоматически отображаться при вводе. Этот параметр можно выбрать при вводе примечаний, строк и другого кода. Быстрые предложения можно настроить для отображения в виде фантомного текста или в мини-приложении предложений. Необходимо также помнить о параметре #editor.suggestOnTriggerCharacters#, который управляет активированием предложений специальными символами.
  "editor.quickSuggestions": {
    "other": "on",
    "comments": "off",
    "strings": "off"
  },

  // Управляет длительностью задержки (в мс) перед отображением кратких предложений.
  "editor.quickSuggestionsDelay": 10,

  // Включить/отключить возможность предварительного просмотра изменений перед переименованием
  "editor.rename.enablePreview": true,

  // Не рекомендуется; используйте вместо этого параметр "editor.linkedEditing".
  // Определяет, выполняет ли редактор автоматическое переименование по типу.
  "editor.renameOnType": false,

  // Определяет, должны ли в редакторе отображаться управляющие символы.
  "editor.renderControlCharacters": true,

  // Отображение номера последней строки, когда файл заканчивается новой строкой.
  "editor.renderFinalNewline": "on",

  // Определяет, должен ли редактор выделять текущую строку.
  //  - none
  //  - gutter
  //  - line
  //  - all: Выделяет поле и текущую строку.
  "editor.renderLineHighlight": "line",

  // Определяет, должен ли редактор отрисовывать выделение текущей строки, только когда он находится в фокусе.
  "editor.renderLineHighlightOnlyWhenFocus": false,

  // Определяет, должны ли в редакторе отображаться пробелы.
  //  - none
  //  - boundary: Отрисовка пробелов, кроме одиночных пробелов между словами.
  //  - selection: Отображать пробелы только в выделенном тексте.
  //  - trailing: Отображать только конечные пробелы.
  //  - all
  "editor.renderWhitespace": "selection",

  // Управляет тем, необходимо ли отображать скругленные углы для выделения.
  "editor.roundedSelection": true,

  // Отображать вертикальные линейки после определенного числа моноширинных символов. Для отображения нескольких линеек укажите несколько значений. Если не указано ни одного значения, вертикальные линейки отображаться не будут.
  "editor.rulers": [],

  // Управляйте тем, объявляются ли встроенные предложения средством чтения экрана.
  "editor.screenReaderAnnounceInlineSuggestion": true,

  // Управляет видимостью горизонтальной полосы прокрутки.
  //  - auto: Горизонтальная полоса прокрутки будет видна только при необходимости.
  //  - visible: Горизонтальная полоса прокрутки всегда будет видна.
  //  - hidden: Горизонтальная полоса прокрутки всегда будет скрыта.
  "editor.scrollbar.horizontal": "auto",

  // Высота горизонтальной полосы прокрутки.
  "editor.scrollbar.horizontalScrollbarSize": 12,

  // Управляет прокруткой при нажатии страницы или переходом к позиции щелчка.
  "editor.scrollbar.scrollByPage": false,

  // Управляет видимостью вертикальной полосы прокрутки.
  //  - auto: Вертикальная полоса прокрутки будет видна только при необходимости.
  //  - visible: Вертикальная полоса прокрутки всегда будет видна.
  //  - hidden: Вертикальная полоса прокрутки всегда будет скрыта.
  "editor.scrollbar.vertical": "auto",

  // Ширина вертикальной полосы прокрутки.
  "editor.scrollbar.verticalScrollbarSize": 14,

  // Управляет количеством дополнительных символов, на которое содержимое редактора будет прокручиваться по горизонтали.
  "editor.scrollBeyondLastColumn": 4,

  // Определяет, будет ли содержимое редактора прокручиваться за последнюю строку.
  "editor.scrollBeyondLastLine": true,

  // Прокрутка только вдоль основной оси при прокрутке по вертикали и горизонтали одновременно. Предотвращает смещение по горизонтали при прокрутке по вертикали на трекпаде.
  "editor.scrollPredominantAxis": true,

  // Определяет, должен ли редактор выделять совпадения, аналогичные выбранному фрагменту.
  "editor.selectionHighlight": true,

  // Определяет показ семантической подсветки для языков, поддерживающих ее.
  //  - true: Семантическое выделение включено для всех цветовых тем.
  //  - false: Семантическое выделение отключено для всех цветовых тем.
  //  - configuredByTheme: Семантическое выделение настраивается с помощью параметра "semanticHighlighting" текущей цветовой темы.
  "editor.semanticHighlighting.enabled": "configuredByTheme",

  // Переопределяет цвет и стили семантического токена редактора из выбранной в настоящий момент цветовой темы.
  "editor.semanticTokenColorCustomizations": {},

  // Управляет перечеркиванием устаревших переменных.
  "editor.showDeprecated": true,

  // Определяет, когда элементы управления свертывания отображаются на переплете.
  //  - always: Всегда показывать свертываемые элементы управления.
  //  - never: Никогда не показывать элементы управления свертыванием и уменьшать размер переплета.
  //  - mouseover: Показывать только элементы управления свертывания, когда указатель мыши находится над переплетом.
  "editor.showFoldingControls": "mouseover",

  // Управляет скрытием неиспользуемого кода.
  "editor.showUnused": true,

  // Должны ли всегда быть выбраны начальный и конечный пробелы.
  "editor.smartSelect.selectLeadingAndTrailingWhitespace": true,

  // Следует ли выбирать вложенные слова (например, "foo" в "fooBar" или "foo_bar").
  "editor.smartSelect.selectSubwords": true,

  // Определяет, будет ли использоваться анимация при прокрутке содержимого редактора
  "editor.smoothScrolling": false,

  // Определяет, отображается ли окружение с фрагментами кода или фрагменты кода шаблонов файлов как действия кода.
  "editor.snippets.codeActions.enabled": true,

  // Управляет отображением фрагментов вместе с другими предложениями и их сортировкой.
  //  - top: Отображать предложения фрагментов поверх других предложений.
  //  - bottom: Отображать предложения фрагментов под другими предложениями.
  //  - inline: Отображать предложения фрагментов рядом с другими предложениями.
  //  - none: Не отображать предложения фрагментов.
  "editor.snippetSuggestions": "inline",

  // Оставлять быстрый редактор открытым даже при двойном щелчке по его содержимому и при нажатии ESC.
  "editor.stablePeek": false,

  // Определяет модель, используемую для определения строк залипания. Если модель структуры не существует, она откатится к модели поставщика свертывания, которая откатывается к модели отступов. Этот порядок соблюдается во всех трех случаях.
  "editor.stickyScroll.defaultModel": "outlineModel",

  // Отображает вложенные текущие области во время прокрутки в верхней части редактора.
  "editor.stickyScroll.enabled": false,

  // Определяет максимальное число залипающих линий для отображения.
  "editor.stickyScroll.maxLineCount": 5,

  // Enable scrolling of the sticky scroll widget with the editor's horizontal scrollbar.
  "editor.stickyScroll.scrollWithEditor": true,

  // Эмулировать поведение выделения для символов табуляции при использовании пробелов для отступа. Выделение будет применено к позициям табуляции.
  "editor.stickyTabStops": false,

  // Этот параметр устарел. Используйте вместо него отдельные параметры, например, 'editor.suggest.showKeywords' или 'editor.suggest.showSnippets'.
  //
  "editor.suggest.filteredTypes": {},

  // Управляет тем, допускаются ли небольшие опечатки в предложениях фильтрации и сортировки.
  "editor.suggest.filterGraceful": true,

  // Определяет, будут ли перезаписываться слова при принятии вариантов завершения. Обратите внимание, что это зависит от расширений, использующих эту функцию.
  //  - insert: Вставить предложение без перезаписи текста справа от курсора.
  //  - replace: Вставить предложение и перезаписать текст справа от курсора.
  "editor.suggest.insertMode": "insert",

  // Определяет, следует ли учитывать при сортировке слова, расположенные рядом с курсором.
  "editor.suggest.localityBonus": false,

  // При включении фильтрации IntelliSense необходимо, чтобы первый символ совпадал в начале слова, например "c" в "Console" или "WebContext", но _не_ в "description". Если параметр отключен, IntelliSense отображает больше результатов, но по-прежнему сортирует их по качеству соответствия.
  "editor.suggest.matchOnWordStartOnly": true,

  // Этот параметр является нерекомендуемым. Теперь размер мини-приложения предложений можно изменить.
  //
  "editor.suggest.maxVisibleSuggestions": 0,

  // Определяет, следует ли просматривать результат предложения в редакторе.
  "editor.suggest.preview": false,

  // Определяет, выбирается ли предложение при отображении мини-приложения. Обратите внимание, что этот параметр применяется только к автоматически активированным предложениям ("#editor.quickSuggestions#" и "#editor.suggestOnTriggerCharacters#"), и что предложение всегда выбирается при явном вызове, например с помощью сочетания клавиш "CTRL+ПРОБЕЛ".
  //  - always: Всегда выбирать предложение при автоматической активации IntelliSense.
  //  - never: Никогда не выбирать предложение при автоматической активации IntelliSense.
  //  - whenTriggerCharacter: Выбирать предложение только при активации IntelliSense с помощью триггерного символа.
  //  - whenQuickSuggestion: Выбирать предложение только при активации IntelliSense по мере ввода.
  "editor.suggest.selectionMode": "always",

  // Определяет, используются ли сохраненные варианты выбора предложений совместно несколькими рабочими областями и окнами (требуется "#editor.suggestSelection#").
  "editor.suggest.shareSuggestSelections": false,

  // Когда параметр включен, в IntelliSense отображаются предложения "class".
  "editor.suggest.showClasses": true,

  // Когда параметр включен, в IntelliSense отображаются предложения "color".
  "editor.suggest.showColors": true,

  // Когда параметр включен, в IntelliSense отображаются предложения "constant".
  "editor.suggest.showConstants": true,

  // Когда параметр включен, в IntelliSense отображаются предложения "constructor".
  "editor.suggest.showConstructors": true,

  // Когда параметр включен, в IntelliSense отображаются предложения "customcolor".
  "editor.suggest.showCustomcolors": true,

  // Когда параметр включен, в IntelliSense отображаются предложения "deprecated".
  "editor.suggest.showDeprecated": true,

  // Когда параметр включен, в IntelliSense отображаются предложения "enumMember".
  "editor.suggest.showEnumMembers": true,

  // Когда параметр включен, в IntelliSense отображаются предложения "enum".
  "editor.suggest.showEnums": true,

  // Когда параметр включен, в IntelliSense отображаются предложения "event".
  "editor.suggest.showEvents": true,

  // Когда параметр включен, в IntelliSense отображаются предложения "field".
  "editor.suggest.showFields": true,

  // Когда параметр включен, в IntelliSense отображаются предложения "file".
  "editor.suggest.showFiles": true,

  // Когда параметр включен, в IntelliSense отображаются предложения "folder".
  "editor.suggest.showFolders": true,

  // Когда параметр включен, в IntelliSense отображаются предложения "function".
  "editor.suggest.showFunctions": true,

  // Указывает, нужно ли отображать значки в предложениях.
  "editor.suggest.showIcons": true,

  // Определяет, отображаются ли сведения о предложении в строке вместе с меткой или только в мини-приложении сведений.
  "editor.suggest.showInlineDetails": true,

  // Когда параметр включен, в IntelliSense отображаются предложения "interface".
  "editor.suggest.showInterfaces": true,

  // Во включенном состоянии IntelliSense отображает предложения типа "проблемы".
  "editor.suggest.showIssues": true,

  // Когда параметр включен, в IntelliSense отображаются предложения "keyword".
  "editor.suggest.showKeywords": true,

  // Когда параметр включен, в IntelliSense отображаются предложения "method".
  "editor.suggest.showMethods": true,

  // Когда параметр включен, в IntelliSense отображаются предложения "module".
  "editor.suggest.showModules": true,

  // Когда параметр включен, в IntelliSense отображаются предложения "operator".
  "editor.suggest.showOperators": true,

  // Когда параметр включен, в IntelliSense отображаются предложения "property".
  "editor.suggest.showProperties": true,

  // Когда параметр включен, в IntelliSense отображаются предложения "reference".
  "editor.suggest.showReferences": true,

  // Когда параметр включен, в IntelliSense отображаются предложения "snippet".
  "editor.suggest.showSnippets": true,

  // Определяет видимость строки состояния в нижней части виджета предложений.
  "editor.suggest.showStatusBar": false,

  // Когда параметр включен, в IntelliSense отображаются предложения "struct".
  "editor.suggest.showStructs": true,

  // Когда параметр включен, в IntelliSense отображаются предложения "typeParameter".
  "editor.suggest.showTypeParameters": true,

  // Когда параметр включен, в IntelliSense отображаются предложения "unit".
  "editor.suggest.showUnits": true,

  // Во включенном состоянии IntelliSense показывает предложения типа "пользователи".
  "editor.suggest.showUsers": true,

  // Когда параметр включен, в IntelliSense отображаются предложения "value".
  "editor.suggest.showValues": true,

  // Когда параметр включен, в IntelliSense отображаются предложения "variable".
  "editor.suggest.showVariables": true,

  // Когда параметр включен, в IntelliSense отображаются предложения "text".
  "editor.suggest.showWords": true,

  // Определяет, запрещает ли активный фрагмент кода экспресс-предложения.
  "editor.suggest.snippetsPreventQuickSuggestions": false,

  // Размер шрифта для мини-приложения предложений. Если установлено `0`, используется значение `editor.fontSize`.
  "editor.suggestFontSize": 0,

  // Высота строки для мини-приложения предложений. Если установлено `0`, используется значение `editor.lineHeight`. Минимальное значение — 8.
  "editor.suggestLineHeight": 0,

  // Определяет, должны ли при вводе триггерных символов автоматически отображаться предложения.
  "editor.suggestOnTriggerCharacters": true,

  // Управляет предварительным выбором предложений при отображении списка предложений.
  //  - first: Всегда выбирать первое предложение.
  //  - recentlyUsed: Выбор недавних предложений, если только дальнейший ввод не приводит к использованию одного из них, например "console.| -> console.log", так как "log" недавно использовался для завершения.
  //  - recentlyUsedByPrefix: Выбор предложений с учетом предыдущих префиксов, использованных для завершения этих предложений, например "co -> console" и "con -> const".
  "editor.suggestSelection": "first",

  // Включает дополнения по TAB.
  //  - on: При использовании дополнения по TAB будет добавляться наилучшее предложение при нажатии клавиши TAB.
  //  - off: Отключить дополнение по TAB.
  //  - onlySnippets: Вставка дополнений по TAB при совпадении их префиксов. Функция работает оптимально, если параметр "quickSuggestions" отключен.
  "editor.tabCompletion": "off",

  // Определяет, получает ли редактор вкладки или откладывает ли их в рабочую среду для навигации.
  "editor.tabFocusMode": false,

  // Число пробелов, соответствующее табуляции. Этот параметр переопределяется на основе содержимого файла, если включен параметр `editor.detectIndentation`.
  "editor.tabSize": 4,

  // Переопределяет цвета синтаксиса и начертание шрифта редактора из выбранной в настоящий момент цветовой темы.
  "editor.tokenColorCustomizations": {},

  // Удалить автоматически вставляемый конечный пробел.
  "editor.trimAutoWhitespace": true,

  // Определяет, будет ли щелчок пустого содержимого после свернутой строки развертывать ее.
  "editor.unfoldOnClickAfterEndOfLine": false,

  // Определяет разрешенные символы, которые не выделяются.
  "editor.unicodeHighlight.allowedCharacters": {},

  // Символы Юникода, распространенные в разрешенных языках, не выделяются.
  "editor.unicodeHighlight.allowedLocales": {
    "_os": true,
    "_vscode": true
  },

  // Управляет выделением символов, которые можно спутать с основными символами ASCII, кроме тех, которые являются общими в текущем языковом стандарте пользователя.
  "editor.unicodeHighlight.ambiguousCharacters": true,

  // Определяет, должны ли символы в комментариях также выделяться в Юникоде.
  "editor.unicodeHighlight.includeComments": "inUntrustedWorkspace",

  // Определяет, должны ли символы в строках также выделяться в Юникоде.
  "editor.unicodeHighlight.includeStrings": true,

  // Определяет, выделяются ли символы, которые просто резервируют пространство или вообще не имеют ширины.
  "editor.unicodeHighlight.invisibleCharacters": true,

  // Управляет выделением всех нестандартных символов ASCII. Базовыми ASCII считаются только символы между U+0020 и U+007E, табуляция, перевод строки и возврат каретки.
  "editor.unicodeHighlight.nonBasicASCII": "inUntrustedWorkspace",

  // Удалите необычные символы завершения строки, которые могут вызвать проблемы.
  //  - auto: Необычные символы завершения строки автоматически удаляются.
  //  - off: Необычные символы завершения строки игнорируются.
  //  - prompt: Для необычных символов завершения строки запрашивается удаление.
  "editor.unusualLineTerminators": "prompt",

  // Вставка и удаление пробелов после позиции табуляции
  "editor.useTabStops": true,

  // Определяет, следует ли оценивать завершения на основе слов в документе.
  "editor.wordBasedSuggestions": true,

  // Определяет, из каких документов будут вычисляться завершения на основе слов.
  //  - currentDocument: Предложение слов только из активного документа.
  //  - matchingDocuments: Предложение слов из всех открытых документов на одном языке.
  //  - allDocuments: Предложение слов из всех открытых документов.
  "editor.wordBasedSuggestionsMode": "matchingDocuments",

  // Управляет правилами разбиения по словам, используемыми для текста на китайском,японском и корейском языке (CJK).
  //  - normal: Использовать правило разрыва строк по умолчанию.
  //  - keepAll: Не следует использовать разрывы слов для текста на китайском, японском или корейском языке (CJK). Для других текстов используется обычное поведение.
  "editor.wordBreak": "normal",

  // Символы, которые будут использоваться как разделители слов при выполнении навигации или других операций, связанных со словами.
  "editor.wordSeparators": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",

  // Управляет тем, как следует переносить строки.
  //  - off: Строки не будут переноситься никогда.
  //  - on: Строки будут переноситься по ширине окна просмотра.
  //  - wordWrapColumn: Строки будут переноситься по "#editor.wordWrapColumn#".
  //  - bounded: Строки будут перенесены по минимальному значению из двух: ширина окна просмотра и "#editor.wordWrapColumn#".
  "editor.wordWrap": "off",

  // Определяет столбец переноса редактора, если значение "#editor.wordWrap#" — "wordWrapColumn" или "bounded".
  "editor.wordWrapColumn": 80,

  // Управляет отступом строк с переносом по словам.
  //  - none: Без отступа. Перенос строк начинается со столбца 1.
  //  - same: Перенесенные строки получат тот же отступ, что и родительская строка.
  //  - indent: Перенесенные строки получат отступ, увеличенный на единицу по сравнению с родительской строкой.
  //  - deepIndent: Перенесенные строки получат отступ, увеличенный на два по сравнению с родительской строкой.
  "editor.wrappingIndent": "same",

  // Управляет алгоритмом, который вычисляет точки переноса. Обратите внимание, что в режиме специальных возможностей будет использован расширенный алгоритм, чтобы обеспечить наибольшее удобство работы.
  //  - simple: Предполагает, что все символы имеют одинаковую ширину. Это быстрый алгоритм, который работает правильно для моноширинных шрифтов и некоторых скриптов (например, латинских символов), где глифы имеют одинаковую ширину.
  //  - advanced: Делегирует вычисление точек переноса браузеру. Это медленный алгоритм, который может привести к зависаниям при обработке больших файлов, но работает правильно во всех случаях.
  "editor.wrappingStrategy": "simple",

  // Укажите, будут ли изменения, созданные в интерактивном редакторе, применяться непосредственно к документу или сначала будет осуществляться предварительный просмотр.
  //  - livePreview: Изменения применяются непосредственно к документу и визуально выделяются с помощью функции строковых или параллельных несовпадений. При завершении сеанса изменения сохраняются.
  //  - preview: Изменения отображаются только в режиме предварительного просмотра и должны быть приняты с помощью кнопки "Применить". При завершении сеанса изменения будут отменены.
  //  - live: Изменения применяются непосредственно к документу, но могут быть выделены с помощью функции строковых несовпадений. При завершении сеанса изменения сохраняются.
  "inlineChat.mode": "livePreview",

  // Включение или отключение отображения инструмента сравнения при внесении изменений. Работает только с inlineChat.mode со значением live или livePreview.
  "inlineChat.showDiff": true,

  // Определяет, будут ли внутренние действия всегда отображаться в представлении системы управления версиями.
  "scm.alwaysShowActions": false,

  // Определяет, должны ли репозитории всегда отображаться в представлении системы управления версиями.
  "scm.alwaysShowRepositories": false,

  // Определяет, должно ли представление системы управления версиями автоматически отображать и выбирать файлы при их открытии.
  "scm.autoReveal": true,

  // Контролирует счетчик на значке системы управления версиями в панели действий.
  //  - all: Отображение суммы всех счетчиков для поставщиков систем управления версиями.
  //  - focused: Отображает индикатор событий для выбранного поставщика систем управления версиями.
  //  - off: Отключить индикатор событий для системы управления версиями.
  "scm.countBadge": "all",

  // Управляет режимом просмотра для репозитория системы управления версиями по умолчанию.
  //  - tree: Отображение изменений репозитория в виде дерева.
  //  - list: Отображение изменений репозитория в виде списка.
  "scm.defaultViewMode": "list",

  // Управляет порядком сортировки изменений репозитория системы управления версиями по умолчанию при просмотре в виде списка.
  //  - name: Сортировка изменений репозитория по названию файла.
  //  - path: Сортировка изменений репозитория по пути.
  //  - status: Отсортируйте изменения репозитория по статусу системы управления версиями.
  "scm.defaultViewSortKey": "path",

  // Управляет декораторами diff в редакторе.
  //  - all: Отображать декораторы различий во всех доступных расположениях.
  //  - gutter: Отображать декораторы для различий только во внутренней области редактора.
  //  - overview: Отображать декораторы для различий только на линейке окна просмотра.
  //  - minimap: Отображать декораторы различий только на миникарте.
  //  - none: Не отображать декораторы различий.
  "scm.diffDecorations": "all",

  // Управляет поведением элементов оформления внутренней области сравнения системы управления версиями.
  //  - diff: Отображать по щелчку встроенное разностное представление быстрого редактирования.
  //  - none: Не выполнять никаких действий.
  "scm.diffDecorationsGutterAction": "diff",

  // Определяет, используется ли шаблон для оформления различий в переплете.
  "scm.diffDecorationsGutterPattern": {
    "added": false,
    "modified": true
  },

  // Управляет видимостью декоратора несовпадений для системы управления версиями во внутренней области.
  //  - always: Отображение декоратора несовпадений во внутренней области во всех случаях.
  //  - hover: Отображение декоратора несовпадений во внутренней области только при наведении указателя.
  "scm.diffDecorationsGutterVisibility": "always",

  // Определяет ширину (в пикселях) оформления несовпадений во внутреннем поле (добавленные и измененные).
  "scm.diffDecorationsGutterWidth": 3,

  // Определяет, игнорируются ли начальные и конечные пробелы в оформлении внутренней области в системе управления версиями.
  //  - true: Игнорировать начальные и конечные пробелы.
  //  - false: Не игнорировать начальные и конечные пробелы.
  //  - inherit: Наследовать от diffEditor.ignoreTrimWhitespace.
  "scm.diffDecorationsIgnoreTrimWhitespace": "false",

  // Определяет шрифт входного сообщения. Укажите значение default, чтобы использовать семейство шрифтов пользовательского интерфейса рабочей области, editor, чтобы использовать значение параметра #editor.fontFamily#, или укажите пользовательское семейство шрифтов.
  "scm.inputFontFamily": "default",

  // Управляет размером шрифта для входного сообщения (в пикселях).
  "scm.inputFontSize": 13,

  // Контролирует счетчики в заголовках для поставщиков систем управления версиями. Эти заголовки отображаются только при наличии более одного поставщика.
  //  - hidden: Скрытие счетчиков для поставщиков систем управления версиями.
  //  - auto: Отображение счетчика для поставщика системы управления версиями только при ненулевом значении.
  //  - visible: Отображение счетчиков для поставщиков систем управления версиями.
  "scm.providerCountBadge": "hidden",

  // Управляет порядком сортировки репозиториев в представлении репозиториев системы управления версиями.
  //  - discovery time: Репозитории в представлении репозиториев системы управления версиями сортируются по времени обнаружения. Репозитории в представлении системы управления версиями сортируются в том порядке, в котором они были выбраны.
  //  - name: Репозитории в представлении репозиториев системы управления версиями и представлении системы управления версиями сортируются по имени репозитория.
  //  - path: Репозитории в представлении репозиториев системы управления версиями и представлении системы управления версиями сортируются по пути репозитория.
  "scm.repositories.sortOrder": "discovery time",

  // Определяет число репозиториев, отображаемых в разделе "Репозитории системы управления версиями". Задайте значение 0, чтобы размеры представления можно было изменить вручную.
  "scm.repositories.visible": 10,

  // Определяет, может ли управляющая кнопка отображаться в представлении системы управления версиями.
  "scm.showActionButton": true,

  // Набор имен узлов UNC (без начальной или конечной обратной косой черты, например "192.168.0.1" или "my-server") для разрешения без подтверждения пользователем. Если доступ к узлу UNC запрещен с помощью этого параметра или не подтвержден пользователем, произойдет ошибка, а операция будет остановлена. При изменении этого параметра требуется перезагрузка. Дополнительные сведения об этом параметре см. на странице https://aka.ms/vscode-windows-unc.
  "security.allowedUNCHosts": [],

  // Если этот параметр включен, разрешается доступ только к именам узлов UNC, разрешенным параметром "#security.allowedUNCHosts#" или после подтверждения пользователем. Дополнительные сведения об этом параметре см. на странице https://aka.ms/vscode-windows-unc.
  "security.restrictUNCAccess": true,

  // Управляет тем, когда отображается баннер ограниченного режима.
  //  - always: Показывать баннер при каждом открытии недоверенной рабочей области.
  //  - untilDismissed: При открытии недоверенной рабочей области будет отображаться баннер, который можно закрыть.
  //  - never: Не показывать баннер при открытии недоверенной рабочей области.
  "security.workspace.trust.banner": "untilDismissed",

  // Определяет, является ли пустое окно доверенным по умолчанию в VS Code. При использовании с "#security.workspace.trust.untrustedFiles#" можно включить все функции VS Code без запросов в пустом окне.
  "security.workspace.trust.emptyWindow": true,

  // Определяет, включено ли доверие рабочей области в VS Code.
  "security.workspace.trust.enabled": true,

  // Определяет, когда отображается запрос на доверие рабочей области при запуске.
  //  - always: Запрашивать доверие при каждом открытии недоверенной рабочей области.
  //  - once: Запрашивать доверие при первом открытии недоверенной рабочей области.
  //  - never: Не запрашивать доверие при открытии недоверенной рабочей области.
  "security.workspace.trust.startupPrompt": "once",

  // Определяет, как обрабатывать открытие недоверенных файлов в доверенной рабочей области. Этот параметр также применяется для открытия файлов в пустом окне, которое является доверенным через "#security.workspace.trust.emptyWindow#".
  //  - prompt: Узнайте, как обрабатывать недоверенные файлы для каждой рабочей области. После того как недоверенные файлы будут введены в доверенную рабочую область, вам больше не будет предложено.
  //  - open: Всегда разрешать вводить ненадежные файлы в доверенную рабочую область без запроса.
  //  - newWindow: Всегда открывать недоверенные файлы в отдельном окне в ограниченном режиме без запроса.
  "security.workspace.trust.untrustedFiles": "prompt",

  // Whether to dim unfocused editors and terminals, which makes it more clear where typed input will go to. This works with the majority of editors with the notable exceptions of those that utilize iframes like notebooks and extension webview editors.
  "accessibility.dimUnfocused.enabled": false,

  // The opacity fraction (0.2 to 1.0) to use for unfocused editors and terminals. This will only take effect when `accessibility.dimUnfocused.enabled` is enabled.
  "accessibility.dimUnfocused.opacity": 0.75,

  // Управляет тем, что происходит при щелчке на значке панели действий на рабочем месте.
  //  - toggle: Скрыть боковую панель, если элемент, на котором была нажата кнопка мыши, уже отображается.
  //  - focus: Перевести фокус на боковую панель, если элемент, на котором была нажата кнопка мыши, уже отображается.
  "workbench.activityBar.iconClickBehavior": "toggle",

  // Управляет видимостью панели действий на рабочем месте.
  "workbench.activityBar.visible": true,

  // Определяет, следует ли автоматически возобновлять доступные рабочие изменения, хранящиеся в облаке, для текущей рабочей области.
  //  - onReload: Автоматическое возобновление доступных рабочих изменений из облака при перезагрузке окна.
  //  - off: Никогда не пытайтесь возобновить рабочие изменения из облака.
  "workbench.cloudChanges.autoResume": "onReload",

  // Определяет, следует ли предлагать пользователю сохранить рабочие изменения в облаке при использовании функции "Продолжить работу".
  //  - prompt: Приглашение пользователю войти в систему для сохранения изменений в облаке с помощью функции "Продолжить работу".
  //  - off: Не сохраняйте рабочие изменения в облаке с помощью функции "Продолжить работу", если параметр "Изменения в облаке" еще не включен.
  "workbench.cloudChanges.continueOn": "prompt",

  // Переопределяет цвета из выбранной цветовой темы.
  "workbench.colorCustomizations": {},

  // Указывает цветовую тему, используемую на рабочем месте.
  "workbench.colorTheme": "Default Dark Modern",

  // Controls whether the command palette should include similar commands. You must have an extension installed that provides Natural Language support.
  "workbench.commandPalette.experimental.enableNaturalLanguageSearch": true,

  // Определяет, должна ли палитра команд содержать список часто используемых команд.
  "workbench.commandPalette.experimental.suggestCommands": false,

  // Определяет количество недавно использованных команд, которые следует хранить в журнале палитры команд. Установите значение 0, чтобы отключить журнал команд.
  "workbench.commandPalette.history": 50,

  // Определяет, следует ли восстановить последнюю введенную команду в палитре команд при следующем открытии палитры.
  "workbench.commandPalette.preserveInput": false,

  // Если редактор, соответствующий одному из перечисленных типов, открывается первым в группе редакторов и открыто более одной группы, группа автоматически блокируется. Заблокированные группы будут использоваться для открытия редакторов только в том случае, если они явно выбраны жестом пользователя (например, перетаскиванием), но не по умолчанию. Следовательно, маловероятно, что активный редактор в заблокированной группе будет случайно заменен другим редактором.
  "workbench.editor.autoLockGroups": {
    "default": false,
    "workbench.editorinputs.searchEditorInput": false,
    "workbench.editor.chatSession": false,
    "jupyter-notebook": false,
    "imagePreview.previewEditor": false,
    "vscode.audioPreview": false,
    "vscode.videoPreview": false,
    "jsProfileVisualizer.cpuprofile.table": false,
    "jsProfileVisualizer.heapprofile.table": false,
    "workbench.editors.gettingStartedInput": false,
    "terminalEditor": true,
    "workbench.input.interactive": false,
    "mainThreadWebview-markdown.preview": false
  },

  // Определяет, должны ли расположенные по центру элементы автоматически изменять размер до максимальной ширины при открытии нескольких групп. Если открыта только одна группа, размер расположенных по центру элементов будет автоматически восстановлен до исходного размера (по ширине окна).
  "workbench.editor.centeredLayoutAutoResize": true,

  // Определяет, будет ли центрированный макет поддерживать постоянную ширину при изменении размера окна.
  "workbench.editor.centeredLayoutFixedWidth": false,

  // Управляет поведением пустых групп редакторов при закрытии последней вкладки в группе. Если этот параметр установлен, пустые группы будут закрыты автоматически. Если этот параметр не установлен, пустые группы останутся частью сетки.
  "workbench.editor.closeEmptyGroups": true,

  // Определяет, следует ли автоматически закрывать редакторы, когда файл, который был открыт в начале сеанса, удален или переименован другим процессом. При отключении этой функции редактор останется открытым. Обратите внимание, что при удалении файла из приложения редактор закрывается в любом случае. Редакторы с несохраненными изменениями не закрываются, чтобы сохранить ваши данные.
  "workbench.editor.closeOnFileDelete": false,

  // Определяет, следует ли использовать эмблемы в декораторах файла в редакторе.
  "workbench.editor.decorations.badges": true,

  // Определяет, следует ли использовать цвета в декораторах файла в редакторе.
  "workbench.editor.decorations.colors": true,

  // Редактор по умолчанию для файлов, определенных как двоичные. Если не определено, пользователю будет представлен инструмент выбора.
  "workbench.editor.defaultBinaryEditor": "",

  // Определяет, следует ли развернуть/восстановить группу редакторов при двойном нажатии вкладки. Это значение игнорируется, если параметр "#workbench.editor.showTabs#" отключен.
  "workbench.editor.doubleClickTabToToggleEditorGroupSizes": true,

  // Определяет, будут ли открытые редакторы отображаться в режиме предварительного просмотра. Редакторы в режиме предварительного просмотра не остаются открытыми и используются повторно, пока не будут явно закреплены в открытом состоянии (с помощью двойного щелчка или открытия режима редактирования). Имена файлов в таких редакторах выделяются курсивом.
  "workbench.editor.enablePreview": true,

  // Определяет, остаются ли редакторы в режиме предварительного просмотра при запуске в них навигации по коду. Редакторы в режиме предварительного просмотра не остаются открытыми и используются повторно, пока не будут явно закреплены в открытом состоянии (с помощью двойного щелчка или открытия режима редактирования). Это значение пропускается, если отключен параметр #workbench.editor.enablePreview#.
  "workbench.editor.enablePreviewFromCodeNavigation": false,

  // Определяет, будут ли редакторы, открытые с помощью Quick Open, отображаться в режиме предварительного просмотра. Редакторы в режиме предварительного просмотра не остаются открытыми и используются повторно, пока не будут явно закреплены в открытом состоянии (с помощью двойного щелчка или открытия режима редактирования). Если включено, нажмите и удерживайте клавишу CTRL перед выбором, чтобы открыть редактор без предварительного просмотра. Это значение пропускается, если отключен параметр #workbench.editor.enablePreview#.
  "workbench.editor.enablePreviewFromQuickOpen": false,

  // Определяет, закрываются ли вкладки в порядке использования, начиная с последней, либо слева направо.
  "workbench.editor.focusRecentEditorAfterClose": true,

  // Определяет, отображается ли верхняя граница на вкладках редакторов с несохраненными изменениями. Это значение игнорируется, если параметр "#workbench.editor.showTabs#" отключен.
  "workbench.editor.highlightModifiedTabs": false,

  // Включает использование журнала редактора при распознавании языка. Это приведет к тому, что автоматическое распознавание языка будет предпочитать недавно открывавшиеся языки и разрешит автоматическому распознаванию языка работать с входными данными меньшего размера.
  "workbench.editor.historyBasedLanguageDetection": true,

  // Определяет формат метки редактора.
  //  - default: Отображать имя файла. Если вкладки включены и в одной группе есть два файла с одинаковыми именами, будут добавлены различающиеся части пути к каждому из этих файлов. Если вкладки отключены, то для активного редактора отображается путь по отношению к корневому каталогу рабочей области.
  //  - short: Отображать имя файла и имя каталога.
  //  - medium: Отображать имя файла и путь к файлу относительно папки рабочей области.
  //  - long: Отображать имя файла и абсолютный путь.
  "workbench.editor.labelFormat": "default",

  // Управляет тем, определяется ли язык в текстовом редакторе автоматически, если язык не был явным образом установлен в средстве выбора языка. Область также можно определить с помощью языка, поэтому вы можете указать языки, которые не нужно отключать. Это удобно для таких языков, как Markdown, которые часто содержат другие языки, из-за чего средство определения языка может выбрать внедренный язык, а не Markdown.
  "workbench.editor.languageDetection": true,

  // Если этот параметр включен, показывает быстрое исправление в строке состояния, когда язык редактора не соответствует обнаруженному языку содержимого.
  "workbench.editor.languageDetectionHints": {
    "untitledEditors": true,
    "notebookEditors": true
  },

  // Определяет, ограничивается ли количество открытых редакторов. Если этот параметр включен, редакторы, использовавшиеся давно, будут закрыты, чтобы освободить место для новых открываемых редакторов.
  "workbench.editor.limit.enabled": false,

  // Определяет, должно ли максимальное число открытых редакторов исключать "грязные" редакторы для подсчета настроенного предела.
  "workbench.editor.limit.excludeDirty": false,

  // Определяет, должен ли лимит максимального числа открытых редакторов применяться для отдельной группы редакторов или для всех групп редакторов.
  "workbench.editor.limit.perEditorGroup": false,

  // Управляет максимальным количеством открытых редакторов. Используйте параметр `workbench.editor.limit.perEditorGroup` для управления этим ограничением для одной группы редакторов или для всех групп.
  "workbench.editor.limit.value": 10,

  // Дает возможность использовать 4-ю и 5-ю кнопки мыши для команд "Назад" и "Вперед".
  "workbench.editor.mouseBackForwardToNavigate": true,

  // Управляет областью навигации в журналах редакторов для таких команд как "Назад" и "Вперед".
  //  - default: Переходить по всем открытым редакторам и группам редакторов.
  //  - editorGroup: Переходить только в редакторах активной группы редакторов.
  //  - editor: Переходить только в активном редакторе.
  "workbench.editor.navigationScope": "default",

  // Определяет место открытия редакторов. Выберите 'left' или 'right', чтобы открывать редакторы слева или справа от активного редактора. Выберите 'first' или 'last', чтобы открывать редакторы независимо от активного редактора.
  "workbench.editor.openPositioning": "right",

  // Определяет направление по умолчанию для редакторов, которые открываются рядом друг с другом (например, из Проводника). По умолчанию новые редакторы открываются с правой стороны от текущего активного редактора. Если изменить значение этого параметра на down, новые редакторы будут открываться снизу от текущего активного редактора.
  "workbench.editor.openSideBySideDirection": "right",

  // Определяет размер закрепленных вкладок редактора. Они располагаются первыми среди всех открытых вкладок и обычно не закрываются, пока не будут откреплены. Это значение игнорируется, если параметр "#workbench.editor.showTabs#" отключен.
  //  - normal: Закрепленная вкладка наследует вид незакрепленных вкладок.
  //  - compact: Закрепленная вкладка будет отображаться в компактном виде (только значок или первая буква имени редактора).
  //  - shrink: Закрепленная вкладка сжимается до компактного фиксированного размера, в котором отображаются части имени редактора.
  "workbench.editor.pinnedTabSizing": "normal",

  // Если этот параметр включен, более высокий приоритет получает модель распознавания языка, которая учитывает журнал редактора учетных записей.
  "workbench.editor.preferHistoryBasedLanguageDetection": false,

  // Controls whether pinned editors should close when keyboard or middle mouse click is used for closing.
  //  - keyboardAndMouse: Always prevent closing the pinned editor when using mouse middle click or keyboard.
  //  - keyboard: Prevent closing the pinned editor when using the keyboard.
  //  - mouse: Prevent closing the pinned editor when using mouse middle click.
  //  - never: Never prevent closing a pinned editor.
  "workbench.editor.preventPinnedEditorClose": "keyboardAndMouse",

  // Восстанавливает последнее состояние просмотра редактора (например, положение прокрутки) при повторном открытии редакторов. Состояние просмотра редактора сохраняется для каждой группы редакторов и сбрасывается при закрытии группы. Если предыдущее состояние просмотра не было найдено для группы редакторов, используйте параметр `workbench.editor.sharedViewState`, чтобы применить последнее известное состояние просмотра во всех группах редакторов.
  "workbench.editor.restoreViewState": true,

  // Определяет, отображается ли уже открытый редактор в какой-либо из видимых групп. Если функция отключена, редактор открывается в текущей активной группе редакторов. Если функция включена, вместо повторного открытия будет отображен уже открытый редактор в текущей активной группе редакторов. Обратите внимание, что в некоторых случаях этот параметр пропускается, например при принудительном открытии редактора в определенной группе или сбоку от текущей активной группы редакторов.
  "workbench.editor.revealIfOpen": false,

  // Определяет, приводит ли прокрутка по вкладкам к их открытию. По умолчанию при прокрутке вкладки только отображаются, но не открываются. Чтобы изменить это поведение, можно нажать и удерживать клавишу SHIFT во время прокрутки. Это значение игнорируется, если параметр #workbench.editor.showTabs# отключен.
  "workbench.editor.scrollToSwitchTabs": false,

  // Сохраняет самое последнее состояние просмотра редактора (например, положение прокрутки) во всех группах редакторов и восстанавливает его, если для группы редакторов не найдено конкретное состояние просмотра редактора.
  "workbench.editor.sharedViewState": false,

  // Определяет, должны ли открытые редакторы отображаться со значком. Для этого также требуется включить тему значков.
  "workbench.editor.showIcons": true,

  // Определяет, должны ли открытые редакторы отображаться на вкладках.
  "workbench.editor.showTabs": true,

  // Управляет схемой, когда редактор в группе редакторов должен быть либо вертикальным, либо горизонтальным.
  //  - vertical: Редакторы размещены сверху вниз.
  //  - horizontal: Редакторы размещены слева направо.
  "workbench.editor.splitInGroupLayout": "horizontal",

  // Определяет, можно ли разделять группы редакторов из операций перетаскивания путем перетаскивания редактора или файла на краях области редактора.
  "workbench.editor.splitOnDragAndDrop": true,

  // Определяет размер групп редакторов при их разделении.
  //  - auto: Разделяет активную группу редакторов на равные части, если только все группы редакторов уже не разделены на равные части. В этом случае разделяет все группы редакторов на равные части.
  //  - distribute: Разделяет группы редакторов на равные части.
  //  - split: Разделяет активную группу редакторов на равные части.
  "workbench.editor.splitSizing": "auto",

  // Определяет положение кнопок "Закрыть" на вкладках редактора или отключает их, если задано значение "off". Это значение игнорируется, если параметр "#workbench.editor.showTabs#" отключен.
  "workbench.editor.tabCloseButton": "right",

  // Определяет размер для вкладок редактора. Это значение игнорируется, если параметр "#workbench.editor.showTabs#" отключен.
  //  - fit: Всегда оставлять вкладки достаточно большим для отображения всей метки редактора.
  //  - shrink: Уменьшать вкладки, если свободного пространства недостаточно для отображения всех вкладок.
  //  - fixed: Сделайте все вкладки одинакового размера, что позволяет уменьшить их размер, если недостаточно свободного места для одновременного отображения всех вкладок.
  "workbench.editor.tabSizing": "fit",

  // Управляет максимальной шириной вкладок, если для размера "#workbench.editor.tabSizing#" задано значение "fixed".
  "workbench.editor.tabSizingFixedMaxWidth": 160,

  // Управляет минимальной шириной вкладок, если для размера "#workbench.editor.tabSizing#" задано значение "fixed".
  "workbench.editor.tabSizingFixedMinWidth": 50,

  // Определяет высоту полос прокрутки, используемых для вкладок и элементов навигации в области заголовка редактора.
  //  - default: Размер по умолчанию.
  //  - large: Увеличивает размер, упрощая захват с помощью мыши.
  "workbench.editor.titleScrollbarSizing": "default",

  // Управляет тем, должна ли текстовая подсказка без названия быть видимой в редакторе.
  "workbench.editor.untitled.hint": "text",

  // Определяет формат метки для безымянного редактора.
  //  - content: Имя безымянного файла является производным от содержимого его первой строки, если только не имеется соответствующий путь к файлу. Возврат к этому имени выполняется, если строка является пустой или содержит символы, отличные от словообразующих.
  //  - name: Имя безымянного файла не является производным от содержимого файла.
  "workbench.editor.untitled.labelFormat": "content",

  // Определяет, необходимо ли разместить вкладки на нескольких строках или отобразить полосу прокрутки при превышении доступного пространства. Это значение игнорируется, если параметр "#workbench.editor.showTabs#" отключен.
  "workbench.editor.wrapTabs": false,

  // Настройте [шаблоны подстановки](https://aka.ms/vscode-glob-patterns) для редакторов (например, `"*.hex": "hexEditor.hexedit"`). Они имеют приоритет над поведением по умолчанию.
  "workbench.editorAssociations": {},

  // Определяет минимальный размер файла в МБ перед запросом подтверждения при открытии в редакторе. Обратите внимание, что этот параметр может применяться не ко всем типам редакторов и средам.
  "workbench.editorLargeFileConfirmation": 1024,

  // Получает эксперименты для запуска от веб-службы Майкрософт.
  "workbench.enableExperiments": true,

  // Управляет автоматическим хранением доступных рабочих изменений в облаке для текущей рабочей области. Этот параметр не действует в Интернете.
  //  - onShutdown: Автоматическое сохранение текущих рабочих изменений в облаке при закрытии окна.
  //  - off: Никогда не пытайтесь автоматически сохранять рабочие изменения в облаке.
  "workbench.experimental.cloudChanges.autoStore": "off",

  // Определяет, следует ли отображать изменения в облаке, которые частично соответствуют текущему сеансу.
  "workbench.experimental.cloudChanges.partialMatches.enabled": false,

  // Определяет, следует ли отображать действие "Поделиться" рядом с командным центром, если `window.commandCenter`: `true`.
  "workbench.experimental.share.enabled": false,

  // Настройте средство открытия для внешних URI (например, HTTP, HTTPS).
  "workbench.externalUriOpeners": {},

  // Управляет задержкой в миллисекундах, по истечении которой отображается наведенный указатель мыши для элементов рабочего места (например, для элементов представления в виде дерева для некоторых расширений). После изменения этого параметра для отображения нового поведения может потребоваться обновить уже видимые элементы.
  "workbench.hover.delay": 500,

  // Указывает тему значков файлов, используемую на рабочем месте, или значение "null", чтобы никакие значки файлов не отображались.
  //  - null: Нет значков файлов
  //  - vs-minimal
  //  - vs-seti
  //  - material-icon-theme
  "workbench.iconTheme": "vs-seti",

  // Управляет тем, отображается ли элемент управления макетом в настраиваемом заголовке. Этот параметр действует только в том случае, если для `window.titleBarStyle` установлено значение `custom`.
  "workbench.layoutControl.enabled": true,

  // Определяет, отображается ли элемент управления макета в настраиваемой строке заголовка в виде одной кнопки меню или с несколькими переключателем пользовательского интерфейса.
  //  - menu: Отображает одну кнопку с раскрывающимся списком параметров макета.
  //  - toggles: Отображает нескольких кнопок для переключения видимости панелей и боковой панели.
  //  - both: Отображает кнопки раскрывающегося списка и переключатели.
  "workbench.layoutControl.type": "both",

  // Управляет типом сопоставления, используемым при поиске списков и деревьев в Workbench.
  //  - fuzzy: Использовать нечеткое соответствие при поиске.
  //  - contiguous: Использовать непрерывное сопоставление при поиске.
  "workbench.list.defaultFindMatchType": "fuzzy",

  // Управляет режимом поиска по умолчанию для списков и деревьев в Workbench.
  //  - highlight: При поиске необходимо выделять элементы. При дальнейшей навигации вверх и вниз выполняется обход только выделенных элементов.
  //  - filter: Фильтруйте элементы при поиске.
  "workbench.list.defaultFindMode": "highlight",

  // Коэффициент увеличения скорости прокрутки при нажатии клавиши ALT.
  "workbench.list.fastScrollSensitivity": 5,

  // Определяет, поддерживают ли горизонтальную прокрутку списки и деревья на рабочем месте. Предупреждение! Включение этого параметра может повлиять на производительность.
  "workbench.list.horizontalScrolling": false,

  // Вместо этого используйте "workbench.list.defaultFindMode" и "workbench.list.typeNavigationMode".
  // Управляет стилем навигации с клавиатуры для списков и деревьев в Workbench. Доступен простой режим, режим выделения и режим фильтрации.
  //  - simple: Про простой навигации с клавиатуры выбираются элементы, соответствующие вводимым с клавиатуры данным. Сопоставление осуществляется только по префиксам.
  //  - highlight: Функция подсветки навигации с клавиатуры выделяет элементы, соответствующие вводимым с клавиатуры данным. При дальнейшей навигации вверх и вниз выполняется обход только выделенных элементов.
  //  - filter: Фильтр навигации с клавиатуры позволяет отфильтровать и скрыть все элементы, не соответствующие вводимым с клавиатуры данным.
  "workbench.list.keyboardNavigation": "highlight",

  // Множитель, используемый для параметров deltaX и deltaY событий прокрутки колесика мыши.
  "workbench.list.mouseWheelScrollSensitivity": 1,

  // Модификатор, который будет использоваться для добавления элементов в деревьях и списках в элемент множественного выбора с помощью мыши (например, в проводнике, в открытых редакторах и в представлении scm). Жесты мыши "Открыть сбоку" (если они поддерживаются) будут изменены таким образом, чтобы они не конфликтовали с модификатором элемента множественного выбора.
  //  - ctrlCmd: Соответствует клавише CTRL в Windows и Linux и клавише COMMAND в macOS.
  //  - alt: Соответствует клавише ALT в Windows и Linux и клавише OPTION в macOS.
  "workbench.list.multiSelectModifier": "ctrlCmd",

  // Управляет тем, как открывать элементы в деревьях и списках с помощью мыши (если поддерживается). Обратите внимание, что этот параметр может игнорироваться в некоторых деревьях и списках, если он не применяется к ним.
  "workbench.list.openMode": "singleClick",

  // Определяет, следует ли щелкать полосу прокрутки постранично.
  "workbench.list.scrollByPage": false,

  // Управляет тем, используется ли плавная прокрутка для списков и деревьев.
  "workbench.list.smoothScrolling": false,

  // Управляет навигацией по типам в списках и деревьях в рабочей среде. Если установлено значение "триггер", навигация по типу начинается после запуска команды "list.triggerTypeNavigation".
  "workbench.list.typeNavigationMode": "automatic",

  // Определяет, включен ли локальный журнал файлов. Если этот параметр включен, сохраненное содержимое файла редактора будет храниться в расположении резервной копии, чтобы его можно было восстановить или просмотреть позже. Изменение этого параметра не влияет на существующие записи локального журнала файлов.
  "workbench.localHistory.enabled": true,

  // Настройте пути или [универсальные шаблоны](https://aka.ms/vscode-glob-patterns) для исключения файлов из локальной истории файлов. Шаблоны подстановки всегда оцениваются относительно пути к папке рабочей области, если только они не являются абсолютными путями. Изменение этого параметра не влияет на существующие записи истории локальных файлов.
  "workbench.localHistory.exclude": {},

  // Определяет максимальное число записей локального журнала файлов на файл. Если число записей локального журнала файлов превышает это число для файла, самые старые записи будут удалены.
  "workbench.localHistory.maxFileEntries": 50,

  // Определяет максимальный размер файла (в КБ), который будет рассматриваться для локального журнала файлов. Файлы большего размера не будут добавляться в локальный журнал файлов. Изменение этого параметра не влияет на существующие записи локального журнала файлов.
  "workbench.localHistory.maxFileSize": 256,

  // Настройте интервал в секундах, в течение которого последняя запись в локальном журнале файлов заменяется добавляемой записью. Это помогает уменьшить общее количество добавленных записей, например, если включено автоматическое сохранение. Этот параметр применяется только к записям с одинаковым источником происхождения. Изменение этого параметра не влияет на существующие записи локального журнала файлов.
  "workbench.localHistory.mergeWindow": 10,

  // Определяет расположение по умолчанию для панели (терминал, консоль отладки, выходные данные, проблемы) в новой рабочей области. Может отображаться в нижней, правой или левой части области редактора.
  "workbench.panel.defaultLocation": "bottom",

  // Определяет, открывается ли панель в развернутом состоянии. Панель может всегда открываться в развернутом состоянии, никогда не открываться в развернутом состоянии или открываться в состоянии, предшествовавшем закрытию.
  //  - always: Всегда развертывать панель при ее открытии.
  //  - never: Никогда не развертывать панель при ее открытии. Панель откроется в неразвернутом состоянии.
  //  - preserve: Открывать панель в том состоянии, в котором она находилась перед закрытием.
  "workbench.panel.opensMaximized": "preserve",

  // Определяет предпочтительную цветовую тему для темного оформления ОС, когда включен параметр`window.autoDetectColorScheme`.
  "workbench.preferredDarkColorTheme": "Default Dark Modern",

  // Определяет предпочтительную цветовую тему, используемую в темном высококонтрастном режиме, когда включен параметр `window.autoDetectHighContrast`.
  "workbench.preferredHighContrastColorTheme": "Default High Contrast",

  // Определяет предпочтительную цветовую тему, используемую в светлом высококонтрастном режиме, когда включен параметр `window.autoDetectHighContrast`.
  "workbench.preferredHighContrastLightColorTheme": "Default High Contrast Light",

  // Определяет предпочтительную цветовую тему для светлого оформления ОС, когда включен параметр `window.autoDetectColorScheme`.
  "workbench.preferredLightColorTheme": "Default Light Modern",

  // Задает используемую тему значков продукта.
  //  - Default: По умолчанию
  "workbench.productIconTheme": "Default",

  // Управляет автоматическим закрытием Quick Open при потере фокуса.
  "workbench.quickOpen.closeOnFocusLost": true,

  // Определяет, следует ли восстановить последние введенные данные в Quick Open при следующем открытии Quick Open.
  "workbench.quickOpen.preserveInput": false,

  // Определяет, должно ли в рабочей среде отрисовываться меньшее число анимаций.
  //  - on: Всегда отрисовывать с ограничением движений.
  //  - off: Не отрисовывать с ограничением движений
  //  - auto: Отрисовывать с ограничением движений на основе конфигурации ОС.
  "workbench.reduceMotion": "auto",

  // Управляет задержкой обратной связи при наведении (в миллисекундах) в области перетаскивания между представлениями или редакторами.
  "workbench.sash.hoverDelay": 300,

  // Управляет размером области отзыва в пикселях для области перетаскивания между представлениями или редакторами. Если вам сложно изменить размеры представлений с помощью мыши, задайте большее значение.
  "workbench.sash.size": 4,

  // Настройте параметры для применения ко всем профилям.
  "workbench.settings.applyToAllProfiles": [],

  // Определяет, какой редактор параметров использовать по умолчанию.
  //  - ui: Использовать редактор параметров пользовательского интерфейса.
  //  - json: Использовать редактор файлов JSON.
  "workbench.settings.editor": "ui",

  // Определяет, следует ли включить режим поиска естественного языка для параметров. Поиск на естественном языке обеспечивается веб-службой Майкрософт.
  "workbench.settings.enableNaturalLanguageSearch": true,

  // Определяет, будет ли открыт редактор со всеми сочетаниями клавиш по умолчанию при открытии параметров сочетаний клавиш.
  "workbench.settings.openDefaultKeybindings": false,

  // Управляет открытием редактора с отображением всех настроек по умолчанию при открытии настроек.
  "workbench.settings.openDefaultSettings": false,

  // Управляет поведением содержания редактора параметров при поиске.
  //  - hide: Скрыть содержание при поиске.
  //  - filter: Отфильтровать содержание, оставив только категории с соответствующими параметрами. При щелчке по категории будут показаны результаты только для этой категории.
  "workbench.settings.settingsSearchTocBehavior": "filter",

  // Определяет, используется ли редактор JSON с разделением при изменении параметров в форме JSON.
  "workbench.settings.useSplitJSON": false,

  // Управляет расположением основной боковой панели и панели действий. Они могут отображаться слева или справа от рабочего места. Дополнительная боковая панель будет отображаться на противоположной стороне рабочего места.
  "workbench.sideBar.location": "left",

  // Управляет тем, какой редактор отображается при запуске, если содержимое редактора не было восстановлено из предыдущего сеанса.
  //  - none: Запустить без редактора.
  //  - welcomePage: Откройте домашнюю страницу с содержимым, которое поможет начать работу с VS Code и расширениями.
  //  - readme: Открыть файл сведений при открытии папки, содержащей этот файл, в противном случае вернуться к “welcomePage”. Примечание. Этот параметр применяется только в качестве глобальной конфигурации. Он будет проигнорирован, если задан в конфигурации рабочей области или папки.
  //  - newUntitledFile: Открыть новый текстовый файл без названия (применяется только при открытии пустого окна).
  //  - welcomePageInEmptyWorkbench: Открывать страницу приветствия при открытии пустой рабочей области.
  "workbench.startupEditor": "welcomePage",

  // Управляет видимостью строки состояния в нижней части рабочего места.
  "workbench.statusBar.visible": true,

  // Если параметр включен, на подложке появляются советы, если нет открытых редакторов.
  "workbench.tips.enabled": true,

  // Управляет тем, как папки дерева разворачиваются при нажатии на имена папок. Обратите внимание, что этот параметр может игнорироваться в некоторых деревьях и списках, если он не применяется к ним.
  "workbench.tree.expandMode": "singleClick",

  // Определяет отступ для дерева в пикселях.
  "workbench.tree.indent": 8,

  // Определяет, нужно ли в дереве отображать направляющие отступа.
  "workbench.tree.renderIndentGuides": "onHover",

  // Если включено, при открытии ссылок в доверенных рабочих областях будут появляться запросы доверенных доменов.
  "workbench.trustedDomains.promptInTrustedWorkspace": false,

  // Управляет видимостью действий в заголовке представления. Действия в заголовке представления могут быть видимы всегда или видимы только тогда, когда представление получает фокус или на него наводится курсор мыши.
  "workbench.view.alwaysShowHeaderActions": false,

  // Не рекомендуется, используйте глобальный параметр `workbench.reduceMotion`.
  // Если параметр включен, уменьшить движение на странице приветствия.
  "workbench.welcomePage.preferReducedMotion": false,

  // Если этот параметр включен, пошаговое руководство по расширению откроется после его установки.
  "workbench.welcomePage.walkthroughs.openOnInstall": true,

  // Если параметр задан, выполняется автоматическое переключение на предпочтительную цветовую тему в зависимости от оформления ОС. Если для ОС используется темное оформление, используется тема, указанная в параметре `workbench.preferredDarkColorTheme#`, а для светлого оформления — в параметре `#workbench.preferredLightColorTheme`.
  "window.autoDetectColorScheme": false,

  // Когда этот параметр включен, будет выполняться автоматический переход на тему с высокой контрастностью, если в ОС используется такая тема. Использование темы с высокой контрастностью определяется параметрами `workbench.preferredHighContrastColorTheme#` и `#workbench.preferredHighContrastLightColorTheme`
  "window.autoDetectHighContrast": true,

  // Определяет, следует ли закрыть окно при закрытии последнего редактора. Этот параметр применяется только к окнам, в которых нет открытых папок.
  "window.closeWhenEmpty": false,

  // Показывать панель запуска вместе с заголовком окна. Этот параметр действует, только если для `window.titleBarStyle` установлено `custom`.
  "window.commandCenter": true,

  // Определяет, следует ли отображать диалоговое окно для подтверждения перед закрытием окна или выходом из приложения.
  //  - always: Всегда запрашивать подтверждение.
  //  - keyboardOnly: Запрашивайте подтверждение только в том случае, если была использована привязка клавиш.
  //  - never: Никогда явно не запрашивайте подтверждения.
  "window.confirmBeforeClose": "never",

  // Определяет, устанавливается ли фокус на строку меню при нажатии клавиш ALT+клавиша. Этот параметр не влияет на переключение строки меню с помощью сочетания Alt+клавиша.
  "window.customMenuBarAltFocus": true,

  // Настройка внешнего вида диалоговых окон.
  "window.dialogStyle": "native",

  // Если этот параметр включен, окно закрывается с помощью двойного щелчка значка приложения в заголовке окна. Окно невозможно будет перетащить с помощью значка. Этот параметр действует, только если #window.titleBarStyle#" имеет значение custom.
  "window.doubleClickIconToClose": false,

  // Определяет, можно ли открыть главные меню с помощью сочетаний клавиш ALT+клавиша. Отключение мнемоник позволяет вместо этого привязать такие сочетания ALT+клавиша к командам редактора.
  "window.enableMenuBarMnemonics": true,

  // Разрешить операционной системе управлять расположением контекстного меню в случаях, когда меню должно появиться под указателем мыши.
  "window.experimental.nativeContextMenuLocation": true,

  // Определяет видимость строки меню. Параметр "переключатель" скрывает строку меню, и для ее отображения нужно один раз нажать клавишу Alt. Установка параметра "компактное" переместит меню в боковую панель.
  //  - classic: Меню отображается в верхней части окна и скрыто только в полноэкранном режиме.
  //  - visible: Меню всегда отображается в верхней части окна, в том числе в полноэкранном режиме.
  //  - toggle: Меню скрыто, но может отображаться в верхней части окна при нажатии клавиши ALT.
  //  - hidden: Меню всегда скрыто.
  //  - compact: Меню отображается как компактная кнопка на боковой панели. Это значение игнорируется, если `window.titleBarStyle` имеет значение `native`.
  "window.menuBarVisibility": "classic",

  // Определяет размеры нового открывающегося окна, если по крайней мере одно окно уже открыто. Обратите внимание, что этот параметр не влияет на первое открываемое окно. Размеры и расположение первого окна всегда будут совпадать с размерами и расположением этого окна перед закрытием.
  //  - default: Открывать новые окна в центре экрана.
  //  - inherit: Открывать новые окна того же размера, что и последнее активное окно.
  //  - offset: Открытие новых окон тех же размеров, что и последнее активное, со смещенным положением.
  //  - maximized: Открывать новые окна в развернутом состоянии.
  //  - fullscreen: Открывать новые окна в полноэкранном режиме.
  "window.newWindowDimensions": "default",

  // Управляет тем, должны ли файлы открываться в новом окне при использовании командной строки или диалогового окна выбора файлов.
  // Обратите внимание, что в некоторых случаях этот параметр игнорируется (например, при использовании параметров командной строки --new-window или --reuse-window).
  //  - on: Файлы будут открыты в новом окне.
  //  - off: Файлы будут открыты в окне с открытой папкой файлов или в последнем активном окне.
  //  - default: Файлы будут открыты в новом окне, если они не были выбраны в приложении (например, из меню "Файл").
  "window.openFilesInNewWindow": "off",

  // Управляет тем, должны ли папки открываться в новом окне или заменять последнее активное окно.
  // Обратите внимание, что в некоторых случаях этот параметр игнорируется (например, при использовании параметров "--new-window" или "--reuse-window").
  //  - on: Папки будут открыты в новом окне.
  //  - off: Папки будут заменять последнее активное окно.
  //  - default: Папки будут открываться в новом окне, если папка не выбрана в приложении (например, в меню "Файл").
  "window.openFoldersInNewWindow": "default",

  // Управляет тем, необходимо ли открыть новое пустое окно при запуске второго экземпляра без аргументов или перевести фокус на последний запущенный экземпляр.
  // Обратите внимание, что в некоторых случаях этот параметр игнорируется (например, при использовании параметров "--new-window" или "--reuse-window").
  //  - on: Открыть новое пустое окно.
  //  - off: Перевести фокус на последний активный запущенный экземпляр.
  "window.openWithoutArgumentsInNewWindow": "on",

  // Определяет, должно ли окно восстанавливаться в полноэкранном режиме, если оно было закрыто в полноэкранном режиме.
  "window.restoreFullscreen": false,

  // Определяет способ повторного открытия окон после первого запуска. Этот параметр не действует, если приложение уже работает.
  //  - preserve: Всегда повторно открывать все окна. При открытии папки или рабочей области (например, из командной строки) она открывается в виде нового окна, если она не была открыта ранее. Если файлы открыты, они будут открываться в одном из восстановленных окон.
  //  - all: Повторное открытие всех окон, если только не открывается папка, рабочая область или файл (например, из командной строки).
  //  - folders: Повторное открытие всех окон, в которых были открыты папки или рабочие области, если только не открывается папка, рабочая область или файл (например, из командной строки).
  //  - one: Повторное открытие последнего активного окна, если только не открывается папка, рабочая область или файл (например, из командной строки).
  //  - none: Повторное открытие окон не происходит. Если только не открывается папка или рабочая область (например, из командной строки), появляется пустое окно.
  "window.restoreWindows": "all",

  // Управляет заголовком окна на основе активного редактора. Переменные заменяются на основе контекста:
  // - "${activeEditorShort}": имя файла (например, myFile.txt).
  // - "${activeEditorMedium}": путь к файлу относительно папки рабочей области (например, myFolder/myFileFolder/myFile.txt).
  // - "${activeEditorLong}": полный путь к файлу (например, /Users/Development/myFolder/myFileFolder/myFile.txt).
  // - "${activeFolderShort}": имя папки, в которой содержится файл (например, myFileFolder).
  // - "${activeFolderMedium}": путь, относительно папки рабочей области, к месту, где содержится файл (например, myFolder/myFileFolder).
  // - "${activeFolderLong}": полный путь к папке, содержащей файл (например, /Users/Development/myFolder/myFileFolder).
  // - "${folderName}": имя папки рабочей области, где находится файл (например, myFolder).
  // - "${folderPath}": путь к папке рабочей области, где содержится файл (например, /Users/Development/myFolder).
  // - "${rootName}": имя рабочей области с необязательным удаленным именем и индикатором рабочей области, если применимо (например, myFolder, myRemoteFolder [SSH] или myWorkspace (рабочая область)).
  // - "${rootNameShort}": сокращенное имя рабочей области без суффиксов (например, myFolder, myRemoteFolder или myWorkspace)
  // - "${rootPath}": путь к открытой рабочей области или папке (например, /Users/Development/myWorkspace).
  // - `${profileName}`: имя профиля, в котором открыта рабочая область, например "Обработка и анализ данных (профиль)". Игнорируется, если используется профиль по умолчанию.
  // - "${appName}": например, VS Code.
  // - "${remoteName}": например, SSH
  // - "${dirty}": указывает, когда в активном редакторе есть несохраненные изменения.
  // - `${focusedView}`: the name of the view that is currently focused.
  // - "${separator}": условный разделитель ("-"), который отображается, только если он окружен переменными со значениями или статическим текстом.
  "window.title": "${dirty}${activeEditorShort}${separator}${rootName}${separator}${profileName}${separator}${appName}",

  // Вы можете настроить внешний вид заголовка окна. В Linux и Windows этот параметр также влияет на внешний вид меню приложения и контекстного меню. Для применения изменений требуется полная перезагрузка.
  "window.titleBarStyle": "custom",

  // Разделитель, используемый `window.title`.
  "window.titleSeparator": " - ",

  // Настройте масштаб окна. Исходный размер равен 0. Увеличение или уменьшение значения на 1 означает увеличение или уменьшение окна на 20 %. Чтобы более точно задать масштаб, можно также ввести десятичное число.
  "window.zoomLevel": 0,

  // Задает размер шрифта (в пикселах) для клавиатуры в режиме записи с экрана.
  "screencastMode.fontSize": 56,

  // Параметры настройки наложения клавиатуры в режиме экранной трансляции.
  "screencastMode.keyboardOptions": {
    "showKeys": true,
    "showKeybindings": true,
    "showCommands": true,
    "showCommandGroups": false,
    "showSingleEditorCursorMoves": true
  },

  // Определяет время (в миллисекундах), в течение которого отображается наложение клавиатуры в режиме записи с экрана.
  "screencastMode.keyboardOverlayTimeout": 800,

  // Задает цвет индикатора мыши в шестнадцатеричном формате (#RGB, #RGBA, #RRGGBB или #RRGGBBAA) в режиме записи с экрана.
  "screencastMode.mouseIndicatorColor": "#FF0000",

  // Задает размер курсора мыши (в пикселях) в режиме записи с экрана.
  "screencastMode.mouseIndicatorSize": 20,

  // Определяет вертикальное смещение перекрытия для режима записи с экрана в нижней части окна в процентах от высоты рабочей области.
  "screencastMode.verticalOffset": 20,

  // Определяет, будет ли выполняться выравнивание по центру при включении режима Zen.
  "zenMode.centerLayout": true,

  // Определяет, будет ли рабочее пространство переключаться в полноэкранный режим при включении режима Zen.
  "zenMode.fullScreen": true,

  // Определяет, будет ли скрыта панель действий в левой или в правой части рабочей области при включении режима Zen.
  "zenMode.hideActivityBar": true,

  // Определяет, скрываются ли номера строк в редакторе при включении режима Zen.
  "zenMode.hideLineNumbers": true,

  // Определяет, будет ли скрыта строка состояния в нижней части рабочей области при включении режима Zen.
  "zenMode.hideStatusBar": true,

  // Определяет, будут ли скрыты вкладки рабочей области при включении режима Zen.
  "zenMode.hideTabs": true,

  // Определяет, необходимо ли восстановить окно в режиме Zen, если оно было закрыто в режиме Zen.
  "zenMode.restore": true,

  // Определяет, будут ли уведомления режима "Не беспокоить" включены в режиме Zen. Если установлено значение "true", будут отображаться только уведомления об ошибках.
  "zenMode.silentNotifications": true,

  // Настройка связей файлов для языков (например, "*.extension": "html"). Они имеют приоритет над связями по умолчанию для установленных языков.
  "files.associations": {},

  // Если этот параметр включен, редактор попытается определить кодирование набора символов при открытии файлов. Этот параметр также можно настроить для каждого языка. Обратите внимание, что этот параметр не учитывается при текстовом поиске. Учитывается только `files.encoding`.
  "files.autoGuessEncoding": false,

  // Управляет [автоматическим сохранением](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save) редакторов с несохраненными изменениями.
  //  - off: Редактор с изменениями никогда не сохраняется автоматически.
  //  - afterDelay: Редактор с изменениями автоматически сохраняется после настройки параметра "#files.autoSaveDelay#".
  //  - onFocusChange: Редактор с изменениями автоматически сохраняется при потере фокуса этим редактором.
  //  - onWindowChange: Редактор с изменениями автоматически сохраняется при потере фокуса окном этого редактора.
  "files.autoSave": "off",

  // Определяет задержку в миллисекундах, после которой редактор с несохраненными изменениями будет сохранен автоматически. Применяется только в случае, когда для параметра "#files.autoSave#" задано значение "afterDelay".
  "files.autoSaveDelay": 1000,

  // Языковой идентификатор по умолчанию, назначаемый новым файлам. Если задано значение "${activeEditorLanguage}", будет использоваться языковой идентификатор текущего активного текстового редактора, если таковой имеется.
  "files.defaultLanguage": "",

  // Путь по умолчанию для диалоговых окон файлов, переопределяющий путь к основной папке пользователя. Используется только при отсутствии пути, определяемого контекстом, например для недавно открывавшегося файла или папки.
  "files.dialog.defaultPath": "",

  // Перемещение файлов/папок в корзину ОС (корзину Windows) при удалении. При отключении этого параметра файлы и папки будут удаляться навсегда.
  "files.enableTrash": true,

  // Кодировка по умолчанию, используемая при чтении и записи файлов. Этот параметр также можно настроить для отдельных языков.
  //  - utf8: UTF-8
  //  - utf8bom: UTF-8 with BOM
  //  - utf16le: UTF-16 LE
  //  - utf16be: UTF-16 BE
  //  - windows1252: Western (Windows 1252)
  //  - iso88591: Western (ISO 8859-1)
  //  - iso88593: Western (ISO 8859-3)
  //  - iso885915: Western (ISO 8859-15)
  //  - macroman: Western (Mac Roman)
  //  - cp437: DOS (CP 437)
  //  - windows1256: Arabic (Windows 1256)
  //  - iso88596: Arabic (ISO 8859-6)
  //  - windows1257: Baltic (Windows 1257)
  //  - iso88594: Baltic (ISO 8859-4)
  //  - iso885914: Celtic (ISO 8859-14)
  //  - windows1250: Central European (Windows 1250)
  //  - iso88592: Central European (ISO 8859-2)
  //  - cp852: Central European (CP 852)
  //  - windows1251: Cyrillic (Windows 1251)
  //  - cp866: Cyrillic (CP 866)
  //  - iso88595: Cyrillic (ISO 8859-5)
  //  - koi8r: Cyrillic (KOI8-R)
  //  - koi8u: Cyrillic (KOI8-U)
  //  - iso885913: Estonian (ISO 8859-13)
  //  - windows1253: Greek (Windows 1253)
  //  - iso88597: Greek (ISO 8859-7)
  //  - windows1255: Hebrew (Windows 1255)
  //  - iso88598: Hebrew (ISO 8859-8)
  //  - iso885910: Nordic (ISO 8859-10)
  //  - iso885916: Romanian (ISO 8859-16)
  //  - windows1254: Turkish (Windows 1254)
  //  - iso88599: Turkish (ISO 8859-9)
  //  - windows1258: Vietnamese (Windows 1258)
  //  - gbk: Simplified Chinese (GBK)
  //  - gb18030: Simplified Chinese (GB18030)
  //  - cp950: Traditional Chinese (Big5)
  //  - big5hkscs: Traditional Chinese (Big5-HKSCS)
  //  - shiftjis: Japanese (Shift JIS)
  //  - eucjp: Japanese (EUC-JP)
  //  - euckr: Korean (EUC-KR)
  //  - windows874: Thai (Windows 874)
  //  - iso885911: Latin/Thai (ISO 8859-11)
  //  - koi8ru: Cyrillic (KOI8-RU)
  //  - koi8t: Tajik (KOI8-T)
  //  - gb2312: Simplified Chinese (GB 2312)
  //  - cp865: Nordic DOS (CP 865)
  //  - cp850: Western European DOS (CP 850)
  "files.encoding": "utf8",

  // Символ конца строки по умолчанию.
  //  - \n: LF
  //  - \r\n: CRLF
  //  - auto: Использует символ конца строки операционной системы.
  "files.eol": "auto",

  // Настройте [шаблоны подстановки](https://aka.ms/vscode-glob-patterns) для исключения файлов и папок. Например, File Explorer решает, какие файлы и папки показывать или скрывать, на основе этого параметра. Обратитесь к настройке `search.exclude#`, чтобы определить исключения для поиска. Обратитесь к настройке `#explorer.excludeGitIgnore` для игнорирования файлов на основе вашего `.gitignore`.
  "files.exclude": {
    "**/.git": true,
    "**/.svn": true,
    "**/.hg": true,
    "**/CVS": true,
    "**/.DS_Store": true,
    "**/Thumbs.db": true
  },

  // Определяет, запоминаются ли несохраненные файлы между сеансами. В этом случае приглашение на их сохранение при выходе из редактора не появляется.
  //  - off: Отключение горячего выхода. При попытке закрыть окно с редакторами, в которых остались несохраненные изменения, будет отображаться запрос.
  //  - onExit: Горячий выход будет активирован при закрытии последнего окна в Windows/Linux или при активации команды "workbench.action.quit" (палитра команд, настраиваемое сочетание клавиш, меню). Все окна без открытых папок будут восстановлены при следующем запуске. Список ранее открытых окон с несохраненными файлами можно получить в меню "Файл" > "Открыть последние" > "Дополнительно…".
  //  - onExitAndWindowClose: Горячий выход будет активирован при закрытии последнего окна в Windows/Linux или при активации команды "workbench.action.quit" (палитра команд, настраиваемое сочетание клавиш, меню), а также для любого окна с открытой папкой, независимо от того, является ли это окно последним. Все окна без открытых папок будут восстановлены при следующем запуске. Список ранее открытых окон с несохраненными файлами можно получить в меню "Файл" > "Открыть последние" > "Дополнительно…".
  "files.hotExit": "onExit",

  // Если этот параметр включен, при сохранении файла в его конец вставляется финальная новая строка.
  "files.insertFinalNewline": false,

  // Время ожидания в миллисекундах, по истечении которого участники файлов для создания, переименования и удаления отменяются. Используйте `0`, чтобы отключить участников.
  "files.participants.timeout": 60000,

  // Настройте пути или [шаблоны подстановок](https://aka.ms/vscode-glob-patterns), чтобы они не помечались как доступные только для чтения, если они совпадают в результате настройки `files.readonlyInclude`. Шаблоны подстановки всегда оцениваются относительно пути к папке рабочей области, если только они не являются абсолютными путями. Файлы от поставщиков файловой системы только для чтения всегда будут доступны только для чтения независимо от этого параметра.
  "files.readonlyExclude": {},

  // Помечает файлы как доступные только для чтения, если это указано в их правах доступа к файлам. Это можно переопределить с помощью настроек `files.readonlyInclude#` и `#files.readonlyExclude`.
  "files.readonlyFromPermissions": false,

  // Настройте пути или [шаблоны подстановки](https://aka.ms/vscode-glob-patterns), чтобы пометить их как доступные только для чтения. Шаблоны подстановки всегда оцениваются относительно пути к папке рабочей области, если только они не являются абсолютными путями. Вы можете исключить совпадающие пути с помощью параметра `files.readonlyExclude`. Файлы от поставщиков файловой системы только для чтения всегда будут доступны только для чтения независимо от этого параметра.
  "files.readonlyInclude": {},

  // Определяет, сохраняются ли файлы, которые были частью рефакторинга, автоматически
  "files.refactoring.autoSave": true,

  // Восстановить стек отмены при повторном открытии файла.
  "files.restoreUndoStack": true,

  // Конфликт сохранения может возникнуть, когда на диск сохраняется файл, который одновременно был изменен другой программой. Чтобы предотвратить потерю данных, пользователю предлагается сравнить изменения в редакторе с версией на диске. Этот параметр следует изменять только в том случае, если вы часто сталкиваетесь с ошибками при конфликтах сохранения, так как неосмотрительное его использование может привести к потере данных.
  //  - askUser: Запретит сохранение и предложит разрешить конфликт сохранения вручную.
  //  - overwriteFileOnDisk: Разрешит конфликт сохранения путем перезаписи файла на диске изменениями в редакторе.
  "files.saveConflictResolution": "askUser",

  // Включает простое диалоговое окно файла для открытия и сохранения файлов и папок. Простое диалоговое окно файла заменяет диалоговое окно системного файла, если включено.
  "files.simpleDialog.enable": false,

  // Если этот параметр установлен, то при сохранении файла будут удалены все новые строки за последней новой строкой в конце файла.
  "files.trimFinalNewlines": false,

  // Если этот параметр включен, при сохранении файла будут удалены концевые пробелы.
  "files.trimTrailingWhitespace": false,

  // Настройте пути или [шаблоны подстановки](https://aka.ms/vscode-glob-patterns), чтобы исключить их из просмотра файлов. Пути могут быть относительными к отслеживаемой папке или абсолютными. Шаблоны подстановки сопоставляются относительно отслеживаемой папки. Когда вы сталкиваетесь с тем, что процесс наблюдения за файлами использует много ресурсов ЦП, обязательно исключите большие папки, которые не представляют интереса (например, выходные папки сборки).
  "files.watcherExclude": {
    "**/.git/objects/**": true,
    "**/.git/subtree-cache/**": true,
    "**/node_modules/*/**": true,
    "**/.hg/store/**": true
  },

  // Настройте дополнительные пути для отслеживания изменений в рабочей области. По умолчанию все папки рабочей области будут отслеживаться в обратном порядке, за исключением папок, которые являются символьными ссылками. Для поддержки наблюдения за такими папками вы можете явно добавить абсолютные или относительные пути. Относительные пути будут разрешены в абсолютный путь с помощью текущей открытой рабочей области.
  "files.watcherInclude": [],

  // Определяет, будет ли проводник автоматически отображать и выбирать файлы при их открытии.
  //  - true: Файлы будут отображаться и будут выбраны.
  //  - false: Файлы не будут отображаться и не будут выбраны.
  //  - focusNoScroll: Файлы не будут прокручиваться в представлении, но на них будет оставаться фокус.
  "explorer.autoReveal": true,

  // Настройте пути или [шаблоны подстановок](https://aka.ms/vscode-glob-patterns), чтобы файлы и папки не отображались и не выбирались в Проводнике при их открытии. Шаблоны подстановки всегда оцениваются относительно пути к папке рабочей области, если только они не являются абсолютными путями.
  "explorer.autoRevealExclude": {
    "**/node_modules": true,
    "**/bower_components": true
  },

  // Определяет, должны ли папки в проводнике отображаться в компактном формате. В таком представлении отдельные дочерние папки будут объединены в один элемент дерева. Это удобно, например, для отображения структуры пакета Java.
  "explorer.compactFolders": true,

  // Определяет, должно ли запрашиваться подтверждение при перемещении файла в корзину.
  "explorer.confirmDelete": true,

  // Определяет, должно ли запрашиваться подтверждение при перемещении файлов и папок в проводнике методом перетаскивания.
  "explorer.confirmDragAndDrop": true,

  // Определяет, должен ли обозреватель запрашивать подтверждение при отмене.
  //  - verbose: Проводник будет отображать запрос перед всеми операциями отмены.
  //  - default: Проводник будет отображать запрос перед операциями отмены, приводящими к удалению данных.
  //  - light: Проводник будет отображать запрос перед операциями отмены при получении фокуса.
  "explorer.confirmUndo": "default",

  // Символ разделения путей, используемый при копировании относительных путей к файлам.
  //  - /: Использовать косую черту в качестве символа разделения путей.
  //  - \: Использовать обратную косую черту в качестве символа разделения путей.
  //  - auto: Использует специальный символ разделения путей для операционной системы.
  "explorer.copyRelativePathSeparator": "auto",

  // Определяет, следует ли использовать эмблемы в декораторах файла.
  "explorer.decorations.badges": true,

  // Определяет, следует ли использовать цвета в декораторах файла.
  "explorer.decorations.colors": true,

  // Определяет, разрешает ли проводник перемещать файлы и папки с помощью перетаскивания. Этот параметр распространяется только на перетаскивание в проводнике.
  "explorer.enableDragAndDrop": true,

  // Определяет, должен ли обозреватель поддерживать отмену операций с файлами и папками.
  "explorer.enableUndo": true,

  // Определяет, следует ли анализировать записи в .gitignore и исключать их из обозревателя. Аналогично `files.exclude`.
  "explorer.excludeGitIgnore": false,

  // Определяет, должен ли обозреватель расширять многокорневые рабочие области, содержащие только одну папку, во время инициализации
  "explorer.expandSingleFolderWorkspaces": true,

  // Определяет, включено ли вложение файлов в обозревателе. Вложение файлов позволяет визуально группировать связанные файлы в каталоге в один родительский файл.
  "explorer.fileNesting.enabled": false,

  // Управляет автоматическим расширением вложенных файлов. Чтобы это вступило в силу, необходимо установить `explorer.fileNesting.enabled`.
  "explorer.fileNesting.expand": true,

  // Управляет вложением файлов в обозревателе. Чтобы это вступило в силу, требуется настройка `explorer.fileNesting.enabled`. Каждый __элемент__ представляет собой родительский шаблон и может содержать один символ "*", который соответствует любой строке. Каждое __значение__ представляет собой список разделенных запятыми дочерних шаблонов, которые должны отображаться вложенными под данным родительским шаблоном. Дочерние шаблоны могут содержать несколько специальных маркеров:
  // – "${capture}": соответствует сопоставленному значению "*" из родительского шаблона
  // – "${basename}": соответствует базовому имени родительского файла, например "file" в "file.ts"
  // – "${extname}": соответствует расширению родительского файла, например "ts" в "file.ts"
  // – "${dirname}": соответствует имени каталога родительского файла, например "src" в "src/file.ts"
  // – "*": соответствует любой строке, может использоваться один раз для каждого дочернего шаблона
  "explorer.fileNesting.patterns": {
    "*.ts": "${capture}.js",
    "*.js": "${capture}.js.map, ${capture}.min.js, ${capture}.d.ts",
    "*.jsx": "${capture}.js",
    "*.tsx": "${capture}.ts",
    "tsconfig.json": "tsconfig.*.json",
    "package.json": "package-lock.json, yarn.lock, pnpm-lock.yaml"
  },

  // Определяет стратегию именования при вставке повторяющихся элементов в обозревателе.
  //  - simple: Добавляет в конце повторяющегося имени слово "copy", за которым может следовать число.
  //  - smart: Добавляет номер в конце повторяющегося имени. Если имя уже включает какое-то число, предпринимается попытка его увеличить.
  //  - disabled: Отключает именование с приращением. Если имеются два файла с одинаковым именем, будет предложено перезаписать существующий файл.
  "explorer.incrementalNaming": "simple",

  // Минимальное количество слотов редактора, предварительно выделенное на панели "Открытые редакторы". Если установлено значение 0, размер панели будет динамически изменяться в зависимости от количества редакторов.
  "explorer.openEditors.minVisible": 0,

  // Управляет порядком сортировки редакторов в области "Открытые редакторы".
  //  - editorOrder: Редакторы располагаются в том же порядке, что и вкладки редактора.
  //  - alphabetical: Редакторы упорядочены в алфавитном порядке по имени вкладки в каждой группе редакторов.
  //  - fullPath: Редакторы упорядочены в алфавитном порядке по полному пути в каждой группе редакторов.
  "explorer.openEditors.sortOrder": "editorOrder",

  // Начальное максимальное количество редакторов, отображаемое на панели "Открытые редакторы". Превышение этого ограничения приведет к появлению полосы прокрутки и позволит изменить размер области, чтобы отобразить больше элементов.
  "explorer.openEditors.visible": 9,

  // Управляет сортировкой файлов и папок в проводнике на основе свойств. Если параметр #explorer.fileNesting.enabled# включен, также управляет сортировкой вложенных файлов.
  //  - default: Файлы и папки сортируются по именам. Папки отображаются перед файлами.
  //  - mixed: Файлы и папки сортируются по именам. Файлы чередуются с папками.
  //  - filesFirst: Файлы и папки сортируются по именам. Файлы отображаются перед папками.
  //  - type: Файлы и папки группируются по типу расширения, а затем сортируются по их именам. Папки отображаются перед файлами.
  //  - modified: Файлы и папки сортируются по дате последнего изменения в порядке убывания. Папки отображаются перед файлами.
  //  - foldersNestsFiles: Файлы и папки сортируются по именам. Папки отображаются перед файлами. Файлы со вложенными дочерними элементами отображаются перед другими файлами.
  "explorer.sortOrder": "default",

  // Управляет лексикографической сортировкой имен файлов и папок в обозревателе.
  //  - default: Имена в верхнем и нижнем регистрах не разделяются.
  //  - upper: Имена в верхнем регистре группируются вместе перед именами в нижнем регистре.
  //  - lower: Имена в нижнем регистре группируются вместе перед именами в верхнем регистре.
  //  - unicode: Имена сортируются в порядке Юникода.
  "explorer.sortOrderLexicographicOptions": "default",

  // Управляет положением панели действий в строках в области поиска.
  //  - auto: Разместить панель действий справа, когда область поиска узкая, и сразу же после содержимого, когда область поиска широкая.
  //  - right: Всегда размещать панель действий справа.
  "search.actionsPosition": "right",

  // Определяет, должны ли сворачиваться и разворачиваться результаты поиска.
  //  - auto: Развернуты файлы менее чем с 10 результатами. Остальные свернуты.
  //  - alwaysCollapse
  //  - alwaysExpand
  "search.collapseResults": "alwaysExpand",

  // Определяет, следует ли использовать эмблемы в декорациях файла.
  "search.decorations.badges": true,

  // Определяет, следует ли использовать цвета в декорациях файла.
  "search.decorations.colors": true,

  // Управляет режимом просмотра результатов поиска по умолчанию.
  //  - tree: Показывает результаты поиска в виде дерева.
  //  - list: Показывает результаты поиска в виде списка.
  "search.defaultViewMode": "list",

  // Настройка [стандартных масок](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options) для исключения файлов и папок при полнотекстовом поиске и быстром открытии. Наследует все стандартные маски от параметра "#files.exclude#".
  "search.exclude": {
    "**/node_modules": true,
    "**/bower_components": true,
    "**/*.code-search": true
  },

  // Показать результаты расширенного содержимого редактора записных книжек для закрытых записных книжек. Обновите результаты поиска после изменения этого параметра.
  "search.experimental.closedNotebookRichContentResults": false,

  // Controls whether the last typed input to Quick Search should be restored when opening it the next time.
  "search.experimental.quickAccess.preserveInput": false,

  // Определяет, нужно ли следовать символическим ссылкам при поиске.
  "search.followSymlinks": true,

  // Этот параметр не рекомендуется к использованию. Вместо его применения вы можете перетащить значок поиска в новое расположение.
  // Управляет тем, будет ли панель поиска отображаться в виде представления в боковой колонке или в виде панели в области панели, чтобы освободить пространство по горизонтали.
  "search.location": "sidebar",

  // Кэш поиска хранится на узле расширения, который никогда не отключается, поэтому этот параметр уже не нужен.
  // Когда параметр включен, процесс searchService будет поддерживаться в активном состоянии вместо завершения работы после часа бездействия. При этом кэш поиска файлов будет сохранен в памяти.
  "search.maintainFileSearchCache": false,

  // Управляет максимальным числом результатов поиска. Чтобы число возвращаемых результатов не было ограничено, укажите значение "null" (пустое).
  "search.maxResults": 20000,

  // Определяет, где выполняются новые операции "Найти в файлах" и "Найти в папке": в представлении поиска или в редакторе поиска.
  //  - view: Поиск в представлении поиска либо на панели, либо на боковых панелях.
  //  - reuseEditor: Поиск в существующем редакторе поиска, если он имеется, или в новом редакторе поиска.
  //  - newEditor: Поиск в новом редакторе поиска.
  "search.mode": "view",

  // Управляет порядком сортировки журнала редактора для быстрого открытия при фильтрации.
  //  - default: Записи журнала сортируются по релевантности на основе используемого значения фильтра. Более релевантные записи отображаются первыми.
  //  - recency: Записи журнала сортируются по времени открытия. Недавно открытые записи отображаются первыми.
  "search.quickOpen.history.filterSortOrder": "default",

  // Определяет, следует ли включать результаты из недавно открытых файлов в файл результата для Quick Open.
  "search.quickOpen.includeHistory": true,

  // Определяет, следует ли включать результаты поиска глобальных символов в результаты для файлов Quick Open.
  "search.quickOpen.includeSymbols": false,

  // Число окружающих строк контекста по умолчанию при создании редакторов поиска. Если используется "#search.searchEditor.reusePriorSearchConfiguration#, для этого параметра можно задать значение "null" (пустой), чтобы использовать конфигурацию предыдущего редактора поиска.
  "search.searchEditor.defaultNumberOfContextLines": 1,

  // Настройка эффекта двойного щелчка результата в редакторе поиска.
  //  - selectWord: Двойной щелчок выбирает слово под курсором.
  //  - goToLocation: Двойной щелчок открывает результат в активной группе редакторов.
  //  - openLocationToSide: Двойной щелчок открывает результат в группе редактора сбоку, создавая его, если он еще не существует.
  "search.searchEditor.doubleClickBehaviour": "goToLocation",

  // Если этот параметр установлен, в новых редакторах поиска будут повторно использоваться параметры include, exclude и flag предыдущего открытого редактора поиска.
  "search.searchEditor.reusePriorSearchConfiguration": false,

  // Поиск во всех файлах при вводе текста.
  "search.searchOnType": true,

  // Когда `search.searchOnType#` включен, управляет задержкой в ​​миллисекундах между вводом символа и началом поиска. Не действует, когда `#search.searchOnType` отключен.
  "search.searchOnTypeDebouncePeriod": 300,

  // Изменить поисковый запрос на выбранный текст редактора при фокусировке на представлении поиска. Это происходит при щелчке мыши или при активации команды "workbench.views.search.focus".
  "search.seedOnFocus": false,

  // Включение заполнения поискового запроса из ближайшего к курсору слова, когда активный редактор не имеет выделения.
  "search.seedWithNearestWord": false,

  // Определяет, следует ли отображать номера строк для результатов поиска.
  "search.showLineNumbers": false,

  // Поиск без учета регистра, если шаблон состоит только из букв нижнего регистра; в противном случае поиск с учетом регистра.
  "search.smartCase": false,

  // Определяет порядок сортировки для результатов поиска.
  //  - default: Результаты сортируются по имена папок и файлов в алфавитном порядке.
  //  - fileNames: Результаты сортируются по именам файлов, игнорируя порядок папок, в алфавитном порядке.
  //  - type: Результаты сортируются по расширениям файлов в алфавитном порядке.
  //  - modified: Результаты сортируются по дате последнего изменения файла в порядке убывания.
  //  - countDescending: Результаты сортируются по количеству на файл в порядке убывания.
  //  - countAscending: Результаты сортируются по количеству на файл в порядке возрастания.
  "search.sortOrder": "default",

  // Определяет, использовать ли ваш глобальный файл gitignore (например, из `$HOME/.config/git/ignore`) при поиске файлов. Требуется включить `search.useIgnoreFiles`.
  "search.useGlobalIgnoreFiles": false,

  // Определяет, следует ли использовать GITIGNORE- и IGNORE-файлы по умолчанию при поиске файлов.
  "search.useIgnoreFiles": true,

  // Управляет использованием файлов ".gitignore" и ".ignore" в родительских папках при поиске файлов. Необходимо включить "#search.useIgnoreFiles#".
  "search.useParentIgnoreFiles": false,

  // Устарело. При использовании функций регулярных выражений, которые поддерживаются только PCRE2, будет автоматически использоваться PCRE2.
  // Следует ли использовать модуль обработки регулярных выражений PCRE2 при поиске текста. При использовании этого модуля будут доступны некоторые расширенные возможности регулярных выражений, такие как поиск в прямом направлении и обратные ссылки. Однако поддерживаются не все возможности PCRE2, а только те, которые также поддерживаются JavaScript.
  "search.usePCRE2": false,

  // Управляет тем, следует ли открывать окно предварительного просмотра замены при выборе или при замене соответствия.
  "search.useReplacePreview": true,

  // Этот параметр является устаревшим. Используйте "search.usePCRE2" для расширенной поддержки регулярных выражений.
  // Этот параметр является устаревшим. Сейчас вместо него используется "search.usePCRE2".
  "search.useRipgrep": true,

  // Определяет, следует ли обрабатывать модификатор AltGraph+ как CTRL+ALT+.
  "keyboard.mapAltGrToCtrlAlt": false,

  // Этот параметр устарел. Используйте параметр "update.mode".
  // Укажите, нужно ли вам получать автоматические обновления. После изменения требуется перезагрузка. Для получения обновлений используется веб-служба Майкрософт.
  "update.channel": "default",

  // Включите, чтобы скачивать и устанавливать новые версии VS Code в Windows в фоновом режиме.
  "update.enableWindowsBackgroundUpdates": true,

  // Укажите, нужно ли вам получать автоматические обновления. После изменения требуется перезагрузка. Для получения обновлений используется веб-служба Майкрософт.
  //  - none: Отключите обновления.
  //  - manual: Отключение автоматических фоновых проверок на наличие обновлений. Обновления будут доступны, если вы вручную проверите их наличие.
  //  - start: Проверять наличие обновлений только при запуске. Отключить автоматическую проверку обновлений в фоновом режиме.
  //  - default: Включение автоматических проверок обновлений. Code будет периодически проверять наличие обновлений в автоматическом режиме.
  "update.mode": "default",

  // Показать примечания к выпуску после обновления. Примечания к выпуску передаются веб-службой Майкрософт.
  "update.showReleaseNotes": true,

  // Параметр используемого прокси-сервера. Если не установлен, он будет унаследовать от переменных среды "http_proxy" и "https_proxy".
  "http.proxy": "",

  // Значение, которое будет отправляться в качестве заголовка "Proxy-Authorization" для каждого сетевого запроса.
  "http.proxyAuthorization": null,

  // Переопределяет имя основной службы для проверки подлинности Kerberos с помощью HTTP-прокси. Если значение не задано, используется значение по умолчанию на основе имени узла прокси-сервера.
  "http.proxyKerberosServicePrincipal": "",

  // Управляет тем, должен ли сертификат прокси-сервера проверяться по списку предоставленных ЦС.
  "http.proxyStrictSSL": true,

  // Используйте поддержку прокси-сервера для расширений.
  //  - off: Отключить поддержку прокси-сервера для расширений.
  //  - on: Включить поддержку прокси-сервера для расширений.
  //  - fallback: Включить поддержку прокси-сервера для расширений, вернуться к вариантам запроса, если прокси-сервер не найден.
  //  - override: Включает поддержку прокси для расширений, переопределяет параметры запроса.
  "http.proxySupport": "override",

  // Определяет, нужно ли загружать сертификаты ЦС из ОС. (В Windows и macOS после отключения этой функции требуется перезагрузить окно.)
  "http.systemCertificates": true,

  // Определяет, прокручивается или развертывается мини-приложение комментариев.
  "comments.maxHeight": true,

  // Этот параметр является нерекомендуемым. Рекомендуется использовать comments.openView.
  // Определяет, когда должна открываться панель комментариев.
  "comments.openPanel": "openOnSessionStartWithComments",

  // Определяет, когда должно открываться представление комментариев.
  //  - never: Представление комментариев никогда не будет открываться.
  //  - file: Представление комментариев будет открываться, когда файл с комментариями активен.
  //  - firstFile: Если представление комментариев еще не было открыто в этом сеансе, оно откроется в первый раз во время сеанса, когда файл с комментариями активен.
  "comments.openView": "firstFile",

  // Определяет, будет ли в метках времени комментария использоваться относительное время (например, "1 день назад").
  "comments.useRelativeTime": true,

  // Управляет видимостью строки комментариев и потоков комментариев в редакторах с диапазонами комментариев и комментариями. Комментарии по-прежнему доступны в представлении "Комментарии", поэтому комментирование будет включаться так же, как при выполнении команды "Комментарии: переключить комментарии редактора".
  "comments.visible": true,

  // Разрешить установку точек останова в любом файле.
  "debug.allowBreakpointsEverywhere": false,

  // Автоматическое отображение значений переменных, которые были устранены отладчиком в отложенном режиме, например методов получения.
  "debug.autoExpandLazyVariables": false,

  // Определяет, следует ли подтверждать закрытие окна, если есть активные сеансы отладки.
  //  - never: Никогда не подтверждать.
  //  - always: Всегда проверять наличие сеансов отладки.
  "debug.confirmOnExit": "never",

  // Определяет, следует ли принимать предложения при нажатии ВВОД в консоли отладки. ВВОД также используется для оценки того, что набирается в консоли отладки.
  "debug.console.acceptSuggestionOnEnter": "off",

  // Определяет, должна ли консоль отладки автоматически закрываться после окончания сеанса отладки.
  "debug.console.closeOnEnd": false,

  // Определяет, необходимо ли сворачивать одинаковые строки и отображать число вхождений с помощью значка в консоли отладки.
  "debug.console.collapseIdenticalLines": true,

  // Определяет семейство шрифтов в консоли отладки.
  "debug.console.fontFamily": "default",

  // Определяет размер шрифта в пикселях в консоли отладки.
  "debug.console.fontSize": 14,

  // Определяет, должна ли консоль отладки предлагать введенные ранее данные.
  "debug.console.historySuggestions": true,

  // Определяет высоту строки в пикселях в консоли отладки. Используйте значение 0 для определения высоты строки по размеру шрифта.
  "debug.console.lineHeight": 0,

  // Определяет, используется ли перенос строк в консоли отладки.
  "debug.console.wordWrap": true,

  // Показать исходный код в представлении "Дизассемблирование".
  "debug.disassemblyView.showSourceCode": true,

  // Выделять цветом строку состояния, когда отладчик активен
  "debug.enableStatusBarColor": true,

  // Определяет, следует ли перевести фокус на окно рабочей области при срабатывании точки останова в отладчике.
  "debug.focusEditorOnBreak": true,

  // Определяет, следует ли перевести фокус на окно рабочей области при срабатывании точки останова в отладчике.
  "debug.focusWindowOnBreak": true,

  // Показывать значения переменных в редакторе во время отладки.
  //  - on: Всегда показывать значения переменных в редакторе во время отладки.
  //  - off: Никогда не показывать значения переменных в редакторе во время отладки.
  //  - auto: Показывать значения переменных в редакторе во время отладки, когда язык поддерживает расположения встроенных значений.
  "debug.inlineValues": "auto",

  // Определяет, когда должна открываться внутренняя консоль отладки.
  "debug.internalConsoleOptions": "openOnFirstSessionStart",

  // Указывает действия, выполняемые при обнаружении ошибок после запуска preLaunchTask.
  //  - debugAnyway: Пропустите ошибки задач и начните отладку.
  //  - showErrors: Отображение представления проблем без запуска отладки.
  //  - prompt: Вывод запроса пользователю.
  //  - abort: Отменить отладку.
  "debug.onTaskErrors": "prompt",

  // Определяет, когда должно быть открыто представление отладки.
  "debug.openDebug": "openOnDebugBreak",

  // Автоматическое открытие представления проводника в конце сеанса отладки.
  "debug.openExplorerOnEnd": false,

  // Управляет тем, какие редакторы необходимо сохранить перед началом сеанса отладки.
  //  - allEditorsInActiveGroup: Сохранить все редакторы в активной группе перед началом сеанса отладки.
  //  - nonUntitledEditorsInActiveGroup: Сохранить все редакторы в активной группе за исключением безымянных перед началом сеанса отладки.
  //  - none: Не сохранять никакие редакторы перед началом сеанса отладки.
  "debug.saveBeforeStart": "allEditorsInActiveGroup",

  // Определяет, нужно ли отображать точки останова на обзорной линейке.
  "debug.showBreakpointsInOverviewRuler": false,

  // Определяет, должны ли декораторы кандидатов на внутренние точки останова отображаться в редакторе во время отладки.
  "debug.showInlineBreakpointCandidates": true,

  // Определяет, должна ли отображаться строка состояния отладки.
  //  - never: Никогда не отображать отладку в строке состояния
  //  - always: Всегда отображать отладку в строке состояния
  //  - onFirstSessionStart: Отображать отладку в строке состояния только после первого запуска отладки
  "debug.showInStatusBar": "onFirstSessionStart",

  // Определяет, отображаются ли подчиненные сеансы отладки на панели инструментов отладки. Если этот параметр имеет значение false, команда остановки для подчиненного сеанса также остановит родительский сеанс.
  "debug.showSubSessionsInToolBar": false,

  // Очистить терминал перед запуском нового сеанса отладки в интегрированном или внешнем терминале.
  "debug.terminal.clearBeforeReusing": false,

  // Определяет положение панели отладки: "перемещаемая" во всех представлениях, "закрепленная" в представлении отладки или "скрытая".
  "debug.toolBarLocation": "floating",

  // Глобальная конфигурация запуска отладки. Ее следует использовать в качестве альтернативы "launch.json", при этом она используется совместно несколькими рабочими областями.
  "launch": {
    "configurations": [],
    "compounds": []
  },

  // Включить или отключить автоматическое закрытие тегов HTML.
  "html.autoClosingTags": true,

  // Включение или отключение автоматического создания кавычек для назначения атрибутов HTML. Тип кавычек можно настроить с помощью `html.completion.attributeDefaultValue`.
  "html.autoCreateQuotes": true,

  // Управляет значением атрибутов по умолчанию, когда выполнение принято.
  //  - doublequotes: Для атрибута задано значение "".
  //  - singlequotes: Для атрибута задано значение ".
  //  - empty: Значение атрибута не задано.
  "html.completion.attributeDefaultValue": "doublequotes",

  // Список относительных путей к файлам, указывающих на JSON-файлы, которые соответствуют [пользовательскому формату данных](https://github.com/microsoft/vscode-html-languageservice/blob/master/docs/customData.md).
  //
  // VS Code загружает пользовательские данные при запуске, чтобы улучшить поддержку HTML для пользовательских HTML-тегов, атрибутов и значений атрибутов, указанных в JSON-файлах.
  //
  // Пути к файлам указаны по отношению к рабочей области, и учитываются только параметры папки рабочей области.
  "html.customData": [],

  // Разделенный запятыми список тегов, в которых формат содержимого не должен изменяться. Значение "null" задается по умолчанию для тега "pre".
  "html.format.contentUnformatted": "pre,code,textarea",

  // Включить/отключить средство форматирования HTML по умолчанию.
  "html.format.enable": true,

  // Список тегов с разделителями-запятыми и дополнительными новыми строками между ними. При указании значения "null" по умолчанию используется "head, body, /html".
  "html.format.extraLiners": "head, body, /html",

  // Формат и отступ "{{#foo}}" и "{{/foo}}".
  "html.format.indentHandlebars": false,

  // Отступ для разделов <head> и <body>.
  "html.format.indentInnerHtml": false,

  // Максимальное число разрывов строк для сохранения в блоке. Чтобы указать неограниченное число строк, используйте "null".
  "html.format.maxPreserveNewLines": null,

  // Определяет, следует ли сохранять разрывы строк перед элементами. Работает только перед элементами, а не внутри тегов или для текста.
  "html.format.preserveNewLines": true,

  // Соблюдение тегов языка для создания шаблонов Django, erb, Handlebars и PHP.
  "html.format.templating": false,

  // Список тегов, которые не следует повторно форматировать, с разделителями-запятыми. Значение "NULL" по умолчанию означает все теги, перечисленные на странице https://www.w3.org/TR/html5/dom.html#phrasing-content.
  "html.format.unformatted": "wbr",

  // Сохранение текстового содержимого между этой строкой.
  "html.format.unformattedContentDelimiter": "",

  // Перенос атрибутов.
  //  - auto: Перенос атрибутов только при превышении длины строки.
  //  - force: Перенос всех атрибутов, кроме первого.
  //  - force-aligned: Перенос всех атрибутов, кроме первого, и сохранение выравнивания.
  //  - force-expand-multiline: Перенос всех атрибутов.
  //  - aligned-multiple: Переносить строку при превышении длины строки, выравнивать атрибуты по вертикали.
  //  - preserve: Сохранить перенос атрибутов.
  //  - preserve-aligned: Сохранение переноса атрибутов, но с выравниванием.
  "html.format.wrapAttributes": "auto",

  // Отступ для атрибутов с переносом после N символов. Укажите значение "null", чтобы использовать размер отступа по умолчанию. Игнорируется, если для параметра "#html.format.wrapAttributes#" задано значение "aligned".
  "html.format.wrapAttributesIndentSize": null,

  // Максимальное число символов на строку (0 — отключить).
  "html.format.wrapLineLength": 120,

  // Отображать документацию тега и атрибута при наведении.
  "html.hover.documentation": true,

  // Отображать ссылки на MDN при наведении.
  "html.hover.references": true,

  // Не рекомендуется; используйте вместо этого параметр "editor.linkedEditing"
  // Включить/отключить зеркальный курсор на соответствующем HTML-теге.
  "html.mirrorCursorOnMatchingTag": false,

  // Определяет, будет ли встроенная поддержка языка HTML предлагать теги, свойства и значения HTML5.
  "html.suggest.html5": true,

  // Отслеживает обмен данными между VS Code и языковым сервером HTML.
  "html.trace.server": "off",

  // Определяет, будет ли встроенная поддержка языка HTML проверять внедренные сценарии.
  "html.validate.scripts": true,

  // Определяет, будет ли встроенная поддержка языка HTML проверять внедренные стили.
  "html.validate.styles": true,

  // Параметр "json.colorDecorators.enable" устарел. Теперь вместо него используется параметр "editor.colorDecorators".
  // Включает или отключает декораторы цвета
  "json.colorDecorators.enable": true,

  // Включить/отключить модуль форматирования JSON по умолчанию
  "json.format.enable": true,

  // Сохранять все существующие новые строки при форматирования.
  "json.format.keepLines": false,

  // Максимальное количество вычисленных символов структуры документа и сворачиваемых областей (ограничено по соображениям производительности).
  "json.maxItemsComputed": 5000,

  // Если этот параметр установлен, разрешено получение схем JSON из расположений HTTP и HTTPS.
  "json.schemaDownload.enable": true,

  // Связь схем с JSON-файлами в текущем проекте.
  "json.schemas": [],

  // Enable/disable default sorting on save
  "json.sortOnSave.enable": false,

  // Отслеживает связь между VS Code и языковым сервером JSON.
  "json.trace.server": "off",

  // Включение или отключение проверки JSON.
  "json.validate.enable": true,

  // Определяет, где следует создавать файлы, скопированные путем перетаскивания или вставки. Это карта из масок, соответствующих местам назначения в документе Markdown.
  //
  // В местах назначения могут использоваться следующие переменные:
  //
  // – "${documentFileName}" — полное имя файла документа Markdown, например "readme.md".
  // – "${documentBaseName}" — базовое имя документа Markdown, например "readme".
  // – "${documentExtName}" — расширение документа Markdown, например "md".
  // – "${documentDirName}" — имя родительского каталога документа Markdown.
  // – "${documentWorkspaceFolder}" — папка рабочей области для документа Markdown, например "/Users/me/myProject". Эта переменная аналогична "${documentDirName}", если файл не является частью рабочей области.
  // – "${fileName}" — имя отброшенного файла, например "image.png".
  "markdown.copyFiles.destination": {},

  // Определяет, должны ли файлы, созданные путем перетаскивания или вставки, перезаписывать существующие файлы.
  //  - nameIncrementally: Если файл с таким именем уже существует, добавить номер к имени файла, например "image.png" становится "image-1.png".
  //  - overwrite: Если файл с таким именем уже существует, перезаписать его.
  "markdown.copyFiles.overwriteBehavior": "nameIncrementally",

  // Определяет, следует ли копировать в рабочую область файлы из-за пределов рабочей области, которые добавлены в редактор Markdown путем перетаскивания.
  //
  // Используйте "#markdown.copyFiles.destination#", чтобы настроить место создания файлов, скопированных путем перетаскивания.
  //  - mediaFiles: Попробовать скопировать внешние изображения и видеофайлы в рабочую область.
  //  - never: Не копировать внешние файлы в рабочую область.
  "markdown.editor.drop.copyIntoWorkspace": "mediaFiles",

  // Включить перетаскивание файлов в редактор Markdown, удерживая нажатой клавишу SHIFT. Требуется включить "#editor.dropIntoEditor.enabled#".
  "markdown.editor.drop.enabled": true,

  // Определяет, следует ли копировать в рабочую область файлы из-за пределов рабочей области, вставленные в редактор Markdown.
  //
  // Используйте "#markdown.copyFiles.destination#", чтобы настроить место создания скопированных файлов.
  //  - mediaFiles: Попробовать скопировать внешние изображения и видеофайлы в рабочую область.
  //  - never: Не копировать внешние файлы в рабочую область.
  "markdown.editor.filePaste.copyIntoWorkspace": "mediaFiles",

  // Включение вставки файлов в редактор Markdown для создания ссылок Markdown. Требуется включить "#editor.pasteAs.enabled#".
  "markdown.editor.filePaste.enabled": true,

  // Управляет созданием ссылки Markdown при вставке URL-адреса в редактор Markdown. Требуется включить `editor.pasteAs.enabled`.
  //  - always: Всегда создает ссылку Markdown при вставке URL-адреса в редактор Markdown.
  //  - smart: Гибко избегает создания ссылки Markdown в определенных случаях, например, в квадратных скобках кода или в существующей ссылке Markdown.
  //  - never: Никогда не создает ссылку Markdown при вставке URL-адреса в редактор Markdown.
  "markdown.editor.pasteUrlAsFormattedLink.enabled": "never",

  // Определяет, где следует открывать ссылки в файлах Markdown.
  //  - currentGroup: Откройте ссылки в группе активного редактора.
  //  - beside: Открытые ссылки рядом с активным редактором.
  "markdown.links.openLocation": "currentGroup",

  // Включить выделение вхождений ссылки в текущем документе.
  "markdown.occurrencesHighlight.enabled": false,

  // Определяет, добавляются ли расширения файлов (например, ".md") для ссылок на файлы Markdown. Этот параметр используется, когда пути к файлам добавляются с помощью таких инструментов, как завершение пути или переименование файлов.
  //  - auto: Для существующих путей попробуйте сохранить стиль расширения файла. Для новых путей добавьте расширения файлов.
  //  - includeExtension: Предпочитать включение расширения файла. Например, в завершении пути к файлу с именем "file.md" будет вставлено file.md.
  //  - removeExtension: Предпочитать удаление расширения файла. Например, в завершении пути к файлу с именем "file.md" будет вставлено "file" без ".md".
  "markdown.preferredMdPathExtensionStyle": "auto",

  // Задает способ отрисовки разрывов строк для предварительного просмотра Markdown. Если задано значение true, для каждой новой строки внутри абзацев создается <br>.
  "markdown.preview.breaks": false,

  // Дважды щелкните в области предварительного просмотра Markdown, чтобы переключиться в редактор.
  "markdown.preview.doubleClickToSwitchToEditor": true,

  // Определяет семейство шрифтов, используемое в области предварительного просмотра Markdown.
  "markdown.preview.fontFamily": "-apple-system, BlinkMacSystemFont, 'Segoe WPC', 'Segoe UI', system-ui, 'Ubuntu', 'Droid Sans', sans-serif",

  // Определяет размер шрифта (в пикселях), используемый в области предварительного просмотра Markdown.
  "markdown.preview.fontSize": 14,

  // Определяет высоту строки, используемую в области предварительного просмотра Markdown. Это значение задается относительно размера шрифта.
  "markdown.preview.lineHeight": 1.6,

  // Преобразование текста в URL для предварительного просмотра Markdown.
  "markdown.preview.linkify": true,

  // Выделение выбранного в текущем редакторе в предварительном просмотре Markdown.
  "markdown.preview.markEditorSelection": true,

  // Указывает, как следует открывать ссылки на другие файлы Markdown при предварительном просмотре Markdown.
  //  - inPreview: Пробовать открывать ссылки в окне предварительного просмотра Markdown.
  //  - inEditor: Пробовать открывать ссылки в редакторе.
  "markdown.preview.openMarkdownLinks": "inPreview",

  // Обновить представление редактора при прокрутке предварительного просмотра Markdown.
  "markdown.preview.scrollEditorWithPreview": true,

  // Обновить представление предварительного просмотра при прокрутке редактора Markdown.
  "markdown.preview.scrollPreviewWithEditor": true,

  // Включить некоторые не зависящие от языка замены и применение кавычек для предварительного просмотра Markdown.
  "markdown.preview.typographer": false,

  // Управляет уровнем ведения журнала языкового сервера Markdown.
  "markdown.server.log": "off",

  // Список URL-адресов или локальных путей к таблицам стилей CSS, используемых из области предварительного просмотра Markdown. Относительные пути интерпретируются относительно папки, открытой в проводнике. Если папка не открыта, они интерпретируются относительно расположения файла Markdown. Все символы \ должны записываться в виде \\.
  "markdown.styles": [],

  // Включить предложения путей при записи ссылок в файлы Markdown.
  "markdown.suggest.paths.enabled": true,

  // Включить предложения для заголовков в других файлах Markdown в текущей рабочей области. При принятии одного из этих предложений в этот файл вставляется полный путь к заголовку, например "[link text](/path/to/file.md#header)".
  //  - never: Отключить предложения заголовка рабочей области.
  //  - onDoubleHash: Включить предложения заголовка рабочей области после ввода "##" в пути, например "[link text](##".
  //  - onSingleOrDoubleHash: Включить предложения заголовка рабочей области после ввода "##" или "#" в пути, например "[link text](#" or "[link text](##".
  "markdown.suggest.paths.includeWorkspaceHeaderCompletions": "onDoubleHash",

  // Включить ведение журнала отладки для расширения Markdown.
  "markdown.trace.extension": "off",

  // Отслеживает связь между VS Code и языковым сервером Markdown.
  "markdown.trace.server": "off",

  // Попробуйте обновить ссылки в файлах Markdown при переименовании или перемещении файла в рабочей области. Используйте "#markdown.updateLinksOnFileMove.include#", чтобы указать, какие файлы запускают обновление ссылок.
  //  - prompt: Запрашивать при каждом перемещении файла.
  //  - always: Всегда автоматически обновлять ссылки.
  //  - never: Никогда не пытаться обновить ссылку и не создавать запросы.
  "markdown.updateLinksOnFileMove.enabled": "never",

  // Включить обновление ссылок при перемещении или переименовании каталога в рабочей области.
  "markdown.updateLinksOnFileMove.enableForDirectories": true,

  // Стандартные маски, которые указывают файлы, запускающие автоматическое обновление ссылок. См. дополнительные сведения о функции "#markdown.updateLinksOnFileMove.enabled#".
  "markdown.updateLinksOnFileMove.include": [
    "**/*.{md,mkd,mdwn,mdown,markdown,markdn,mdtxt,mdtext,workbook}",
    "**/*.{jpg,jpe,jpeg,png,bmp,gif,ico,webp,avif,tiff,svg,mp4}"
  ],

  // Проверка повторяющихся определений в текущем файле.
  "markdown.validate.duplicateLinkDefinitions.enabled": "warning",

  // Включение всех отчетов об ошибках в файлах Markdown.
  "markdown.validate.enabled": false,

  // Проверка ссылок на другие файлы в файлах Markdown, например "[link](/path/to/file.md)". Проверяет наличие целевых файлов. Требуется включить "#markdown.validate.enabled#".
  "markdown.validate.fileLinks.enabled": "warning",

  // Проверьте фрагментарную часть ссылок на заголовки в других файлах в файлах Markdown, например "[link](/path/to/file.md#header)". Наследует значение параметра от "#markdown.validate.fragmentLinks.enabled#" по умолчанию.
  "markdown.validate.fileLinks.markdownFragmentLinks": "inherit",

  // Проверка фрагментарных ссылок на заголовки в текущем файле Markdown, например "[link](#header)". Требуется включить "#markdown.validate.enabled#".
  "markdown.validate.fragmentLinks.enabled": "warning",

  // Настройте ссылки, которые не нужно проверять. Например, при добавлении "/about" не будет проверяться ссылка "[about](/about)", а стандартная маска "/assets/**/*.svg" позволит пропустить проверку любых ссылок на файлы ".svg" в каталоге "assets".
  "markdown.validate.ignoredLinks": [],

  // Проверка справочных ссылок в файлах Markdown, например "[link][ref]". Требуется включить "#markdown.validate.enabled#".
  "markdown.validate.referenceLinks.enabled": "warning",

  // Проверка определений ссылок, не используемых в текущем файле.
  "markdown.validate.unusedLinkDefinitions.enabled": "hint",

  // Указывает, включены ли встроенные языковые предложения для PHP. Поддержка предлагает глобальные значения и переменные PHP.
  "php.suggest.basic": true,

  // Включение или отключение встроенной проверки PHP.
  "php.validate.enable": true,

  // Указывает на исполняемый файл PHP.
  "php.validate.executablePath": null,

  // Запускается ли анализатор кода при сохранении или при печати.
  "php.validate.run": "onSave",

  // Включить или отключить автоматическое закрытие тегов JSX.
  "javascript.autoClosingTags": true,

  // Включение или отключение модуля форматирования JavaScript по умолчанию.
  "javascript.format.enable": true,

  // Определяет метод обработки пробелов после разделителя-запятой.
  "javascript.format.insertSpaceAfterCommaDelimiter": true,

  // Определяет метод обработки пробелов после ключевого слова constructor.
  "javascript.format.insertSpaceAfterConstructor": false,

  // Определяет метод обработки пробелов после ключевого слова function у анонимных функций.
  "javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,

  // Определяет метод обработки пробелов после ключевых слов в операторе управления потоком выполнения.
  "javascript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,

  // Определяет обработку пробелов после открывающей и перед закрывающей пустыми фигурными скобками.
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": true,

  // Определяет метод обработки пробелов после открытия и до закрытия скобок выражения JSX.
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,

  // Определяет метод обработки пробелов после открытия и до закрытия непустых фигурных скобок.
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,

  // Определяет метод обработки пробелов после открытия и до закрытия непустых квадратных скобок.
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,

  // Определяет метод обработки пробелов после открытия и до закрытия непустых круглых скобок.
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,

  // Определяет метод обработки пробелов после открытия и до закрытия скобок в строке шаблона.
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,

  // Определяет метод обработки пробелов после точки с запятой в операторе for.
  "javascript.format.insertSpaceAfterSemicolonInForStatements": true,

  // Определяет метод обработки пробелов после двоичного оператора.
  "javascript.format.insertSpaceBeforeAndAfterBinaryOperators": true,

  // Определяет метод обработки пробелов перед скобками аргумента функции.
  "javascript.format.insertSpaceBeforeFunctionParenthesis": false,

  // Определяет, ставится ли открывающая фигурная скобка с новой строки в блоках управления.
  "javascript.format.placeOpenBraceOnNewLineForControlBlocks": false,

  // Определяет, ставится ли открывающая фигурная скобка с новой строки в функциях.
  "javascript.format.placeOpenBraceOnNewLineForFunctions": false,

  // Определяет обработку необязательных символов точки с запятой.
  //  - ignore: Не вставлять и не удалять точки с запятой.
  //  - insert: Вставка запятых в конце оператора.
  //  - remove: Удалите ненужные запятые.
  "javascript.format.semicolons": "ignore",

  // Этот параметр устарел. Вместо него следует использовать "js/ts.implicitProjectConfig.checkJs".
  // Включение или отключение семантической проверки файлов JavaScript. Этот параметр переопределяется файлом "jsconfig.json" или "tsconfig.json".
  "javascript.implicitProjectConfig.checkJs": false,

  // Этот параметр устарел. Вместо него следует использовать "js/ts.implicitProjectConfig.experimentalDecorators".
  // Включение или отключение параметра "experimentalDecorators" в файлах JavaScript, которые не являются частью проекта. Этот параметр переопределяется файлом "jsconfig.json" или "tsconfig.json".
  "javascript.implicitProjectConfig.experimentalDecorators": false,

  // Включить или отключить вложенные указания для значений элементов в объявлениях перечисления:
  // ```typescript
  //
  // enum MyValue {
  // 	A /* = 0 */;
  // 	B /* = 1 */;
  // }
  //
  // ```
  "javascript.inlayHints.enumMemberValues.enabled": false,

  // Включить или отключить вложенные указания для неявных типов возвращаемого числа в подписях функции:
  // ```typescript
  //
  // function foo() /* :number */ {
  // 	return Date.now();
  // }
  //
  // ```
  "javascript.inlayHints.functionLikeReturnTypes.enabled": false,

  // Включить или отключить вложенные указания для имен параметров:
  // ```typescript
  //
  // parseInt(/* str: */ '123', /* radix: */ 8)
  //
  // ```
  //  - none: Отключение указаний имен параметров.
  //  - literals: Включение указаний имен параметров только для литеральных аргументов.
  //  - all: Включение/отключение указаний имен параметров для литеральных и нелитеральных аргументов.
  "javascript.inlayHints.parameterNames.enabled": "none",

  // Подавление указаний имен параметров для аргументов, текст которых совпадает с именем параметра.
  "javascript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": true,

  // Включить или отключить вложенные указания для неявных типов параметров:
  // ```typescript
  //
  // el.addEventListener('click', e /* :MouseEvent */ => ...)
  //
  // ```
  "javascript.inlayHints.parameterTypes.enabled": false,

  // Включить или отключить вложенные указания для неявных типов в объявлениях свойств:
  // ```typescript
  //
  // class Foo {
  // 	prop /* :number */ = Date.now();
  // }
  //
  // ```
  "javascript.inlayHints.propertyDeclarationTypes.enabled": false,

  // Включить или отключить вложенные указания для неявных типов переменных:
  // ```typescript
  //
  // const foo /* :number */ = Date.now();
  //
  // ```
  "javascript.inlayHints.variableTypes.enabled": false,

  // Скрывайте подсказки о типе для переменных, имена которых совпадают с именем типа. Требуется использование TypeScript 4.8 и более поздних версий в рабочей области.
  "javascript.inlayHints.variableTypes.suppressWhenTypeMatchesName": true,

  // Укажите общие шаблоны файлов для исключения из автоматического импорта. Относительные пути разрешаются относительно корня рабочей области. Шаблоны оцениваются с использованием семантики tsconfig.json [`exclude`](https://www.typescriptlang.org/tsconfig#exclude). Требуется использование TypeScript 4.8 или новее в рабочей области.
  "javascript.preferences.autoImportFileExcludePatterns": [],

  // Предпочтительный стиль пути для автоматического импорта.
  //  - shortest: Предпочитать неотносительный импорт, только если доступен неотносительный импорт с меньшим числом сегментов пути, чем у относительного импорта.
  //  - relative: Предпочитать относительный путь к расположению импортируемого файла.
  //  - non-relative: Предпочитать неотносительный импорт на основе "baseUrl" или "paths", заданных в файле jsconfig.json/tsconfig.json.
  //  - project-relative: Предпочитает безотносительный импорт, только если путь относительного импорта выходит за пределы каталога пакета или проекта.
  "javascript.preferences.importModuleSpecifier": "shortest",

  // Предпочтительное окончание пути для автоматического импорта.
  //  - auto: Используйте параметры проекта для выбора значения по умолчанию.
  //  - minimal: Сократить `./component/index.js` до `./component`.
  //  - index: Сокращение "./component/index.js" до "./component/index".
  //  - js: Не сокращайте окончания пути; включите расширение `.js` или `.ts`.
  "javascript.preferences.importModuleSpecifierEnding": "auto",

  // Предпочитаемый стиль для завершения атрибута JSX.
  //  - auto: Вставить `={}` или `=""` после имен атрибутов на основе типа свойства. Сведения об управлении типов кавычек для строковых атрибутов см. в `javascript.preferences.quoteStyle`.
  //  - braces: Вставить "={}" после имен атрибутов.
  //  - none: Вставлять только имена атрибутов.
  "javascript.preferences.jsxAttributeCompletionStyle": "auto",

  // Предпочитаемый стиль кавычек для быстрых исправлений.
  //  - auto: Вывести тип кавычек из существующего кода
  //  - single: Всегда использовать одиночные кавычки: '
  //  - double: Всегда использовать двойные кавычки: "
  "javascript.preferences.quoteStyle": "auto",

  // При использовании тега JSX попробуйте переименовать соответствующий тег вместо символа. Требуется использование TypeScript 5.1 и более поздних версий в рабочей области.
  "javascript.preferences.renameMatchingJsxTags": true,

  // Параметр typescript.preferences.renameShorthandProperties объявлен нерекомендуемым, вместо него следует использовать typescript.preferences.useAliasesForRenames
  // Включение или отключение псевдонимов для собирательных свойств объекта во время переименований.
  "javascript.preferences.renameShorthandProperties": true,

  // Включение или отключение псевдонимов для собирательных свойств объекта во время переименований.
  "javascript.preferences.useAliasesForRenames": true,

  // Позволяет команде "К источнику" избегать файлов объявления типа, если это возможно, с помощью активации команды "К определению источника". Это позволяет запустить команду "К определению источника" с помощью жеста мыши. Требуется использование TypeScript 4.7 и более поздних версий в рабочей области.
  "javascript.preferGoToSourceDefinition": false,

  // Включить/отключить ссылки CodeLens для файлов JavaScript.
  "javascript.referencesCodeLens.enabled": false,

  // Включить/отключить ссылки CodeLens для всех функций в файлах JavaScript.
  "javascript.referencesCodeLens.showOnAllFunctions": false,

  // Включить или отключить предложения автоимпорта.
  "javascript.suggest.autoImports": true,

  // Включить или отключить завершение фрагментов кода для участников класса.
  "javascript.suggest.classMemberSnippets.enabled": true,

  // Дополните функции сигнатурами их параметров.
  "javascript.suggest.completeFunctionCalls": false,

  // Включить/отключить предложение для завершения комментариев JSDoc.
  "javascript.suggest.completeJSDocs": true,

  // Включить/отключить предложения автозаполнения.
  "javascript.suggest.enabled": true,

  // Включение или отключение отображения завершений для потенциально неопределенных значений, которые вставляют необязательный вызов по цепочке. Требует включения строгих проверок на значения NULL.
  "javascript.suggest.includeAutomaticOptionalChainCompletions": true,

  // Включение или отключение автоматически импортированных завершений стиля для операторов импорта, введенных не полностью.
  "javascript.suggest.includeCompletionsForImportStatements": true,

  // Включение или отключение создания заметок @returns для шаблонов JSDoc.
  "javascript.suggest.jsdoc.generateReturns": true,

  // Включение/отключение добавления уникальных имен из файла в предложения JavaScript. Обратите внимание, что предложения имен всегда отключены в коде JavaScript, семантика которого проверяется с помощью "@ts-check" или "checkJs".
  "javascript.suggest.names": true,

  // Включить/отключить предложения для путей в выражениях импорта и в вызовах.
  "javascript.suggest.paths": true,

  // Включить или отключить предложения диагностики для файлов JavaScript в редакторе.
  "javascript.suggestionActions.enabled": true,

  // Включить или отключить автоматическое обновление путей импорта при переименовании или перемещении файла в VS Code.
  //  - prompt: Выдавать запрос при каждом переименовании.
  //  - always: Всегда обновлять пути автоматически.
  //  - never: Никогда не переименовывать пути и не выдавать запрос на переименование.
  "javascript.updateImportsOnFileMove.enabled": "prompt",

  // Включение или отключение проверки JavaScript.
  "javascript.validate.enable": true,

  // Включение или отключение семантической проверки файлов JavaScript. Этот параметр переопределяется файлом "jsconfig.json" или "tsconfig.json".
  "js/ts.implicitProjectConfig.checkJs": false,

  // Включение или отключение параметра "experimentalDecorators" в файлах JavaScript, которые не являются частью проекта. Этот параметр переопределяется файлом "jsconfig.json" или "tsconfig.json".
  "js/ts.implicitProjectConfig.experimentalDecorators": false,

  // Задает систему модуля для программы. Дополнительные сведения: https://www.typescriptlang.org/tsconfig#module.
  "js/ts.implicitProjectConfig.module": "ESNext",

  // Включение или отключение [строгих типов функций](https://www.typescriptlang.org/tsconfig#strictFunctionTypes) в файлах JavaScript и TypeScript, которые не являются частью проекта. Этот параметр переопределяется файлом "jsconfig.json" или "tsconfig.json".
  "js/ts.implicitProjectConfig.strictFunctionTypes": true,

  // Включение или отключение [строгих проверок значения NULL](https://www.typescriptlang.org/tsconfig#strictNullChecks) в файлах JavaScript и TypeScript, которые не являются частью проекта. Этот параметр переопределяется файлом "jsconfig.json" или "tsconfig.json".
  "js/ts.implicitProjectConfig.strictNullChecks": true,

  // Задайте целевую версию языка JavaScript для выданного JavaScript и включите объявления библиотеки. Дополнительные сведения: https://www.typescriptlang.org/tsconfig#target.
  "js/ts.implicitProjectConfig.target": "ES2020",

  // Включить или отключить автоматическое закрытие тегов JSX.
  "typescript.autoClosingTags": true,

  // Проверьте, установлен ли npm для [Автоматического получения типов](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition).
  "typescript.check.npmIsInstalled": true,

  // Отключает [автоматическое получение типов](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition). Автоматическое получение типов извлекает пакеты @типов из npm для улучшения IntelliSense для внешних библиотек.
  "typescript.disableAutomaticTypeAcquisition": false,

  // Включает вывод пользователям запросов на использование версии TypeScript, настроенной в рабочей области для IntelliSense.
  "typescript.enablePromptUseWorkspaceTsdk": false,

  // Включение и отключение быстрых исправлений с помощью ИИ. Требуется расширение, обеспечивающее функциональность ИИ-чата.
  "typescript.experimental.aiQuickFix": false,

  // Enable/disable package acquisition on the web.
  "typescript.experimental.tsserver.web.typeAcquisition.enabled": false,

  // Включение или отключение модуля форматирования TypeScript по умолчанию.
  "typescript.format.enable": true,

  // Делайте отступ для предложений case в операторах switch. Требуется использование TypeScript 5.1+ в рабочей области.
  "typescript.format.indentSwitchCase": true,

  // Определяет метод обработки пробелов после разделителя-запятой.
  "typescript.format.insertSpaceAfterCommaDelimiter": true,

  // Определяет метод обработки пробелов после ключевого слова constructor.
  "typescript.format.insertSpaceAfterConstructor": false,

  // Определяет метод обработки пробелов после ключевого слова function у анонимных функций.
  "typescript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,

  // Определяет метод обработки пробелов после ключевых слов в операторе управления потоком выполнения.
  "typescript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,

  // Определяет обработку пробелов после открывающей и перед закрывающей пустыми фигурными скобками.
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": true,

  // Определяет метод обработки пробелов после открытия и до закрытия скобок выражения JSX.
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,

  // Определяет метод обработки пробелов после открытия и до закрытия непустых фигурных скобок.
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,

  // Определяет метод обработки пробелов после открытия и до закрытия непустых квадратных скобок.
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,

  // Определяет метод обработки пробелов после открытия и до закрытия непустых круглых скобок.
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,

  // Определяет метод обработки пробелов после открытия и до закрытия скобок в строке шаблона.
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,

  // Определяет метод обработки пробелов после точки с запятой в операторе for.
  "typescript.format.insertSpaceAfterSemicolonInForStatements": true,

  // Определяет метод обработки пробелов после утверждений типа в TypeScript.
  "typescript.format.insertSpaceAfterTypeAssertion": false,

  // Определяет метод обработки пробелов после двоичного оператора.
  "typescript.format.insertSpaceBeforeAndAfterBinaryOperators": true,

  // Определяет метод обработки пробелов перед скобками аргумента функции.
  "typescript.format.insertSpaceBeforeFunctionParenthesis": false,

  // Определяет, ставится ли открывающая фигурная скобка с новой строки в блоках управления.
  "typescript.format.placeOpenBraceOnNewLineForControlBlocks": false,

  // Определяет, ставится ли открывающая фигурная скобка с новой строки в функциях.
  "typescript.format.placeOpenBraceOnNewLineForFunctions": false,

  // Определяет обработку необязательных символов точки с запятой.
  //  - ignore: Не вставлять и не удалять точки с запятой.
  //  - insert: Вставка запятых в конце оператора.
  //  - remove: Удалите ненужные запятые.
  "typescript.format.semicolons": "ignore",

  // Включить или отключить CodeLens для реализаций. В этом CodeLens отображаются реализации интерфейса.
  "typescript.implementationsCodeLens.enabled": false,

  // Включить или отключить вложенные указания для значений элементов в объявлениях перечисления:
  // ```typescript
  //
  // enum MyValue {
  // 	A /* = 0 */;
  // 	B /* = 1 */;
  // }
  //
  // ```
  "typescript.inlayHints.enumMemberValues.enabled": false,

  // Включить или отключить вложенные указания для неявных типов возвращаемого числа в подписях функции:
  // ```typescript
  //
  // function foo() /* :number */ {
  // 	return Date.now();
  // }
  //
  // ```
  "typescript.inlayHints.functionLikeReturnTypes.enabled": false,

  // Включить или отключить вложенные указания для имен параметров:
  // ```typescript
  //
  // parseInt(/* str: */ '123', /* radix: */ 8)
  //
  // ```
  //  - none: Отключение указаний имен параметров.
  //  - literals: Включение указаний имен параметров только для литеральных аргументов.
  //  - all: Включение/отключение указаний имен параметров для литеральных и нелитеральных аргументов.
  "typescript.inlayHints.parameterNames.enabled": "none",

  // Подавление указаний имен параметров для аргументов, текст которых совпадает с именем параметра.
  "typescript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": true,

  // Включить или отключить вложенные указания для неявных типов параметров:
  // ```typescript
  //
  // el.addEventListener('click', e /* :MouseEvent */ => ...)
  //
  // ```
  "typescript.inlayHints.parameterTypes.enabled": false,

  // Включить или отключить вложенные указания для неявных типов в объявлениях свойств:
  // ```typescript
  //
  // class Foo {
  // 	prop /* :number */ = Date.now();
  // }
  //
  // ```
  "typescript.inlayHints.propertyDeclarationTypes.enabled": false,

  // Включить или отключить вложенные указания для неявных типов переменных:
  // ```typescript
  //
  // const foo /* :number */ = Date.now();
  //
  // ```
  "typescript.inlayHints.variableTypes.enabled": false,

  // Скрывайте подсказки о типе для переменных, имена которых совпадают с именем типа. Требуется использование TypeScript 4.8 и более поздних версий в рабочей области.
  "typescript.inlayHints.variableTypes.suppressWhenTypeMatchesName": true,

  // Устанавливает языковой стандарт, используемый для сообщений об ошибках JavaScript и TypeScript. По умолчанию используется языковой стандарт VS Code.
  "typescript.locale": "auto",

  // Указывает путь к исполняемому npm для [Автоматического получения типов](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition).
  "typescript.npm": "",

  // Укажите общие шаблоны файлов для исключения из автоматического импорта. Относительные пути разрешаются относительно корня рабочей области. Шаблоны оцениваются с использованием семантики tsconfig.json [`exclude`](https://www.typescriptlang.org/tsconfig#exclude). Требуется использование TypeScript 4.8 или новее в рабочей области.
  "typescript.preferences.autoImportFileExcludePatterns": [],

  // Предпочтительный стиль пути для автоматического импорта.
  //  - shortest: Предпочитать неотносительный импорт, только если доступен неотносительный импорт с меньшим числом сегментов пути, чем у относительного импорта.
  //  - relative: Предпочитать относительный путь к расположению импортируемого файла.
  //  - non-relative: Предпочитать неотносительный импорт на основе "baseUrl" или "paths", заданных в файле jsconfig.json/tsconfig.json.
  //  - project-relative: Предпочитает безотносительный импорт, только если путь относительного импорта выходит за пределы каталога пакета или проекта.
  "typescript.preferences.importModuleSpecifier": "shortest",

  // Предпочтительное окончание пути для автоматического импорта.
  //  - auto: Используйте параметры проекта для выбора значения по умолчанию.
  //  - minimal: Сократить `./component/index.js` до `./component`.
  //  - index: Сокращение "./component/index.js" до "./component/index".
  //  - js: Не сокращайте окончания пути; включите расширение `.js` или `.ts`.
  "typescript.preferences.importModuleSpecifierEnding": "auto",

  // Включение или выключение поиска зависимостей "package.json" для доступных операций автоматического импорта.
  //  - auto: Поиск зависимостей на основе приблизительного влияния на производительность.
  //  - on: Всегда искать зависимости.
  //  - off: Никогда не искать зависимости.
  "typescript.preferences.includePackageJsonAutoImports": "auto",

  // Предпочитаемый стиль для завершения атрибута JSX.
  //  - auto: Вставить `={}` или `=""` после имен атрибутов на основе типа свойства. Сведения об управлении типов кавычек для строковых атрибутов см. в `typescript.preferences.quoteStyle`.
  //  - braces: Вставить "={}" после имен атрибутов.
  //  - none: Вставлять только имена атрибутов.
  "typescript.preferences.jsxAttributeCompletionStyle": "auto",

  // Предпочитаемый стиль кавычек для быстрых исправлений.
  //  - auto: Вывести тип кавычек из существующего кода
  //  - single: Всегда использовать одиночные кавычки: '
  //  - double: Всегда использовать двойные кавычки: "
  "typescript.preferences.quoteStyle": "auto",

  // При использовании тега JSX попробуйте переименовать соответствующий тег вместо символа. Требуется использование TypeScript 5.1 и более поздних версий в рабочей области.
  "typescript.preferences.renameMatchingJsxTags": true,

  // Параметр typescript.preferences.renameShorthandProperties объявлен нерекомендуемым, вместо него следует использовать typescript.preferences.useAliasesForRenames
  // Включение или отключение псевдонимов для собирательных свойств объекта во время переименований.
  "typescript.preferences.renameShorthandProperties": true,

  // Включение или отключение псевдонимов для собирательных свойств объекта во время переименований.
  "typescript.preferences.useAliasesForRenames": true,

  // Позволяет команде "К источнику" избегать файлов объявления типа, если это возможно, с помощью активации команды "К определению источника". Это позволяет запустить команду "К определению источника" с помощью жеста мыши. Требуется использование TypeScript 4.7 и более поздних версий в рабочей области.
  "typescript.preferGoToSourceDefinition": false,

  // Включить/отключить ссылки CodeLens для файлов TypeScript.
  "typescript.referencesCodeLens.enabled": false,

  // Включить/отключить ссылки CodeLens для всех функций в файлах TypeScript.
  "typescript.referencesCodeLens.showOnAllFunctions": false,

  // Отображать ошибки при проверке стиля в виде предупреждений.
  "typescript.reportStyleChecksAsWarnings": true,

  // Включить или отключить предложения автоимпорта.
  "typescript.suggest.autoImports": true,

  // Включить или отключить завершение фрагментов кода для участников класса.
  "typescript.suggest.classMemberSnippets.enabled": true,

  // Дополните функции сигнатурами их параметров.
  "typescript.suggest.completeFunctionCalls": false,

  // Включить/отключить предложение для завершения комментариев JSDoc.
  "typescript.suggest.completeJSDocs": true,

  // Включить/отключить предложения автозаполнения.
  "typescript.suggest.enabled": true,

  // Включение или отключение отображения завершений для потенциально неопределенных значений, которые вставляют необязательный вызов по цепочке. Требует включения строгих проверок на значения NULL.
  "typescript.suggest.includeAutomaticOptionalChainCompletions": true,

  // Включение или отключение автоматически импортированных завершений стиля для операторов импорта, введенных не полностью.
  "typescript.suggest.includeCompletionsForImportStatements": true,

  // Включение или отключение создания заметок @returns для шаблонов JSDoc.
  "typescript.suggest.jsdoc.generateReturns": true,

  // Включить или отключить завершение фрагментов кода для методов в объектных литералах. Требуется использование TypeScript 4.7+ в рабочей области
  "typescript.suggest.objectLiteralMethodSnippets.enabled": true,

  // Включить/отключить предложения для путей в выражениях импорта и в вызовах.
  "typescript.suggest.paths": true,

  // Включить или отключить предложения диагностики для файлов TypeScript в редакторе.
  "typescript.suggestionActions.enabled": true,

  // Включить/отключить периодические опросы, которые помогают нам улучшить поддержку JavaScript и TypeScript в VS Code.
  "typescript.surveys.enabled": true,

  // Управляет автоматическим обнаружением заданий tsc.
  //  - on: Создавать задачи сборки и просмотра.
  //  - off: Отключить эту функцию.
  //  - build: Создавать только задачи компиляции для однократного запуска.
  //  - watch: Создавать только задачи компиляции и просмотра.
  "typescript.tsc.autoDetect": "on",

  // Указывает путь к файлам "tsserver" и "lib*.d.ts" в установке TypeScript, используемой для IntelliSense, например: ./node_modules/typescript/lib.
  //
  // — При указании в качестве пользовательского параметра версия TypeScript из файла typescript.tsdk автоматически заменяет встроенную версию TypeScript.
  // — При указании в качестве параметра рабочей области typescript.tsdk позволяет переключиться на использование этой версии рабочей области TypeScript для IntelliSense с помощью команды "TypeScript: выберите версию TypeScript".
  //
  // Дополнительные сведения об управлении версиями TypeScript см. в [документации по TypeScript](https://code.visualstudio.com/docs/typescript/typescript-compiling#_using-newer-typescript-versions).
  "typescript.tsdk": "",

  // Включает трассировку производительности сервера TS в каталог. Эти файлы трассировки можно использовать для диагностики проблем с производительностью сервера TS. В журнале могут содержаться пути к файлам, исходный код и другие сведения из вашего проекта, в том числе носящие конфиденциальный характер.
  "typescript.tsserver.enableTracing": false,

  // (Экспериментальная функция) Включает ведение отчетов об ошибках в масштабе всего проекта.
  "typescript.tsserver.experimental.enableProjectDiagnostics": false,

  // Включает ведение журнала для сервера TS. Этот журнал можно использовать для диагностики проблем сервера TS. В журнале могут содержаться пути к файлам, исходный код и другие сведения из вашего проекта, в том числе носящие конфиденциальный характер.
  "typescript.tsserver.log": "off",

  // Максимальный объем памяти (в МБ), выделяемый для процесса сервера TypeScript.
  "typescript.tsserver.maxTsServerMemory": 3072,

  // Дополнительные пути для обнаружения подключаемых модулей языковой службы TypeScript.
  "typescript.tsserver.pluginPaths": [],

  // Этот параметр устарел и заменен на "typescript.tsserver.useSyntaxServer".
  // Включение или отключение порождения отдельного сервера TypeScript, который может оперативнее реагировать на операции, связанные с синтаксисом, такие как вычисление свертывания или символов документа.
  "typescript.tsserver.useSeparateSyntaxServer": true,

  // Управляет запуском TypeScript выделенного сервера для более быстрой обработки операций, связанных с синтаксисом, таких как вычисление свертывания кода.
  //  - always: Используйте более светлый сервера синтаксиса для обработки всех операций IntelliSense. Этот синтаксис-сервер может предоставлять IntelliSense только для открытых файлов.
  //  - never: Не используйте выделенный сервер синтаксиса. Используйте один сервер для обработки всех операций IntelliSense.
  //  - auto: Создайте как полноценный, так и более легкий сервер, предназначенный для операций с синтаксисом. Сервер синтаксиса используется для ускорения операций с синтаксисом и обеспечения IntelliSense во время загрузки проектов.
  "typescript.tsserver.useSyntaxServer": "auto",

  // Настройка стратегий наблюдения для отслеживания файлов и каталогов.
  "typescript.tsserver.watchOptions": {},

  // Включить или отключить IntelliSense для всего проекта в Интернете. Требует, чтобы VS Code был запущен в доверенного контекста.
  "typescript.tsserver.web.projectWideIntellisense.enabled": true,

  // Подавляет семантические ошибки. Это необходимо при использовании внешних пакетов, так как их нельзя проанализировать в Интернете.
  "typescript.tsserver.web.projectWideIntellisense.suppressSemanticErrors": true,

  // Включить или отключить автоматическое обновление путей импорта при переименовании или перемещении файла в VS Code.
  //  - prompt: Выдавать запрос при каждом переименовании.
  //  - always: Всегда обновлять пути автоматически.
  //  - never: Никогда не переименовывать пути и не выдавать запрос на переименование.
  "typescript.updateImportsOnFileMove.enabled": "prompt",

  // Включение или отключение проверки TypeScript.
  "typescript.validate.enable": true,

  // Определяет, какие файлы ищутся при [переходе к символу в рабочей области](https://code.visualstudio.com/docs/editor/editingevolved#_open-symbol-by-name).
  //  - allOpenProjects: Поиск символов во всех открытых проектах JavaScript или TypeScript.
  //  - currentProject: Поиск символов только в текущем проекте JavaScript или TypeScript.
  "typescript.workspaceSymbols.scope": "allOpenProjects",

  // Всегда показывать выполненный тест, когда #testing.followRunningTest# включен. Если этот параметр отключен, будут обнаружены только неудачные тесты.
  "testing.alwaysRevealTestOnStateChange": false,

  // Определяет, когда будет автоматически открываться представление быстрого редактирования ошибок.
  //  - failureAnywhere: Открывать автоматически независимо от того, где произошел сбой.
  //  - failureInVisibleDocument: Открывать автоматически при сбое теста в видимом документе.
  //  - never: Никогда не открывать автоматически.
  "testing.automaticallyOpenPeekView": "failureInVisibleDocument",

  // Определяет, следует ли автоматически открывать представление быстрого редактирования в режиме непрерывного запуска.
  "testing.automaticallyOpenPeekViewDuringAutoRun": false,

  // Время ожидания (в миллисекундах) после отметки теста как устаревшего и запуском нового теста.
  "testing.autoRun.delay": 1000,

  // Управляет счетчиком на значке тестирования в панели действий.
  //  - failed: Показать количество неудачных тестов
  //  - off: Отключить счетчик тестирования
  //  - passed: Показать количество пройденных тестов
  //  - skipped: Показать количество пропущенных тестов
  "testing.countBadge": "failed",

  // Управляет действием, выполняемым при щелчке левой кнопкой мыши по оформлению теста во внутренней области.
  //  - run: Запустить тест.
  //  - debug: Отладить тест.
  //  - contextMenu: Откройте контекстное меню, чтобы просмотреть дополнительные параметры.
  "testing.defaultGutterClickAction": "run",

  // Определяет, нужно ли следить за выполняющимся тестом в представлении обозревателя тестов.
  "testing.followRunningTest": true,

  // Определяет, отображаются ли тестовые украшения во внутренней области редактора.
  "testing.gutterEnabled": true,

  // Определяет, когда нужно открыть представление тестирования.
  //  - neverOpen: Никогда не открывать представление тестирования автоматически
  //  - openOnTestStart: Открыть представление тестирования при запуске тестов
  //  - openOnTestFailure: Открыть представление тестирования при любом сбое теста
  "testing.openTesting": "openOnTestStart",

  // Определяет, следует ли сохранять "грязные" редакторы перед проведением тестов.
  "testing.saveBeforeTest": true,

  // Определяет, следует ли отображать сообщения из всех тестовых запусков.
  "testing.showAllMessages": false,

  // Вставьте точку с запятой в конце строки при заполнении свойств CSS.
  "css.completion.completePropertyWithSemicolon": true,

  // По умолчанию VS Code активирует завершение значения свойства после выбора свойства CSS. Используйте этот параметр, чтобы отключить такое поведение.
  "css.completion.triggerPropertyValueCompletion": true,

  // Список относительных путей к файлам JSON, перед которым указан [формат пользовательских данных](https://github.com/microsoft/vscode-css-languageservice/blob/master/docs/customData.md).
  //
  // VS Code загружает пользовательские данные при запуске, чтобы расширить поддержку CSS, включив в нее пользовательские свойства CSS, директивы at, псевдоклассы и псевдоэлементы, указанные в файлах JSON..
  //
  // Пути к файлам задаются относительно рабочей области, и учитываются только параметры папки рабочей области.
  "css.customData": [],

  // Поместите фигурные скобки на ту же строку, что и правила (`collapse) или поместите фигурные скобки на собственную строку (`expand`).
  "css.format.braceStyle": "collapse",

  // Включить/выключить стандартный форматировщик CSS.
  "css.format.enable": true,

  // Максимальное число разрывов строк, сохраняемых в одном блоке, если включен параметр `css.format.preserveNewLines`.
  "css.format.maxPreserveNewLines": null,

  // Разделить наборы правил пустой строкой.
  "css.format.newlineBetweenRules": true,

  // Разделить селекторы новой строкой.
  "css.format.newlineBetweenSelectors": true,

  // Следует ли сохранять существующие разрывы строк перед элементами.
  "css.format.preserveNewLines": true,

  // Убедитесь в наличие пробелов вокруг разделителей селектора ">", "+", "~" (например, `a > b`).
  "css.format.spaceAroundSelectorSeparator": false,

  // Отображать документацию тега и атрибута при наведении курсора мыши в CSS.
  "css.hover.documentation": true,

  // Отображать ссылки на MDN при наведении курсора мыши в CSS.
  "css.hover.references": true,

  // Неправильное число параметров.
  "css.lint.argumentsInColorFunction": "error",

  // Не используйте параметры 'width' или 'height' при указании параметров 'padding' или 'border'.
  "css.lint.boxModel": "ignore",

  // При использовании префикса поставщика также указывайте остальные свойства поставщика.
  "css.lint.compatibleVendorPrefixes": "ignore",

  // Не используйте дублирующиеся определения стилей.
  "css.lint.duplicateProperties": "ignore",

  // Не используйте пустые наборы правил.
  "css.lint.emptyRules": "warning",

  // Старайтесь не использовать элементы "float". Элементы "float" могут нарушить работу кода CSS, если изменить один из аспектов разметки.
  "css.lint.float": "ignore",

  // В правиле "@font-face" должны быть определены свойства "src" и "font-family".
  "css.lint.fontFaceProperties": "warning",

  // Цвета в шестнадцатеричном формате должны содержать три или шесть шестнадцатеричных чисел.
  "css.lint.hexColorLength": "error",

  // Селекторы не должны содержать идентификаторов, потому что эти правила слишком тесно связаны с HTML.
  "css.lint.idSelector": "ignore",

  // Полезные советы для Internet Explorer требуются только при поддержке Internet Explorer 7 и более ранних версий.
  "css.lint.ieHack": "ignore",

  // Старайтесь не использовать !important, так как это свидетельствует о том, что весь код CSS стал неуправляемым и его нужно переработать.
  "css.lint.important": "ignore",

  // Операторы импорта не загружаются параллельно.
  "css.lint.importStatement": "ignore",

  // Свойство было проигнорировано из-за значения параметра "display". Например, при указании значения "display: inline" свойства "width", "height", "margin-top", "margin-bottom" и "float" не работают.
  "css.lint.propertyIgnoredDueToDisplay": "warning",

  // Универсальный селектор (*) работает медленно.
  "css.lint.universalSelector": "ignore",

  // Неизвестное правило at.
  "css.lint.unknownAtRules": "warning",

  // Неизвестное свойство.
  "css.lint.unknownProperties": "warning",

  // Неизвестное свойство поставщика.
  "css.lint.unknownVendorSpecificProperties": "ignore",

  // Список свойств, для которых не проверяется правило "unknownProperties".
  "css.lint.validProperties": [],

  // При использовании префикса поставщика также указывайте стандартное свойство.
  "css.lint.vendorPrefix": "warning",

  // Для нуля не требуется единица измерения.
  "css.lint.zeroUnits": "ignore",

  // Отслеживает обмен данными между VS Code и языковым сервером CSS.
  "css.trace.server": "off",

  // Включает или отключает все проверки.
  "css.validate": true,

  // Вставьте точку с запятой в конце строки при заполнении свойств CSS.
  "less.completion.completePropertyWithSemicolon": true,

  // По умолчанию VS Code активирует завершение значения свойства после выбора свойства CSS. Используйте этот параметр, чтобы отключить такое поведение.
  "less.completion.triggerPropertyValueCompletion": true,

  // Поместите фигурные скобки на ту же строку, что и правила (`collapse) или поместите фигурные скобки на собственную строку (`expand`).
  "less.format.braceStyle": "collapse",

  // Включить/отключить стандартный форматировщик LESS.
  "less.format.enable": true,

  // Максимальное число разрывов строк, сохраняемых в одном блоке, если включен параметр `less.format.preserveNewLines`.
  "less.format.maxPreserveNewLines": null,

  // Разделить наборы правил пустой строкой.
  "less.format.newlineBetweenRules": true,

  // Разделить селекторы новой строкой.
  "less.format.newlineBetweenSelectors": true,

  // Следует ли сохранять существующие разрывы строк перед элементами.
  "less.format.preserveNewLines": true,

  // Убедитесь в наличие пробелов вокруг разделителей селектора ">", "+", "~" (например, `a > b`).
  "less.format.spaceAroundSelectorSeparator": false,

  // Отображать документацию тега и атрибута при наведении курсора мыши в LESS.
  "less.hover.documentation": true,

  // Отображать ссылки на MDN при наведении курсора мыши в LESS.
  "less.hover.references": true,

  // Неправильное число параметров.
  "less.lint.argumentsInColorFunction": "error",

  // Не используйте параметры 'width' или 'height' при указании параметров 'padding' или 'border'.
  "less.lint.boxModel": "ignore",

  // При использовании префикса поставщика также указывайте остальные свойства поставщика.
  "less.lint.compatibleVendorPrefixes": "ignore",

  // Не используйте дублирующиеся определения стилей.
  "less.lint.duplicateProperties": "ignore",

  // Не используйте пустые наборы правил.
  "less.lint.emptyRules": "warning",

  // Старайтесь не использовать элементы "float". Элементы "float" могут нарушить работу кода CSS, если изменить один из аспектов разметки.
  "less.lint.float": "ignore",

  // В правиле "@font-face" должны быть определены свойства "src" и "font-family".
  "less.lint.fontFaceProperties": "warning",

  // Цвета в шестнадцатеричном формате должны содержать три или шесть шестнадцатеричных чисел.
  "less.lint.hexColorLength": "error",

  // Селекторы не должны содержать идентификаторов, потому что эти правила слишком тесно связаны с HTML.
  "less.lint.idSelector": "ignore",

  // Полезные советы для Internet Explorer требуются только при поддержке Internet Explorer 7 и более ранних версий.
  "less.lint.ieHack": "ignore",

  // Старайтесь не использовать !important, так как это свидетельствует о том, что весь код CSS стал неуправляемым и его нужно переработать.
  "less.lint.important": "ignore",

  // Операторы импорта не загружаются параллельно.
  "less.lint.importStatement": "ignore",

  // Свойство было проигнорировано из-за значения параметра "display". Например, при указании значения "display: inline" свойства "width", "height", "margin-top", "margin-bottom" и "float" не работают.
  "less.lint.propertyIgnoredDueToDisplay": "warning",

  // Универсальный селектор (*) работает медленно.
  "less.lint.universalSelector": "ignore",

  // Неизвестное правило at.
  "less.lint.unknownAtRules": "warning",

  // Неизвестное свойство.
  "less.lint.unknownProperties": "warning",

  // Неизвестное свойство поставщика.
  "less.lint.unknownVendorSpecificProperties": "ignore",

  // Список свойств, для которых не проверяется правило "unknownProperties".
  "less.lint.validProperties": [],

  // При использовании префикса поставщика также указывайте стандартное свойство.
  "less.lint.vendorPrefix": "warning",

  // Для нуля не требуется единица измерения.
  "less.lint.zeroUnits": "ignore",

  // Включает или отключает все проверки.
  "less.validate": true,

  // Вставьте точку с запятой в конце строки при заполнении свойств CSS.
  "scss.completion.completePropertyWithSemicolon": true,

  // По умолчанию VS Code активирует завершение значения свойства после выбора свойства CSS. Используйте этот параметр, чтобы отключить такое поведение.
  "scss.completion.triggerPropertyValueCompletion": true,

  // Поместите фигурные скобки на ту же строку, что и правила (`collapse) или поместите фигурные скобки на собственную строку (`expand`).
  "scss.format.braceStyle": "collapse",

  // Включить/выключить стандартный форматировщик SCSS.
  "scss.format.enable": true,

  // Максимальное число разрывов строк, сохраняемых в одном блоке, если включен параметр `scss.format.preserveNewLines`.
  "scss.format.maxPreserveNewLines": null,

  // Разделить наборы правил пустой строкой.
  "scss.format.newlineBetweenRules": true,

  // Разделить селекторы новой строкой.
  "scss.format.newlineBetweenSelectors": true,

  // Следует ли сохранять существующие разрывы строк перед элементами.
  "scss.format.preserveNewLines": true,

  // Убедитесь в наличие пробелов вокруг разделителей селектора ">", "+", "~" (например, `a > b`).
  "scss.format.spaceAroundSelectorSeparator": false,

  // Отображать документацию тега и атрибута при наведении курсора мыши в SCSS.
  "scss.hover.documentation": true,

  // Отображать ссылки на MDN при наведении курсора мыши в SCSS.
  "scss.hover.references": true,

  // Неправильное число параметров.
  "scss.lint.argumentsInColorFunction": "error",

  // Не используйте параметры 'width' или 'height' при указании параметров 'padding' или 'border'.
  "scss.lint.boxModel": "ignore",

  // При использовании префикса поставщика также указывайте остальные свойства поставщика.
  "scss.lint.compatibleVendorPrefixes": "ignore",

  // Не используйте дублирующиеся определения стилей.
  "scss.lint.duplicateProperties": "ignore",

  // Не используйте пустые наборы правил.
  "scss.lint.emptyRules": "warning",

  // Старайтесь не использовать элементы "float". Элементы "float" могут нарушить работу кода CSS, если изменить один из аспектов разметки.
  "scss.lint.float": "ignore",

  // В правиле "@font-face" должны быть определены свойства "src" и "font-family".
  "scss.lint.fontFaceProperties": "warning",

  // Цвета в шестнадцатеричном формате должны содержать три или шесть шестнадцатеричных чисел.
  "scss.lint.hexColorLength": "error",

  // Селекторы не должны содержать идентификаторов, потому что эти правила слишком тесно связаны с HTML.
  "scss.lint.idSelector": "ignore",

  // Полезные советы для Internet Explorer требуются только при поддержке Internet Explorer 7 и более ранних версий.
  "scss.lint.ieHack": "ignore",

  // Старайтесь не использовать !important, так как это свидетельствует о том, что весь код CSS стал неуправляемым и его нужно переработать.
  "scss.lint.important": "ignore",

  // Операторы импорта не загружаются параллельно.
  "scss.lint.importStatement": "ignore",

  // Свойство было проигнорировано из-за значения параметра "display". Например, при указании значения "display: inline" свойства "width", "height", "margin-top", "margin-bottom" и "float" не работают.
  "scss.lint.propertyIgnoredDueToDisplay": "warning",

  // Универсальный селектор (*) работает медленно.
  "scss.lint.universalSelector": "ignore",

  // Неизвестное правило at.
  "scss.lint.unknownAtRules": "warning",

  // Неизвестное свойство.
  "scss.lint.unknownProperties": "warning",

  // Неизвестное свойство поставщика.
  "scss.lint.unknownVendorSpecificProperties": "ignore",

  // Список свойств, для которых не проверяется правило "unknownProperties".
  "scss.lint.validProperties": [],

  // При использовании префикса поставщика также указывайте стандартное свойство.
  "scss.lint.vendorPrefix": "warning",

  // Для нуля не требуется единица измерения.
  "scss.lint.zeroUnits": "ignore",

  // Включает или отключает все проверки.
  "scss.validate": true,

  // Включение/отключение возможности интеллектуальной прокрутки в представлении вывода. Интеллектуальная прокрутка позволяет автоматически блокировать прокрутку при щелчке выходного представления и разблокируется при щелчке последней строки.
  "output.smartScroll.enabled": true,

  // Если этот параметр установлен, производится автоматическая проверка обновлений для расширений. Если для расширения доступно обновление, это расширение помечается как устаревшее в представлении "Расширения". Обновления передаются веб-службой Майкрософт.
  "extensions.autoCheckUpdates": true,

  // Управляет поведением автоматического обновления расширений. Обновления извлекаются из веб-службы Майкрософт.
  //  - true: Скачивать и автоматически устанавливать обновления автоматически для всех расширений, кроме тех обновлений, которые игнорируются.
  //  - onlyEnabledExtensions: Скачивать и автоматически устанавливать обновления автоматически только для включенных расширений, кроме тех обновлений, которые игнорируются. Отключенные расширения не обновляются автоматически.
  //  - false: Расширения не обновляются автоматически.
  "extensions.autoUpdate": true,

  // Если этот параметр установлен, редакторы со сведениями о расширении будут автоматически закрыты при выходе из представления "Расширения".
  "extensions.closeExtensionDetailsOnViewChange": false,

  // Если расширение указано здесь, то при обработке этим расширением URI запрос подтверждения выдаваться не будет.
  "extensions.confirmedUriHandlerExtensionIds": [],

  // Настройте расширение для выполнения в хост-процессе другого расширения.
  "extensions.experimental.affinity": {},

  // Если этот параметр включен, расширения, объявляющие событие активации onStartupFinished, будут активированы по истечении периода ожидания.
  "extensions.experimental.deferredStartupFinishedActivation": false,

  // Если этот параметр установлен, оповещения о рекомендациях по расширениям не будут отображаться.
  "extensions.ignoreRecommendations": false,

  // Этот параметр не рекомендуется к использованию. Используйте параметр extensions.ignoreRecommendations для управления уведомлениями о рекомендациях. Используйте действия видимости представления расширений, чтобы скрыть рекомендуемое представление по умолчанию.
  //
  "extensions.showRecommendationsOnlyOnDemand": false,

  // Переопределение поддержки ненадежной рабочей области расширения. Расширения, использующие параметр «true», всегда будут включены. Расширения, использующие параметр «limited», всегда будут включены, и расширение будет скрывать функции, требующие доверия. Расширения, использующие параметр «false», будут включены только в том случае, если рабочая область является доверенной.
  "extensions.supportUntrustedWorkspaces": {},

  // Переопределить поддержку виртуальных рабочих областей для расширения.
  "extensions.supportVirtualWorkspaces": {},

  // Включение узла расширений рабочих веб-процессов.
  //  - true: Хост-процесс для расширений рабочей роли всегда будет запущен.
  //  - false: Хост-процесс для расширений рабочей роли никогда не запускается.
  //  - auto: Хост-процесс для расширений рабочей роли будет запускаться, когда он требуется для веб-расширения.
  "extensions.webWorker": "auto",

  // Список расширений, которые следует игнорировать при синхронизации. Идентификатор расширения всегда имеет вид ${publisher}.${name}. Например, "vscode.csharp".
  "settingsSync.ignoredExtensions": [],

  // Настройка параметров, которые следует игнорировать при синхронизации.
  "settingsSync.ignoredSettings": [],

  // Синхронизация настраиваемых сочетаний клавиш для каждой платформы.
  "settingsSync.keybindingsPerPlatform": true,

  // Определяет, свернуты ли по умолчанию ячейки кода в интерактивном окне.
  "interactiveWindow.collapseCellInputCode": "fromEditor",

  // Если этот параметр включен, элементы навигации записных книжек содержат ячейки кода.
  "notebook.breadcrumbs.showCodeCells": true,

  // Определяет, где выводится указатель фокуса: на границах ячеек или по левому краю.
  "notebook.cellFocusIndicator": "gutter",

  // Следует ли отображать панель инструментов ячейки или скрыть ее.
  "notebook.cellToolbarLocation": {
    "default": "right"
  },

  // Должна ли панель инструментов ячейки появляться при наведении или щелчке.
  "notebook.cellToolbarVisibility": "click",

  // Экспериментальная функция. При сохранении запустите серию действий кода для записной книжки. Должны быть указаны действия кода, файл не должен сохраняться с задержкой, и редактор не должен закрываться. Пример: "source.fixAll: true"
  "notebook.codeActionsOnSave": {},

  // Укажите, должен ли редактор записных книжек отображаться в компактном виде. Например, если этот параметр включен, это приведет к уменьшению ширины левого поля.
  "notebook.compactView": true,

  // Определяет, требуется ли запрос на подтверждение для удаления запущенной ячейки.
  "notebook.confirmDeleteRunningCell": true,

  // Определяет, следует ли отображать действие выходных данных на панели инструментов выходных данных.
  "notebook.consolidatedOutputButton": true,

  // Определяет, будут ли отображаться дополнительные действия в раскрывающемся меню рядом с кнопкой "Выполнить".
  "notebook.consolidatedRunButton": false,

  // Следует ли использовать расширенный редактор текстовых несовпадений для записной книжки.
  "notebook.diff.enablePreview": true,

  // Скрыть различия в метаданных
  "notebook.diff.ignoreMetadata": false,

  // Скрыть различия в выходных данных
  "notebook.diff.ignoreOutputs": false,

  // Следует ли отрисовывать обзорную линейку в редакторе несовпадения для записной книжки.
  "notebook.diff.overviewRuler": false,

  // Список приоритетов для выходных типов MIME
  "notebook.displayOrder": [],

  // Определяет, должен ли редактор записной книжки разрешать перемещение ячеек путем перетаскивания.
  "notebook.dragAndDropEnabled": true,

  // Параметры для редакторов кода, используемых в записных книжках. Их можно использовать для настройки большинства параметров редактора.*
  "notebook.editorOptionsCustomizations": {},

  // Включает добавочное сохранение записных книжек в удаленной среде. Если этот параметр включен, на узел расширения отправляются только изменения, внесенные в записную книжку, что повышает производительность для больших записных книжек и медленных сетевых подключений.
  "notebook.experimental.remoteSave": false,

  // Настройте поведение мини-приложения поиска в ячейках записной книжки. Если включены и источник разметки, и предварительный просмотр разметки, мини-приложение поиска будет выполнять поиск в исходном коде или в режиме предварительного просмотра в зависимости от текущего состояния ячейки.
  "notebook.find.scope": {
    "markupSource": true,
    "markupPreview": true,
    "codeSource": true,
    "codeOutput": true
  },

  // Формат ячейки записной книжки при выполнении. Форматировщик должен быть доступен.
  "notebook.formatOnCellExecution": false,

  // Форматирование записной книжки при сохранении. Форматировщик должен быть доступен, файл не должен сохраняться по истечении времени задержки, а работа редактора не должна завершаться.
  "notebook.formatOnSave.enabled": false,

  // Определяет, следует ли отображать глобальную панель инструментов в редакторе записной книжки.
  "notebook.globalToolbar": true,

  // Указать, следует ли отображать метку в действиях на панели инструментов записной книжки.
  "notebook.globalToolbarShowLabel": "always",

  // Определяет место отображения действий вставки ячеек.
  //  - betweenCells: Панель инструментов, которая отображается при наведении указателя на ячейки.
  //  - notebookToolbar: Панель инструментов в верхней части редактора записных книжек.
  //  - both: Обе панели инструментов.
  //  - hidden: Действия вставки нигде не отображаются.
  "notebook.insertToolbarLocation": "both",

  // Управляет отображением номеров строк в редакторе ячеек.
  "notebook.lineNumbers": "off",

  // Управляет размером шрифта в пикселях преобразованной для просмотра разметки в записных книжках. Если задано значение `0` используется 120% `editor.fontSize`.
  "notebook.markup.fontSize": 0,

  // Если этот параметр включен, курсор может перейти к следующей или предыдущей ячейке, когда текущий курсор в редакторе ячеек находится в первой или последней строке.
  "notebook.navigation.allowNavigateToSurroundingCells": true,

  // Если параметр включен, в структуре записной книжки отображаются ячейки кода.
  "notebook.outline.showCodeCells": false,

  // Семейство шрифтов для вывода текста в ячейках записной книжки. Если не задано, используется `editor.fontFamily`.
  "notebook.output.fontFamily": "",

  // Размер шрифта для вывода текста в ячейках записной книжки. При значении 0 используется `editor.fontSize`.
  "notebook.output.fontSize": 0,

  // Высота строки для вывода текста в ячейках записной книжки.
  //  – При значении 0 используется высота строки редактора.
  //  – Значения от 0 до 8 будут использоваться в качестве множителя размера шрифта.
  //  – Значения больше или равные 8 будут использоваться в качестве действительных значений.
  "notebook.output.lineHeight": 0,

  // Изначально отображать выходные данные записной книжки в прокручиваемом регионе, если длина превышает ограничение
  "notebook.output.scrolling": false,

  // Определяет, сколько строк текста отображается при выводе текста. Если `notebook.output.scrolling` включен, этот параметр используется для определения высоты прокрутки выходных данных.
  "notebook.output.textLineLimit": 30,

  // Управляет переносом строк в выходных данных.
  "notebook.output.wordWrap": false,

  // Должна ли отображаться строка состояния ячейки.
  //  - hidden: Строка состояния ячейки всегда скрыта.
  //  - visible: Строка состояния ячейки всегда отображается.
  //  - visibleAfterExecute: Строка состояния ячейки скрывается до выполнения ячейки. Затем она становится видимой для отображения состояния выполнения.
  "notebook.showCellStatusBar": "visible",

  // Определяет, когда отображать сворачивающуюся стрелку заголовка Markdown.
  //  - always: Сворачивающиеся элементы управления видны всегда.
  //  - never: Никогда не показывать элементы управления свертыванием и уменьшать размер переплета.
  //  - mouseover: Сворачивающиеся элементы управления видны только при наведении курсора мыши.
  "notebook.showFoldingControls": "mouseover",

  // Экспериментальные опции. Управляйте отображением заголовков записной книжки с залипанием прокрутки в редакторе записной книжки.
  "notebook.stickyScroll.enabled": false,

  // Следует ли использовать отдельный стек отмены/повтора для каждой ячейки.
  "notebook.undoRedoPerCell": true,

  // Автоматически прокрутите интерактивное окно, чтобы показать выходные данные последнего выполненного оператора. Если это значение равно false, окно будет прокручиваться только в том случае, если оно уже прокручивалось до последней ячейки.
  "interactiveWindow.alwaysScrollOnNewCell": true,

  // Если файл открывается из проводника в терминале, определяет, какой тип терминала будет запущен
  //  - integrated: Использовать встроенный терминал VS Code.
  //  - external: Использовать настроенный внешний терминал.
  //  - both: Используйте два других вместе.
  "terminal.explorerKind": "integrated",

  // Настройка терминала для запуска в Linux.
  "terminal.external.linuxExec": "xterm",

  // Определяет, какое приложение терминала использовать в macOS.
  "terminal.external.osxExec": "Terminal.app",

  // Настройка терминала, который будет запущен в Windows.
  "terminal.external.windowsExec": "C:\\Windows\\System32\\cmd.exe",

  // При открытии репозитория из представления репозиториев системы управления версиями в терминале определяет, какой тип терминала будет запущен.
  //  - integrated: Использовать встроенный терминал VS Code.
  //  - external: Использовать настроенный внешний терминал.
  //  - both: Используйте два других вместе.
  "terminal.sourceControlRepositoriesKind": "integrated",

  // Определяет, разрешены ли аккорды настраиваемых сочетаний клавиш в терминале. Обратите внимание, что когда это верно, и нажатие клавиши приводит к аккорду, это будет обходить `terminal.integrated.commandsToSkipShell`, установка значения false особенно удобна, если вы хотите, чтобы CTRL+K обращалось к вашей оболочке (а не к VS Code).
  "terminal.integrated.allowChords": true,

  // Указывает, разрешено ли использовать назначенные клавиши строки меню (например, ALT+F) для активации открытия строки меню. Обратите внимание, что при указании значения "true" все сочетания клавиш с ALT будут пропускать оболочку. Этот параметр не применяется в macOS.
  "terminal.integrated.allowMnemonics": false,

  // Если включено, сочетание клавиш ALT/OPTION + щелчок перемещает курсор подсказки под мышь, когда для `editor.multiCursorModifier` установлено значение `'alt'` (значение по умолчанию). В некоторых оболочках функция может работать ненадежно.
  "terminal.integrated.altClickMovesCursor": true,

  // Профиль терминала в Linux для использования терминалов, связанного с автоматизацией, такого как задачи и отладка.
  "terminal.integrated.automationProfile.linux": null,

  // Профиль терминала в macOS для использования терминалов, связанного с автоматизацией, такого как задачи и отладка.
  "terminal.integrated.automationProfile.osx": null,

  // Профиль терминала, используемый для использования терминалов, связанных с автоматизацией, таких как задачи и отладка. Этот параметр будет пропущен, если задано `terminal.integrated.automationShell.windows` (сейчас не рекомендуется).
  "terminal.integrated.automationProfile.windows": null,

  // Набор сообщений, при обнаружении которых в терминале будет отправляться автоматический ответ. Если сообщение достаточно конкретное, это поможет автоматизировать обработку типичных ответов.
  //
  // Примечания:
  //
  // – Используйте `"Terminate batch job (Y/N)": "Y\r"` для автоматического ответа на запрос завершения пакетного задания в Windows.
  // – Сообщение содержит escape-последовательности, поэтому ответ может не работать для стилизованного текста.
  // – Каждый ответ отправляется не более одного раза в секунду.
  // – Используйте `"\r"` в ответе для обозначения клавиши ВВОД.
  // – Чтобы удалить клавишу по умолчанию, задайте значение NULL.
  // – Перезапустите VS Code, если новые параметры не применены.
  "terminal.integrated.autoReplies": {},

  // Количество миллисекунд, в течение которого на вкладке терминала отображается колокольчик при ее запуске.
  "terminal.integrated.bellDuration": 1000,

  // Набор идентификаторов команд, настраиваемые сочетания клавиш которых не будут передаваться в оболочку, а вместо этого будут всегда обрабатываться VS Code. Это позволяет использовать настраиваемые сочетания клавиш, которые при обычных условиях были бы использованы оболочкой и работали бы также, как если бы терминал не имел фокуса, например, клавиши "CTRL+P" запускали бы Quick Open.
  //
  // &nbsp;
  //
  // Многие команды по умолчанию пропускаются. Чтобы переопределить значение по умолчанию и передать настраиваемое сочетание клавиш этой команды в оболочку, добавьте команду с префиксом "-". Например, добавьте "-workbench.action.quickOpen", чтобы сочетание клавиш "CTRL+P" было направлено в оболочку.
  //
  // &nbsp;
  //
  // Следующий список команд, пропускаемых по умолчанию, обрезается при просмотре в Редакторе параметров. Чтобы просмотреть полный список, [открыть файл JSON параметров по умолчанию](command:workbench.action.openRawDefaultSettings 'Открыть параметры по умолчанию (JSON)') и выполните поиск первой команды из списка ниже.
  //
  // &nbsp;
  //
  // Команды, пропускаемые по умолчанию:
  //
  // - editor.action.accessibilityHelp
  // - editor.action.toggleTabFocusMode
  // - notification.acceptPrimaryAction
  // - notifications.hideList
  // - notifications.hideToasts
  // - runCommands
  // - workbench.action.closeQuickOpen
  // - workbench.action.debug.continue
  // - workbench.action.debug.pause
  // - workbench.action.debug.restart
  // - workbench.action.debug.run
  // - workbench.action.debug.start
  // - workbench.action.debug.stepInto
  // - workbench.action.debug.stepOut
  // - workbench.action.debug.stepOver
  // - workbench.action.debug.stop
  // - workbench.action.firstEditorInGroup
  // - workbench.action.focusActiveEditorGroup
  // - workbench.action.focusEighthEditorGroup
  // - workbench.action.focusFifthEditorGroup
  // - workbench.action.focusFirstEditorGroup
  // - workbench.action.focusFourthEditorGroup
  // - workbench.action.focusLastEditorGroup
  // - workbench.action.focusNextPart
  // - workbench.action.focusPreviousPart
  // - workbench.action.focusSecondEditorGroup
  // - workbench.action.focusSeventhEditorGroup
  // - workbench.action.focusSixthEditorGroup
  // - workbench.action.focusThirdEditorGroup
  // - workbench.action.lastEditorInGroup
  // - workbench.action.navigateDown
  // - workbench.action.navigateLeft
  // - workbench.action.navigateRight
  // - workbench.action.navigateUp
  // - workbench.action.nextEditor
  // - workbench.action.nextEditorInGroup
  // - workbench.action.nextPanelView
  // - workbench.action.nextSideBarView
  // - workbench.action.openNextRecentlyUsedEditor
  // - workbench.action.openNextRecentlyUsedEditorInGroup
  // - workbench.action.openPreviousRecentlyUsedEditor
  // - workbench.action.openPreviousRecentlyUsedEditorInGroup
  // - workbench.action.previousEditor
  // - workbench.action.previousEditorInGroup
  // - workbench.action.previousPanelView
  // - workbench.action.previousSideBarView
  // - workbench.action.quickOpen
  // - workbench.action.quickOpenLeastRecentlyUsedEditor
  // - workbench.action.quickOpenLeastRecentlyUsedEditorInGroup
  // - workbench.action.quickOpenPreviousEditor
  // - workbench.action.quickOpenPreviousRecentlyUsedEditor
  // - workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup
  // - workbench.action.quickOpenView
  // - workbench.action.showCommands
  // - workbench.action.tasks.build
  // - workbench.action.tasks.reRunTask
  // - workbench.action.tasks.restartTask
  // - workbench.action.tasks.runTask
  // - workbench.action.tasks.showLog
  // - workbench.action.tasks.showTasks
  // - workbench.action.tasks.terminate
  // - workbench.action.tasks.test
  // - workbench.action.terminal.acceptSelectedSuggestion
  // - workbench.action.terminal.clear
  // - workbench.action.terminal.clearSelection
  // - workbench.action.terminal.copyAndClearSelection
  // - workbench.action.terminal.copyLastCommandOutput
  // - workbench.action.terminal.copySelection
  // - workbench.action.terminal.copySelectionAsHtml
  // - workbench.action.terminal.deleteToLineStart
  // - workbench.action.terminal.deleteWordLeft
  // - workbench.action.terminal.deleteWordRight
  // - workbench.action.terminal.findNext
  // - workbench.action.terminal.findPrevious
  // - workbench.action.terminal.focus
  // - workbench.action.terminal.focusAccessibleBuffer
  // - workbench.action.terminal.focusAtIndex1
  // - workbench.action.terminal.focusAtIndex2
  // - workbench.action.terminal.focusAtIndex3
  // - workbench.action.terminal.focusAtIndex4
  // - workbench.action.terminal.focusAtIndex5
  // - workbench.action.terminal.focusAtIndex6
  // - workbench.action.terminal.focusAtIndex7
  // - workbench.action.terminal.focusAtIndex8
  // - workbench.action.terminal.focusAtIndex9
  // - workbench.action.terminal.focusFind
  // - workbench.action.terminal.focusHover
  // - workbench.action.terminal.focusNext
  // - workbench.action.terminal.focusNextPane
  // - workbench.action.terminal.focusPrevious
  // - workbench.action.terminal.focusPreviousPane
  // - workbench.action.terminal.goToRecentDirectory
  // - workbench.action.terminal.hideFind
  // - workbench.action.terminal.hideSuggestWidget
  // - workbench.action.terminal.kill
  // - workbench.action.terminal.killEditor
  // - workbench.action.terminal.moveToEditor
  // - workbench.action.terminal.moveToLineEnd
  // - workbench.action.terminal.moveToLineStart
  // - workbench.action.terminal.moveToTerminalPanel
  // - workbench.action.terminal.new
  // - workbench.action.terminal.newInActiveWorkspace
  // - workbench.action.terminal.paste
  // - workbench.action.terminal.pasteSelection
  // - workbench.action.terminal.resizePaneDown
  // - workbench.action.terminal.resizePaneLeft
  // - workbench.action.terminal.resizePaneRight
  // - workbench.action.terminal.resizePaneUp
  // - workbench.action.terminal.runActiveFile
  // - workbench.action.terminal.runRecentCommand
  // - workbench.action.terminal.runSelectedText
  // - workbench.action.terminal.scrollDown
  // - workbench.action.terminal.scrollDownPage
  // - workbench.action.terminal.scrollToBottom
  // - workbench.action.terminal.scrollToNextCommand
  // - workbench.action.terminal.scrollToPreviousCommand
  // - workbench.action.terminal.scrollToTop
  // - workbench.action.terminal.scrollUp
  // - workbench.action.terminal.scrollUpPage
  // - workbench.action.terminal.selectAll
  // - workbench.action.terminal.selectNextPageSuggestion
  // - workbench.action.terminal.selectNextSuggestion
  // - workbench.action.terminal.selectPrevPageSuggestion
  // - workbench.action.terminal.selectPrevSuggestion
  // - workbench.action.terminal.selectToNextCommand
  // - workbench.action.terminal.selectToNextLine
  // - workbench.action.terminal.selectToPreviousCommand
  // - workbench.action.terminal.selectToPreviousLine
  // - workbench.action.terminal.sendSequence
  // - workbench.action.terminal.sizeToContentWidth
  // - workbench.action.terminal.split
  // - workbench.action.terminal.splitInActiveWorkspace
  // - workbench.action.terminal.toggleFindCaseSensitive
  // - workbench.action.terminal.toggleFindRegex
  // - workbench.action.terminal.toggleFindWholeWord
  // - workbench.action.terminal.toggleTerminal
  // - workbench.action.toggleFullScreen
  // - workbench.action.toggleMaximizedPanel
  // - workbench.action.togglePanel
  "terminal.integrated.commandsToSkipShell": [],

  // Определяет, следует ли подтверждать закрытие окна, если есть активные сеансы терминала.
  //  - never: Никогда не подтверждать.
  //  - always: Всегда проверять наличие терминалов.
  //  - hasChildProcesses: Проверить, есть ли в наличии терминалы с дочерними процессами.
  "terminal.integrated.confirmOnExit": "never",

  // Определяет, следует ли подтверждать завершение терминалов при наличии дочерних процессов. Если задано значение "редактор2, терминалы в области редактора будут помечены как измененные, если у них есть дочерние процессы. Обратите внимание, что обнаружение дочерних процессов может не работать должным образом для оболочек типа Git Bash, которые не запускают свои процессы как дочерние процессы оболочки.
  //  - never: Никогда не подтверждать.
  //  - editor: Проверить, находится ли терминал в редакторе.
  //  - panel: Проверить, находится ли терминал в панели.
  //  - always: Проверить, находится ли терминал в редакторе или панели.
  "terminal.integrated.confirmOnKill": "editor",

  // Определяет, будет ли выбранный в терминале текст скопирован в буфер обмена.
  "terminal.integrated.copyOnSelection": false,

  // Определяет, мигает ли курсор терминала.
  "terminal.integrated.cursorBlinking": false,

  // Управляет стилем курсора терминала.
  "terminal.integrated.cursorStyle": "block",

  // Controls the style of terminal cursor when the terminal is not focused.
  "terminal.integrated.cursorStyleInactive": "outline",

  // Управляет шириной курсора, если для `terminal.integrated.cursorStyle` установлено `line`.
  "terminal.integrated.cursorWidth": 1,

  // Определяет, рисовать ли настраиваемые глифы для блочных элементов и символов рамок вместо использования шрифта, что обычно улучшает отрисовку с непрерывными линиями. Обратите внимание, что это не работает, если `terminal.integrated.gpuAcceleration` отключено.
  "terminal.integrated.customGlyphs": true,

  // Путь явного запуска, по которому будет запущен терминал. Используется в качестве текущего рабочего каталога (cwd) для процесса оболочки. Это может быть особенно удобно в параметрах рабочей области, если корневой каталог не является подходящим каталогом cwd.
  "terminal.integrated.cwd": "",

  // Определяет место отображения новых терминалов.
  //  - editor: Создать терминалы в редакторе
  //  - view: Создать терминалы в представлении терминала
  "terminal.integrated.defaultLocation": "view",

  // Профиль терминала по умолчанию в Linux.
  "terminal.integrated.defaultProfile.linux": null,

  // Профиль терминала по умолчанию в macOS.
  "terminal.integrated.defaultProfile.osx": null,

  // Профиль терминала по умолчанию в Windows.
  //  - null: Автоматически определять значение по умолчанию
  //  - PowerShell: $(terminal-powershell) PowerShell
  // - path: C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
  //  - Windows PowerShell: $(terminal-powershell) Windows PowerShell
  // - path: C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
  //  - Git Bash: $(terminal) Git Bash
  // - path: C:\Program Files\Git\bin\bash.exe
  // - args: ['--login','-i']
  //  - Command Prompt: $(terminal-cmd) Command Prompt
  // - path: C:\Windows\System32\cmd.exe
  // - args: []
  //  - Терминал отладки JavaScript: $($(debug)) Терминал отладки JavaScript
  // - extensionIdentifier: ms-vscode.js-debug
  "terminal.integrated.defaultProfile.windows": null,

  // Определяет, следует ли обнаруживать и задавать переменную среды $LANG в соответствии с параметром, совместимым с UTF-8, так как терминал VS Code поддерживает поступающие из оболочки данные только в кодировке UTF-8.
  //  - auto: Задайте переменную среды $LANG, если существующая переменная не существует или не заканчивается на '.UTF-8'.
  //  - off: Не устанавливайте переменную среды $LANG.
  //  - on: Всегда устанавливайте переменную среды $LANG.
  "terminal.integrated.detectLocale": "auto",

  // Определяет, будет ли полужирный текст в терминале всегда использовать яркий вариант цвета ANSI.
  "terminal.integrated.drawBoldTextInBrightColors": true,

  // Определяет, включены ли звуковые оповещения в терминале. Это отображается в виде колокольчика рядом с именем терминала.
  "terminal.integrated.enableBell": false,

  // Указывает, следует ли включить ссылки на файлы в терминалах. Ссылки могут работать медленно при использовании сетевого диска, так как каждая ссылка на файл проверяется в файловой системе. Изменение вступит в силу только в новых терминалах.
  //  - off: Всегда отключено.
  //  - on: Всегда включено.
  //  - notRemote: Включить только в том случае, если не находится в удаленной рабочей области.
  "terminal.integrated.enableFileLinks": "on",

  // Включает поддержку изображений в терминале (только при включении `terminal.integrated.gpuAcceleration`). В Linux и macOS поддерживаются протоколы встроенных рисунков Sixel и iTerm. Поддержка в Windows автоматически активируется при прохождении ConPTY через последовательности. Изображения не будут восстанавливаться после перезагрузок/повторных подключений окна.
  "terminal.integrated.enableImages": false,

  // Отображайте диалоговое окно предупреждения при вставке нескольких строк в терминал. Диалоговое окно не отображается, когда:
  //
  // – Включен режим вставки в квадратных скобках (оболочка поддерживает многострочную вставку по умолчанию)
  // – Вставка обрабатывается строкой чтения оболочки (в случае pwsh)
  "terminal.integrated.enableMultiLinePasteWarning": true,

  // Сохранять сеансы или журнал терминалов для рабочей области при перезагрузке окна.
  "terminal.integrated.enablePersistentSessions": true,

  // Объект с переменными окружения, которые будут добавлены в процесс VS Code для использования терминалом в Linux. Задайте значение null, чтобы удалить переменную среды.
  "terminal.integrated.env.linux": {},

  // Объект с переменными окружения, которые будут добавлены в процесс VS Code для использования терминалом в macOS. Задайте значение null, чтобы удалить переменную среды.
  "terminal.integrated.env.osx": {},

  // Объект с переменными окружения, которые будут добавлены в процесс VS Code для использования терминалом в Windows. Задайте значение null, чтобы удалить переменную среды.
  "terminal.integrated.env.windows": {},

  // Указывает, следует ли отображать на каждом терминале индикатор изменений среды, который поясняет, внесли ли расширения изменения в среду терминала или собираются сделать это.
  //  - off: Отключение индикатора.
  //  - on: Включение индикатора.
  //  - warnonly: Показывать только индикатор предупреждения, если среда терминала является устаревшей, а не индикатор информации, показывающий терминал, среда которого была изменена расширением.
  "terminal.integrated.environmentChangesIndicator": "warnonly",

  // Следует ли автоматически запустить терминалы повторно, если расширение хочет внести вклад в их среду и с этим расширением еще не выполнялось взаимодействие
  "terminal.integrated.environmentChangesRelaunch": true,

  // Множитель скорости прокрутки при нажатии клавиши ALT.
  "terminal.integrated.fastScrollSensitivity": 5,

  // Controls whether the terminal, accessible buffer, or neither will be focused after `Terminal: Run Selected Text In Active Terminal` has been run.
  //  - terminal: Always focus the terminal.
  //  - accessible-buffer: Always focus the accessible buffer.
  //  - none: Do nothing.
  "terminal.integrated.focusAfterRun": "none",

  // Определяет семейство шрифтов терминала. Значение по умолчанию — `editor.fontFamily`.
  "terminal.integrated.fontFamily": "",

  // Управляет размером шрифта в пикселях для терминала.
  "terminal.integrated.fontSize": 14,

  // Насыщенность шрифта, используемая в терминале для текста, не являющегося полужирным. Допускаются ключевые слова "normal" и "bold", а также числа от 1 до 1000.
  "terminal.integrated.fontWeight": "normal",

  // Насыщенность шрифта, используемая в терминале для полужирного текста. Допускаются ключевые слова "normal" и "bold", а также числа от 1 до 1000.
  "terminal.integrated.fontWeightBold": "bold",

  // Определяет, будет ли терминал использовать GPU для отрисовки.
  //  - auto: Позвольте VS Code выбрать максимально эффективный отрисовщик.
  //  - on: Включить ускорение GPU в терминале.
  //  - off: Отключите ускорение GPU в терминале. Терминал будет выполнять преобразование для просмотра значительно медленнее, если ускорение графического процессора отключено, но должен надежно работать во всех системах.
  //  - canvas: Используйте резервный отрисовщик холста терминала, который применяет двухмерный контекст вместо webgl. Это может повысить производительность в некоторых системах. Обратите внимание, что некоторые функции в обработчике холста ограничены, например выбор непрозрачного варианта.
  "terminal.integrated.gpuAcceleration": "auto",

  // Whether to hide the terminal view on startup, avoiding creating a terminal when there are no persistent sessions.
  //  - never: Never hide the terminal view on startup.
  //  - whenEmpty: Only hide the terminal when there are no persistent sessions restored.
  //  - always: Always hide the terminal, even when there are persistent sessions restored.
  "terminal.integrated.hideOnStartup": "never",

  // Controls whether the terminal will ignore bracketed paste mode even if the terminal was put into the mode, omitting the `\x1b[200~` and `\x1b[201~` sequences when pasting. This is useful when the shell is not respecting the mode which can happen in sub-shells for example.
  "terminal.integrated.ignoreBracketedPasteMode": false,

  // Набор имен процессов, которые нужно игнорировать при использовании параметра `terminal.integrated.confirmOnKill`.
  "terminal.integrated.ignoreProcessNames": [
    "starship",
    "oh-my-posh",
    "bash",
    "zsh"
  ],

  // Должны ли новые оболочки наследовать свою среду от VS Code, который может попытаться получить оболочку входа для обеспечения инициализации $PATH и других переменных разработки. Это не влияет на Windows.
  "terminal.integrated.inheritEnv": true,

  // Определяет межбуквенный интервал терминала. Это целочисленное значение, представляющее количество дополнительных пикселей, которые будут добавляться между символами.
  "terminal.integrated.letterSpacing": 0,

  // Определяет высоту строки терминала. Это число умножается на размер шрифта терминала, что дает фактическую высоту строки в пикселях.
  "terminal.integrated.lineHeight": 1,

  // Если должно быть включено локальное эхо. Это переопределит `terminal.integrated.localEchoLatencyThreshold`
  //  - on: Всегда включено
  //  - off: Всегда отключено
  //  - auto: Включено только для удаленных рабочих областей
  "terminal.integrated.localEchoEnabled": "auto",

  // Локальный вывод будет отключен, если в названии терминала присутствуют какие-либо из этих имен программ.
  "terminal.integrated.localEchoExcludePrograms": ["vim", "vi", "nano", "tmux"],

  // Задержка сети в миллисекундах, при которой локальные изменения будут выводиться в терминале, не дожидаясь подтверждения сервера. При значении "0" локальный вывод всегда включен, при "-1" — отключен.
  "terminal.integrated.localEchoLatencyThreshold": 30,

  // Стиль локального вывода текста в терминале: начертание шрифта или цвет RGB.
  "terminal.integrated.localEchoStyle": "dim",

  // Определяет, следует ли принудительно выполнять выбор при использовании сочетания Option + щелчок в macOS. При этом будет принудительно использован обычный (строковый) выбор и запрещен режим выбора столбцов. Это позволяет копировать и вставлять с помощью обычного выбора в терминале, например когда режим мыши включен в tmux.
  "terminal.integrated.macOptionClickForcesSelection": false,

  // Определяет, следует ли рассматривать ключ параметра как метаключ в терминале под управлением macOS.
  "terminal.integrated.macOptionIsMeta": false,

  // Когда параметр установлен, цвет переднего плана каждой ячейки будет изменен для соблюдения указанного коэффициента контрастности. Обратите внимание, что этот параметр не применяется к символам `powerline` в соответствии с #146406. Примеры значений:
  //
  // — 1: ничего не делать, использовать стандартные цвета темы.
  // — 4.5: [соответствие WCAG AA (минимальное)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html) (по умолчанию).
  // — 7: [соответствие WCAG AAA (улучшенное)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast7.html).
  // — 21: белый на черном фоне или черный на белом фоне.
  "terminal.integrated.minimumContrastRatio": 4.5,

  // Множитель, используемый для deltaY событий прокрутки колесика мыши.
  "terminal.integrated.mouseWheelScrollSensitivity": 1,

  // Если необходимо завершить процесс терминала (например, при закрытии окна или приложения), этот параметр определяет, когда следует восстановить содержимое или журнал предыдущего сеанса терминала и повторно создать процессы при следующем открытии рабочей области.
  //
  // Пояснения:
  //
  // – Восстановление текущего рабочего каталога процесса зависит от того, поддерживается ли он оболочкой.
  // – Время хранения сеанса во время завершения работы ограничено, поэтому он может быть прерван, если используются удаленные подключения с большой задержкой.
  //  - onExit: Завершите процессы после закрытия последнего окна в Windows или Linux или при активации команды "workbench.action.quit" (палитра команд, настраиваемое сочетание клавиш, меню).
  //  - onExitAndWindowClose: Завершите процессы после закрытия последнего окна в Windows или Linux или при активации команды "workbench.action.quit" (палитра команд, настраиваемое сочетание клавиш, меню) или при закрытии окна.
  //  - never: Никогда не восстанавливать буферы терминалов и не воссоздавать процесс.
  "terminal.integrated.persistentSessionReviveProcess": "onExit",

  // Определяет максимальное количество строк, которое будет восстановлено при повторном подключении к постоянному сеансу терминала. Увеличение этого параметра приведет к восстановлению дополнительных строк прокрутки за счет увеличения объема памяти и увеличит время, необходимое для подключения к терминалам при запуске. Для вступления в силу этого параметра требуется перезагрузка. Параметру должно быть присвоено значение, меньшее или равное "#terminal.integrated.scrollback#".
  "terminal.integrated.persistentSessionScrollback": 100,

  // Набор настроек профиля терминала для Linux, позволяющий добавлять, удалять или изменять способ запуска терминалов. Профили состоят из обязательного пути, необязательных аргументов и других параметров представления.
  //
  // Для переопределения существующего профиля используйте имя этого профиля в качестве ключа, например:
  //
  // ```json
  // "terminal.integrated.profile.linux": {
  //   "bash": null
  // }
  // ```
  //
  // [Подробнее о настройке профилей](https://code.visualstudio.com/docs/terminal/profiles).
  "terminal.integrated.profiles.linux": {
    "bash": {
      "path": "bash",
      "icon": "terminal-bash"
    },
    "zsh": {
      "path": "zsh"
    },
    "fish": {
      "path": "fish"
    },
    "tmux": {
      "path": "tmux",
      "icon": "terminal-tmux"
    },
    "pwsh": {
      "path": "pwsh",
      "icon": "terminal-powershell"
    }
  },

  // Набор настроек профиля терминала для Mac, позволяющий добавлять, удалять или изменять способ запуска терминалов. Профили состоят из обязательного пути, необязательных аргументов и других параметров представления.
  //
  // Для переопределения существующего профиля используйте имя этого профиля в качестве ключа, например:
  //
  // ```json
  // "terminal.integrated.profile.osx": {
  //   "bash": null
  // }
  // ```
  //
  // [Подробнее о настройке профилей](https://code.visualstudio.com/docs/terminal/profiles).
  "terminal.integrated.profiles.osx": {
    "bash": {
      "path": "bash",
      "args": ["-l"],
      "icon": "terminal-bash"
    },
    "zsh": {
      "path": "zsh",
      "args": ["-l"]
    },
    "fish": {
      "path": "fish",
      "args": ["-l"]
    },
    "tmux": {
      "path": "tmux",
      "icon": "terminal-tmux"
    },
    "pwsh": {
      "path": "pwsh",
      "icon": "terminal-powershell"
    }
  },

  // Набор настроек профиля терминала для Windows, позволяющий добавлять, удалять или изменять способ запуска терминалов. Профили состоят из обязательного пути, необязательных аргументов и других параметров представления.
  //
  // Для переопределения существующего профиля используйте имя этого профиля в качестве ключа, например:
  //
  // ```json
  // "terminal.integrated.profile.windows": {
  //   "bash": null
  // }
  // ```
  //
  // [Подробнее о настройке профилей](https://code.visualstudio.com/docs/terminal/profiles).
  "terminal.integrated.profiles.windows": {
    "PowerShell": {
      "source": "PowerShell",
      "icon": "terminal-powershell"
    },
    "Command Prompt": {
      "path": [
        "${env:windir}\\Sysnative\\cmd.exe",
        "${env:windir}\\System32\\cmd.exe"
      ],
      "args": [],
      "icon": "terminal-cmd"
    },
    "Git Bash": {
      "source": "Git Bash"
    }
  },

  // Определяет, как терминал реагирует на щелчок правой кнопкой мыши.
  //  - default: Отображение контекстного меню.
  //  - copyPaste: Копирование при наличии выделенного фрагмента, в противном случае вставка.
  //  - paste: Вставка при щелчке правой кнопкой мыши.
  //  - selectWord: Выбор слова под курсором и отображение контекстного меню.
  //  - nothing: Не выполнять никаких действий и передавать событие в терминал.
  "terminal.integrated.rightClickBehavior": "copyPaste",

  // Определяет максимальное количество строк, которые терминал хранит в буфере. Мы предварительно выделяем память на основе этого значения, чтобы обеспечить бесперебойную работу. Таким образом, по мере увеличения значения будет увеличиваться и объем памяти.
  "terminal.integrated.scrollback": 1000,

  // Отправляет большинство настраиваемых сочетаний клавиш на терминал, а не в рабочую среду, переопределяя `terminal.integrated.commandsToSkipShell`, который можно альтернативно использовать для точной настройки.
  "terminal.integrated.sendKeybindingsToShell": false,

  // Если интеграция оболочки включена, добавляет оформление для каждой команды.
  //  - both: Показать оформление в переплете (слева) и обзорную линейку (справа)
  //  - gutter: Показать оформление переплета слева от терминала
  //  - overviewRuler: Показать оформление обзорной линейки справа от терминала
  //  - never: Не показывать оформление
  "terminal.integrated.shellIntegration.decorationsEnabled": "both",

  // Определяет, будет ли автоматически внедрена интеграция с оболочкой для поддержки таких функций, как расширенное отслеживание команд и обнаружение текущего рабочего каталога.
  //
  // Интеграция с оболочкой работает путем внедрения в оболочку сценария запуска. Сценарий передает VS Code сведения о том, что происходит в терминале.
  //
  // Поддерживаемые оболочки:
  //
  // – Linux/MacOS: bash, fish, pwsh, zsh
  //  – Windows: pwsh
  //
  // Этот параметр применяется только при создании терминалов, поэтому потребуется перезапустить терминалы, чтобы он вступил в силу.
  //
  //  Обратите внимание, что внедрение сценария может не работать, если вы определили пользовательские аргументы в профиле терминала, включили `editor.accessibilitySupport#`, используете [complex bash `PROMPT_COMMAND`](https://code.visualstudio.com/docs/editor/integrated-terminal#_complex-bash- promptcommand) или другие неподдерживаемые параметры. Чтобы отключить оформление, см. `#terminal.integrated.shellIntegrations.decorationsEnabled`
  "terminal.integrated.shellIntegration.enabled": true,

  // Управляет количеством недавно использованных команд, которые следует хранить в журнале команд терминала. Установите значение 0, чтобы отключить журнал команд.
  "terminal.integrated.shellIntegration.history": 100,

  // Включает экспериментальные предложения IntelliSense терминала для поддерживаемых оболочек, если для `terminal.integrated.shellIntegration.enabled` установлено значение `true`. Если интеграция оболочки установлена вручную, для `VSCODE_SUGGEST` необходимо настроить значение `1` перед вызовом сценария.
  "terminal.integrated.shellIntegration.suggestEnabled": false,

  // Определяет, следует ли показывать предупреждение "Процесс терминала завершен с кодом выхода", если код выхода не равен нулю.
  "terminal.integrated.showExitAlert": true,

  // Показывать ли наведение курсора на ссылки в выходных данных терминала.
  "terminal.integrated.showLinkHover": true,

  // Определяет, будет ли использоваться анимация при прокрутке содержимого терминала
  "terminal.integrated.smoothScrolling": false,

  // Управляет рабочим каталогом, с которого начинает работу разделенный терминал.
  //  - workspaceRoot: Новый разделенный терминал будет использовать корневую папку рабочей области в качестве рабочей папки. В рабочей области с несколькими корневыми папками предлагается выбрать используемую корневую папку.
  //  - initial: Новый разделенный терминал будет использовать рабочий каталог, с которого начал работу родительский терминал.
  //  - inherited: В macOS и Linux новый разделенный терминал будет использовать рабочий каталог родительского терминала. В Windows это поведение аналогично исходному.
  "terminal.integrated.splitCwd": "inherited",

  // Определяет, получает ли терминал вкладки или откладывает их на рабочее место для навигации. Если настроено, переопределяет `editor.tabFocusMode`, когда терминал находится в фокусе.
  "terminal.integrated.tabFocusMode": null,

  // Идентификатор цвета темы, связывающийся по умолчанию со значками терминала.
  "terminal.integrated.tabs.defaultColor": null,

  // Идентификатор codicon, связывающийся по умолчанию со значками терминалов.
  //  - add: $(add)
  //  - plus: $(plus)
  //  - gist-new: $(gist-new)
  //  - repo-create: $(repo-create)
  //  - lightbulb: $(lightbulb)
  //  - light-bulb: $(light-bulb)
  //  - repo: $(repo)
  //  - repo-delete: $(repo-delete)
  //  - gist-fork: $(gist-fork)
  //  - repo-forked: $(repo-forked)
  //  - git-pull-request: $(git-pull-request)
  //  - git-pull-request-abandoned: $(git-pull-request-abandoned)
  //  - record-keys: $(record-keys)
  //  - keyboard: $(keyboard)
  //  - tag: $(tag)
  //  - tag-add: $(tag-add)
  //  - tag-remove: $(tag-remove)
  //  - git-pull-request-label: $(git-pull-request-label)
  //  - person: $(person)
  //  - person-follow: $(person-follow)
  //  - person-outline: $(person-outline)
  //  - person-filled: $(person-filled)
  //  - git-branch: $(git-branch)
  //  - git-branch-create: $(git-branch-create)
  //  - git-branch-delete: $(git-branch-delete)
  //  - source-control: $(source-control)
  //  - mirror: $(mirror)
  //  - mirror-public: $(mirror-public)
  //  - star: $(star)
  //  - star-add: $(star-add)
  //  - star-delete: $(star-delete)
  //  - star-empty: $(star-empty)
  //  - comment: $(comment)
  //  - comment-add: $(comment-add)
  //  - alert: $(alert)
  //  - warning: $(warning)
  //  - search: $(search)
  //  - search-save: $(search-save)
  //  - log-out: $(log-out)
  //  - sign-out: $(sign-out)
  //  - log-in: $(log-in)
  //  - sign-in: $(sign-in)
  //  - eye: $(eye)
  //  - eye-unwatch: $(eye-unwatch)
  //  - eye-watch: $(eye-watch)
  //  - circle-filled: $(circle-filled)
  //  - primitive-dot: $(primitive-dot)
  //  - close-dirty: $(close-dirty)
  //  - debug-breakpoint: $(debug-breakpoint)
  //  - debug-breakpoint-disabled: $(debug-breakpoint-disabled)
  //  - debug-hint: $(debug-hint)
  //  - primitive-square: $(primitive-square)
  //  - edit: $(edit)
  //  - pencil: $(pencil)
  //  - info: $(info)
  //  - issue-opened: $(issue-opened)
  //  - gist-private: $(gist-private)
  //  - git-fork-private: $(git-fork-private)
  //  - lock: $(lock)
  //  - mirror-private: $(mirror-private)
  //  - close: $(close)
  //  - remove-close: $(remove-close)
  //  - x: $(x)
  //  - repo-sync: $(repo-sync)
  //  - sync: $(sync)
  //  - clone: $(clone)
  //  - desktop-download: $(desktop-download)
  //  - beaker: $(beaker)
  //  - microscope: $(microscope)
  //  - vm: $(vm)
  //  - device-desktop: $(device-desktop)
  //  - file: $(file)
  //  - file-text: $(file-text)
  //  - more: $(more)
  //  - ellipsis: $(ellipsis)
  //  - kebab-horizontal: $(kebab-horizontal)
  //  - mail-reply: $(mail-reply)
  //  - reply: $(reply)
  //  - organization: $(organization)
  //  - organization-filled: $(organization-filled)
  //  - organization-outline: $(organization-outline)
  //  - new-file: $(new-file)
  //  - file-add: $(file-add)
  //  - new-folder: $(new-folder)
  //  - file-directory-create: $(file-directory-create)
  //  - trash: $(trash)
  //  - trashcan: $(trashcan)
  //  - history: $(history)
  //  - clock: $(clock)
  //  - folder: $(folder)
  //  - file-directory: $(file-directory)
  //  - symbol-folder: $(symbol-folder)
  //  - logo-github: $(logo-github)
  //  - mark-github: $(mark-github)
  //  - github: $(github)
  //  - terminal: $(terminal)
  //  - console: $(console)
  //  - repl: $(repl)
  //  - zap: $(zap)
  //  - symbol-event: $(symbol-event)
  //  - error: $(error)
  //  - stop: $(stop)
  //  - variable: $(variable)
  //  - symbol-variable: $(symbol-variable)
  //  - array: $(array)
  //  - symbol-array: $(symbol-array)
  //  - symbol-module: $(symbol-module)
  //  - symbol-package: $(symbol-package)
  //  - symbol-namespace: $(symbol-namespace)
  //  - symbol-object: $(symbol-object)
  //  - symbol-method: $(symbol-method)
  //  - symbol-function: $(symbol-function)
  //  - symbol-constructor: $(symbol-constructor)
  //  - symbol-boolean: $(symbol-boolean)
  //  - symbol-null: $(symbol-null)
  //  - symbol-numeric: $(symbol-numeric)
  //  - symbol-number: $(symbol-number)
  //  - symbol-structure: $(symbol-structure)
  //  - symbol-struct: $(symbol-struct)
  //  - symbol-parameter: $(symbol-parameter)
  //  - symbol-type-parameter: $(symbol-type-parameter)
  //  - symbol-key: $(symbol-key)
  //  - symbol-text: $(symbol-text)
  //  - symbol-reference: $(symbol-reference)
  //  - go-to-file: $(go-to-file)
  //  - symbol-enum: $(symbol-enum)
  //  - symbol-value: $(symbol-value)
  //  - symbol-ruler: $(symbol-ruler)
  //  - symbol-unit: $(symbol-unit)
  //  - activate-breakpoints: $(activate-breakpoints)
  //  - archive: $(archive)
  //  - arrow-both: $(arrow-both)
  //  - arrow-down: $(arrow-down)
  //  - arrow-left: $(arrow-left)
  //  - arrow-right: $(arrow-right)
  //  - arrow-small-down: $(arrow-small-down)
  //  - arrow-small-left: $(arrow-small-left)
  //  - arrow-small-right: $(arrow-small-right)
  //  - arrow-small-up: $(arrow-small-up)
  //  - arrow-up: $(arrow-up)
  //  - bell: $(bell)
  //  - bold: $(bold)
  //  - book: $(book)
  //  - bookmark: $(bookmark)
  //  - debug-breakpoint-conditional-unverified: $(debug-breakpoint-conditional-unverified)
  //  - debug-breakpoint-conditional: $(debug-breakpoint-conditional)
  //  - debug-breakpoint-conditional-disabled: $(debug-breakpoint-conditional-disabled)
  //  - debug-breakpoint-data-unverified: $(debug-breakpoint-data-unverified)
  //  - debug-breakpoint-data: $(debug-breakpoint-data)
  //  - debug-breakpoint-data-disabled: $(debug-breakpoint-data-disabled)
  //  - debug-breakpoint-log-unverified: $(debug-breakpoint-log-unverified)
  //  - debug-breakpoint-log: $(debug-breakpoint-log)
  //  - debug-breakpoint-log-disabled: $(debug-breakpoint-log-disabled)
  //  - briefcase: $(briefcase)
  //  - broadcast: $(broadcast)
  //  - browser: $(browser)
  //  - bug: $(bug)
  //  - calendar: $(calendar)
  //  - case-sensitive: $(case-sensitive)
  //  - check: $(check)
  //  - checklist: $(checklist)
  //  - chevron-down: $(chevron-down)
  //  - drop-down-button: $(drop-down-button)
  //  - chevron-left: $(chevron-left)
  //  - chevron-right: $(chevron-right)
  //  - chevron-up: $(chevron-up)
  //  - chrome-close: $(chrome-close)
  //  - chrome-maximize: $(chrome-maximize)
  //  - chrome-minimize: $(chrome-minimize)
  //  - chrome-restore: $(chrome-restore)
  //  - circle: $(circle)
  //  - circle-outline: $(circle-outline)
  //  - debug-breakpoint-unverified: $(debug-breakpoint-unverified)
  //  - circle-slash: $(circle-slash)
  //  - circuit-board: $(circuit-board)
  //  - clear-all: $(clear-all)
  //  - clippy: $(clippy)
  //  - close-all: $(close-all)
  //  - cloud-download: $(cloud-download)
  //  - cloud-upload: $(cloud-upload)
  //  - code: $(code)
  //  - collapse-all: $(collapse-all)
  //  - color-mode: $(color-mode)
  //  - comment-discussion: $(comment-discussion)
  //  - compare-changes: $(compare-changes)
  //  - credit-card: $(credit-card)
  //  - dash: $(dash)
  //  - dashboard: $(dashboard)
  //  - database: $(database)
  //  - debug-continue: $(debug-continue)
  //  - debug-disconnect: $(debug-disconnect)
  //  - debug-pause: $(debug-pause)
  //  - debug-restart: $(debug-restart)
  //  - debug-start: $(debug-start)
  //  - debug-step-into: $(debug-step-into)
  //  - debug-step-out: $(debug-step-out)
  //  - debug-step-over: $(debug-step-over)
  //  - debug-stop: $(debug-stop)
  //  - debug: $(debug)
  //  - device-camera-video: $(device-camera-video)
  //  - device-camera: $(device-camera)
  //  - device-mobile: $(device-mobile)
  //  - diff-added: $(diff-added)
  //  - diff-ignored: $(diff-ignored)
  //  - diff-modified: $(diff-modified)
  //  - diff-removed: $(diff-removed)
  //  - diff-renamed: $(diff-renamed)
  //  - diff: $(diff)
  //  - discard: $(discard)
  //  - editor-layout: $(editor-layout)
  //  - empty-window: $(empty-window)
  //  - exclude: $(exclude)
  //  - extensions: $(extensions)
  //  - eye-closed: $(eye-closed)
  //  - file-binary: $(file-binary)
  //  - file-code: $(file-code)
  //  - file-media: $(file-media)
  //  - file-pdf: $(file-pdf)
  //  - file-submodule: $(file-submodule)
  //  - file-symlink-directory: $(file-symlink-directory)
  //  - file-symlink-file: $(file-symlink-file)
  //  - file-zip: $(file-zip)
  //  - files: $(files)
  //  - filter: $(filter)
  //  - flame: $(flame)
  //  - fold-down: $(fold-down)
  //  - fold-up: $(fold-up)
  //  - fold: $(fold)
  //  - folder-active: $(folder-active)
  //  - folder-opened: $(folder-opened)
  //  - gear: $(gear)
  //  - gift: $(gift)
  //  - gist-secret: $(gist-secret)
  //  - gist: $(gist)
  //  - git-commit: $(git-commit)
  //  - git-compare: $(git-compare)
  //  - git-merge: $(git-merge)
  //  - github-action: $(github-action)
  //  - github-alt: $(github-alt)
  //  - globe: $(globe)
  //  - grabber: $(grabber)
  //  - graph: $(graph)
  //  - gripper: $(gripper)
  //  - heart: $(heart)
  //  - home: $(home)
  //  - horizontal-rule: $(horizontal-rule)
  //  - hubot: $(hubot)
  //  - inbox: $(inbox)
  //  - issue-closed: $(issue-closed)
  //  - issue-reopened: $(issue-reopened)
  //  - issues: $(issues)
  //  - italic: $(italic)
  //  - jersey: $(jersey)
  //  - json: $(json)
  //  - bracket: $(bracket)
  //  - kebab-vertical: $(kebab-vertical)
  //  - key: $(key)
  //  - law: $(law)
  //  - lightbulb-autofix: $(lightbulb-autofix)
  //  - link-external: $(link-external)
  //  - link: $(link)
  //  - list-ordered: $(list-ordered)
  //  - list-unordered: $(list-unordered)
  //  - live-share: $(live-share)
  //  - loading: $(loading)
  //  - location: $(location)
  //  - mail-read: $(mail-read)
  //  - mail: $(mail)
  //  - markdown: $(markdown)
  //  - megaphone: $(megaphone)
  //  - mention: $(mention)
  //  - milestone: $(milestone)
  //  - git-pull-request-milestone: $(git-pull-request-milestone)
  //  - mortar-board: $(mortar-board)
  //  - move: $(move)
  //  - multiple-windows: $(multiple-windows)
  //  - mute: $(mute)
  //  - no-newline: $(no-newline)
  //  - note: $(note)
  //  - octoface: $(octoface)
  //  - open-preview: $(open-preview)
  //  - package: $(package)
  //  - paintcan: $(paintcan)
  //  - pin: $(pin)
  //  - play: $(play)
  //  - run: $(run)
  //  - plug: $(plug)
  //  - preserve-case: $(preserve-case)
  //  - preview: $(preview)
  //  - project: $(project)
  //  - pulse: $(pulse)
  //  - question: $(question)
  //  - quote: $(quote)
  //  - radio-tower: $(radio-tower)
  //  - reactions: $(reactions)
  //  - references: $(references)
  //  - refresh: $(refresh)
  //  - regex: $(regex)
  //  - remote-explorer: $(remote-explorer)
  //  - remote: $(remote)
  //  - remove: $(remove)
  //  - replace-all: $(replace-all)
  //  - replace: $(replace)
  //  - repo-clone: $(repo-clone)
  //  - repo-force-push: $(repo-force-push)
  //  - repo-pull: $(repo-pull)
  //  - repo-push: $(repo-push)
  //  - report: $(report)
  //  - request-changes: $(request-changes)
  //  - rocket: $(rocket)
  //  - root-folder-opened: $(root-folder-opened)
  //  - root-folder: $(root-folder)
  //  - rss: $(rss)
  //  - ruby: $(ruby)
  //  - save-all: $(save-all)
  //  - save-as: $(save-as)
  //  - save: $(save)
  //  - screen-full: $(screen-full)
  //  - screen-normal: $(screen-normal)
  //  - search-stop: $(search-stop)
  //  - server: $(server)
  //  - settings-gear: $(settings-gear)
  //  - settings: $(settings)
  //  - shield: $(shield)
  //  - smiley: $(smiley)
  //  - sort-precedence: $(sort-precedence)
  //  - split-horizontal: $(split-horizontal)
  //  - split-vertical: $(split-vertical)
  //  - squirrel: $(squirrel)
  //  - star-full: $(star-full)
  //  - star-half: $(star-half)
  //  - symbol-class: $(symbol-class)
  //  - symbol-color: $(symbol-color)
  //  - symbol-customcolor: $(symbol-customcolor)
  //  - symbol-constant: $(symbol-constant)
  //  - symbol-enum-member: $(symbol-enum-member)
  //  - symbol-field: $(symbol-field)
  //  - symbol-file: $(symbol-file)
  //  - symbol-interface: $(symbol-interface)
  //  - symbol-keyword: $(symbol-keyword)
  //  - symbol-misc: $(symbol-misc)
  //  - symbol-operator: $(symbol-operator)
  //  - symbol-property: $(symbol-property)
  //  - wrench: $(wrench)
  //  - wrench-subaction: $(wrench-subaction)
  //  - symbol-snippet: $(symbol-snippet)
  //  - tasklist: $(tasklist)
  //  - telescope: $(telescope)
  //  - text-size: $(text-size)
  //  - three-bars: $(three-bars)
  //  - thumbsdown: $(thumbsdown)
  //  - thumbsup: $(thumbsup)
  //  - tools: $(tools)
  //  - triangle-down: $(triangle-down)
  //  - triangle-left: $(triangle-left)
  //  - triangle-right: $(triangle-right)
  //  - triangle-up: $(triangle-up)
  //  - twitter: $(twitter)
  //  - unfold: $(unfold)
  //  - unlock: $(unlock)
  //  - unmute: $(unmute)
  //  - unverified: $(unverified)
  //  - verified: $(verified)
  //  - versions: $(versions)
  //  - vm-active: $(vm-active)
  //  - vm-outline: $(vm-outline)
  //  - vm-running: $(vm-running)
  //  - watch: $(watch)
  //  - whitespace: $(whitespace)
  //  - whole-word: $(whole-word)
  //  - window: $(window)
  //  - word-wrap: $(word-wrap)
  //  - zoom-in: $(zoom-in)
  //  - zoom-out: $(zoom-out)
  //  - list-filter: $(list-filter)
  //  - list-flat: $(list-flat)
  //  - list-selection: $(list-selection)
  //  - selection: $(selection)
  //  - list-tree: $(list-tree)
  //  - debug-breakpoint-function-unverified: $(debug-breakpoint-function-unverified)
  //  - debug-breakpoint-function: $(debug-breakpoint-function)
  //  - debug-breakpoint-function-disabled: $(debug-breakpoint-function-disabled)
  //  - debug-stackframe-active: $(debug-stackframe-active)
  //  - circle-small-filled: $(circle-small-filled)
  //  - debug-stackframe-dot: $(debug-stackframe-dot)
  //  - debug-stackframe: $(debug-stackframe)
  //  - debug-stackframe-focused: $(debug-stackframe-focused)
  //  - debug-breakpoint-unsupported: $(debug-breakpoint-unsupported)
  //  - symbol-string: $(symbol-string)
  //  - debug-reverse-continue: $(debug-reverse-continue)
  //  - debug-step-back: $(debug-step-back)
  //  - debug-restart-frame: $(debug-restart-frame)
  //  - call-incoming: $(call-incoming)
  //  - call-outgoing: $(call-outgoing)
  //  - menu: $(menu)
  //  - expand-all: $(expand-all)
  //  - feedback: $(feedback)
  //  - git-pull-request-reviewer: $(git-pull-request-reviewer)
  //  - group-by-ref-type: $(group-by-ref-type)
  //  - ungroup-by-ref-type: $(ungroup-by-ref-type)
  //  - account: $(account)
  //  - git-pull-request-assignee: $(git-pull-request-assignee)
  //  - bell-dot: $(bell-dot)
  //  - debug-console: $(debug-console)
  //  - library: $(library)
  //  - output: $(output)
  //  - run-all: $(run-all)
  //  - sync-ignored: $(sync-ignored)
  //  - pinned: $(pinned)
  //  - github-inverted: $(github-inverted)
  //  - debug-alt: $(debug-alt)
  //  - server-process: $(server-process)
  //  - server-environment: $(server-environment)
  //  - pass: $(pass)
  //  - stop-circle: $(stop-circle)
  //  - play-circle: $(play-circle)
  //  - record: $(record)
  //  - debug-alt-small: $(debug-alt-small)
  //  - vm-connect: $(vm-connect)
  //  - cloud: $(cloud)
  //  - merge: $(merge)
  //  - export: $(export)
  //  - graph-left: $(graph-left)
  //  - magnet: $(magnet)
  //  - notebook: $(notebook)
  //  - redo: $(redo)
  //  - check-all: $(check-all)
  //  - pinned-dirty: $(pinned-dirty)
  //  - pass-filled: $(pass-filled)
  //  - circle-large-filled: $(circle-large-filled)
  //  - circle-large: $(circle-large)
  //  - circle-large-outline: $(circle-large-outline)
  //  - combine: $(combine)
  //  - gather: $(gather)
  //  - table: $(table)
  //  - variable-group: $(variable-group)
  //  - type-hierarchy: $(type-hierarchy)
  //  - type-hierarchy-sub: $(type-hierarchy-sub)
  //  - type-hierarchy-super: $(type-hierarchy-super)
  //  - git-pull-request-create: $(git-pull-request-create)
  //  - run-above: $(run-above)
  //  - run-below: $(run-below)
  //  - notebook-template: $(notebook-template)
  //  - debug-rerun: $(debug-rerun)
  //  - workspace-trusted: $(workspace-trusted)
  //  - workspace-untrusted: $(workspace-untrusted)
  //  - workspace-unspecified: $(workspace-unspecified)
  //  - terminal-cmd: $(terminal-cmd)
  //  - terminal-debian: $(terminal-debian)
  //  - terminal-linux: $(terminal-linux)
  //  - terminal-powershell: $(terminal-powershell)
  //  - terminal-tmux: $(terminal-tmux)
  //  - terminal-ubuntu: $(terminal-ubuntu)
  //  - terminal-bash: $(terminal-bash)
  //  - arrow-swap: $(arrow-swap)
  //  - copy: $(copy)
  //  - person-add: $(person-add)
  //  - filter-filled: $(filter-filled)
  //  - wand: $(wand)
  //  - debug-line-by-line: $(debug-line-by-line)
  //  - inspect: $(inspect)
  //  - layers: $(layers)
  //  - layers-dot: $(layers-dot)
  //  - layers-active: $(layers-active)
  //  - compass: $(compass)
  //  - compass-dot: $(compass-dot)
  //  - compass-active: $(compass-active)
  //  - azure: $(azure)
  //  - issue-draft: $(issue-draft)
  //  - git-pull-request-closed: $(git-pull-request-closed)
  //  - git-pull-request-draft: $(git-pull-request-draft)
  //  - debug-all: $(debug-all)
  //  - debug-coverage: $(debug-coverage)
  //  - run-errors: $(run-errors)
  //  - folder-library: $(folder-library)
  //  - debug-continue-small: $(debug-continue-small)
  //  - beaker-stop: $(beaker-stop)
  //  - graph-line: $(graph-line)
  //  - graph-scatter: $(graph-scatter)
  //  - pie-chart: $(pie-chart)
  //  - bracket-dot: $(bracket-dot)
  //  - bracket-error: $(bracket-error)
  //  - lock-small: $(lock-small)
  //  - azure-devops: $(azure-devops)
  //  - verified-filled: $(verified-filled)
  //  - newline: $(newline)
  //  - layout: $(layout)
  //  - layout-activitybar-left: $(layout-activitybar-left)
  //  - layout-activitybar-right: $(layout-activitybar-right)
  //  - layout-panel-left: $(layout-panel-left)
  //  - layout-panel-center: $(layout-panel-center)
  //  - layout-panel-justify: $(layout-panel-justify)
  //  - layout-panel-right: $(layout-panel-right)
  //  - layout-panel: $(layout-panel)
  //  - layout-sidebar-left: $(layout-sidebar-left)
  //  - layout-sidebar-right: $(layout-sidebar-right)
  //  - layout-statusbar: $(layout-statusbar)
  //  - layout-menubar: $(layout-menubar)
  //  - layout-centered: $(layout-centered)
  //  - layout-sidebar-right-off: $(layout-sidebar-right-off)
  //  - layout-panel-off: $(layout-panel-off)
  //  - layout-sidebar-left-off: $(layout-sidebar-left-off)
  //  - target: $(target)
  //  - indent: $(indent)
  //  - record-small: $(record-small)
  //  - error-small: $(error-small)
  //  - arrow-circle-down: $(arrow-circle-down)
  //  - arrow-circle-left: $(arrow-circle-left)
  //  - arrow-circle-right: $(arrow-circle-right)
  //  - arrow-circle-up: $(arrow-circle-up)
  //  - heart-filled: $(heart-filled)
  //  - map: $(map)
  //  - map-filled: $(map-filled)
  //  - circle-small: $(circle-small)
  //  - bell-slash: $(bell-slash)
  //  - bell-slash-dot: $(bell-slash-dot)
  //  - comment-unresolved: $(comment-unresolved)
  //  - git-pull-request-go-to-changes: $(git-pull-request-go-to-changes)
  //  - git-pull-request-new-changes: $(git-pull-request-new-changes)
  //  - search-fuzzy: $(search-fuzzy)
  //  - comment-draft: $(comment-draft)
  //  - send: $(send)
  //  - sparkle: $(sparkle)
  //  - insert: $(insert)
  //  - mic: $(mic)
  //  - dialog-error: $(dialog-error)
  //  - dialog-warning: $(dialog-warning)
  //  - dialog-info: $(dialog-info)
  //  - dialog-close: $(dialog-close)
  //  - tree-item-expanded: $(tree-item-expanded)
  //  - tree-filter-on-type-on: $(tree-filter-on-type-on)
  //  - tree-filter-on-type-off: $(tree-filter-on-type-off)
  //  - tree-filter-clear: $(tree-filter-clear)
  //  - tree-item-loading: $(tree-item-loading)
  //  - menu-selection: $(menu-selection)
  //  - menu-submenu: $(menu-submenu)
  //  - menubar-more: $(menubar-more)
  //  - scrollbar-button-left: $(scrollbar-button-left)
  //  - scrollbar-button-right: $(scrollbar-button-right)
  //  - scrollbar-button-up: $(scrollbar-button-up)
  //  - scrollbar-button-down: $(scrollbar-button-down)
  //  - toolbar-more: $(toolbar-more)
  //  - quick-input-back: $(quick-input-back)
  "terminal.integrated.tabs.defaultIcon": "terminal",

  // Управляет описанием терминала, которое отображается справа от заголовка. Переменные заменяются в зависимости от контекста:
  // - `${cwd}`: текущая рабочая папка терминала
  // - `${cwdFolder}`: текущая рабочая папка терминала, отображаемая для рабочих областей с несколькими корнями или в рабочей области с одним корневым каталогом, если значение отличается от исходной рабочей папки. В Windows это будет отображаться только при включенной интеграции оболочки.
  // - `${workspaceFolder}`: рабочая область, в которой был запущен терминал
  // - `${local}`: указывает локальный терминал в удаленной рабочей области
  // - `${process}`: имя процесса терминала
  // - `${separator}`: условный разделитель (` - `), отображаемый только в окружении переменных со значениями или статического текста.
  // - `${sequence}`: имя, предоставленное терминалу процессом
  // - `${task}`: указывает, что этот терминал связан с задачей
  "terminal.integrated.tabs.description": "${task}${separator}${local}${separator}${cwdFolder}",

  // Определяет, поддерживают ли состояния вкладки терминала анимацию (например, незавершенные задачи).
  "terminal.integrated.tabs.enableAnimation": true,

  // Определяет, отображаются ли вкладки терминала в виде списка сбоку от терминала. Если этот параметр отключен, вместо него отображается раскрывающийся список..
  "terminal.integrated.tabs.enabled": true,

  // Определяет, происходит ли фокусировка на терминале вкладки при двойном или одинарном щелчке.
  //  - singleClick: Фокус на терминале при щелчке по вкладке терминала
  //  - doubleClick: Фокус на терминале при двойном щелчке по вкладке терминала
  "terminal.integrated.tabs.focusMode": "doubleClick",

  // Определяет, будет ли скрыто представление вкладок терминала при определенных условиях.
  //  - never: Никогда не скрывать представление вкладок терминала
  //  - singleTerminal: Скрыть представление вкладок терминала, если открыт только один терминал
  //  - singleGroup: Скрыть представление вкладок терминала, если открыта только одна группа терминалов
  "terminal.integrated.tabs.hideCondition": "singleTerminal",

  // Управляет расположением вкладок терминала в левой или правой части реальных терминалов.
  //  - left: Показать представление вкладок терминала слева от терминала
  //  - right: Показать представление вкладок терминала справа от терминала
  "terminal.integrated.tabs.location": "right",

  // Разделитель, используемый `terminal.integrated.tabs.title` и `terminal.integrated.tabs.title`.
  "terminal.integrated.tabs.separator": " - ",

  // Определяет, отображаются ли кнопки "Разделить" и "Завершить" рядом с кнопкой "Новый терминал".
  //  - always: Всегда показывать действия
  //  - singleTerminal: Показать действия, если это единственный открытый терминал
  //  - singleTerminalOrNarrow: Показать действия, если это единственный открытый терминал или если представление вкладок компактное и без текста
  //  - never: Никогда не показывать действия
  "terminal.integrated.tabs.showActions": "singleTerminalOrNarrow",

  // Отображает сведения об активном терминале в представлении. Это особенно полезно, если заголовки не видны на вкладках.
  //  - always: Всегда показывать активный терминал
  //  - singleTerminal: Показать активный терминал, когда это единственный открытый терминал
  //  - singleTerminalOrNarrow: Показать активный терминал, когда это единственный открытый терминал или если представление вкладок находится в узком состоянии без текста
  //  - never: Никогда не показывать активный терминал
  "terminal.integrated.tabs.showActiveTerminal": "singleTerminalOrNarrow",

  // Управляет названием терминала. Переменные заменяются в зависимости от контекста:
  // - `${cwd}`: текущая рабочая папка терминала
  // - `${cwdFolder}`: текущая рабочая папка терминала, отображаемая для рабочих областей с несколькими корнями или в рабочей области с одним корневым каталогом, если значение отличается от исходной рабочей папки. В Windows это будет отображаться только при включенной интеграции оболочки.
  // - `${workspaceFolder}`: рабочая область, в которой был запущен терминал
  // - `${local}`: указывает локальный терминал в удаленной рабочей области
  // - `${process}`: имя процесса терминала
  // - `${separator}`: условный разделитель (` - `), отображаемый только в окружении переменных со значениями или статического текста.
  // - `${sequence}`: имя, предоставленное терминалу процессом
  // - `${task}`: указывает, что этот терминал связан с задачей
  "terminal.integrated.tabs.title": "${process}",

  // Число ячеек в позиции табуляции.
  "terminal.integrated.tabStopWidth": 8,

  // Определяет, какую версию Юникода использовать для вычисления ширины символов в терминале. Если вы столкнетесь с тем, что эмодзи или другие расширенные символы занимают больше выделенного места либо клавиша BACKSPACE удаляет слишком мало или слишком много данных, попробуйте настроить этот параметр.
  //  - 6: Юникод версии 6. Это старая версия, которая должна лучше работать на старых системах.
  //  - 11: Юникод версии 11. Эта версия обеспечивает улучшенную поддержку современных систем, использующих современные версии Юникода.
  "terminal.integrated.unicodeVersion": "11",

  // Определяет, отображаются ли дистрибутивы WSL в раскрывающемся списке терминала
  "terminal.integrated.useWslProfiles": true,

  // Указывает, следует ли использовать ConPTY для взаимодействия процессов терминала Windows (требуется Windows 10 с номером сборки 18309 или более поздним). Если задано значение false, будет использоваться Winpty.
  "terminal.integrated.windowsEnableConpty": true,

  // Строка, содержащая все символы, которые будут считаться разделителями слов при двойном щелчке для выбора слова и при обнаружении резервной ссылки "слово". Поскольку это используется для обнаружения ссылок, включение таких символов, как ":", которые используются при обнаружении ссылок, приведет к игнорированию строк и столбцов ссылок, таких как "file:10:5".
  "terminal.integrated.wordSeparators": " ()[]{}',\"`─‘’|",

  // Включите автоматические задачи — обратите внимание, что задачи не будут выполняться в ненадежной рабочей области.
  //  - on: Всегда
  //  - off: Никогда
  "task.allowAutomaticTasks": "on",

  // Управляет включением "provideTasks" для расширения всех поставщиков задач. Если команда "Задачи: выполнить задачу" выполняется медленно, возможно, поможет отключение автоопределения поставщиков задач. Отдельные расширения также могут предоставлять параметры, отключающие автоопределение.
  "task.autoDetect": "on",

  // Определяет, следует ли запрашивать подтверждение от средства сопоставления проблем при выполнении задачи. Установите значение "true", чтобы никогда не запрашивать подтверждение, или используйте словарь типов задач, чтобы отключить запрос подтверждения только для определенных типов задач.
  "task.problemMatchers.neverPrompt": false,

  // Определяет, следует ли отображать сведения о задачах, для которых указаны сведения в меню быстрого выбора, например, "Выполнить задачу".
  "task.quickOpen.detail": true,

  // Определяет число недавно отслеживаемых элементов в диалоговом окне быстрого открытия задач.
  "task.quickOpen.history": 30,

  // Вынуждает команду "Задачи: выполнение задачи" использовать менее быстрый подход "Показать все" вместо более быстрого двухуровневого выбора, при котором задачи группируются по поставщику.
  "task.quickOpen.showAll": false,

  // Определяет, пропускается ли меню быстрого выбора задачи при наличии всего одной задачи.
  "task.quickOpen.skip": false,

  // При перезагрузке окна повторно подключитесь к задачам, у которых есть сопоставители проблем.
  "task.reconnection": true,

  // Сохраните все грязные редакторы перед выполнением задачи.
  //  - always: Всегда сохраняет все редакторы перед выполнением.
  //  - never: Никогда не сохраняет редакторы перед выполнением.
  //  - prompt: Спрашивает, нужно ли сохранять редакторы перед запуском.
  "task.saveBeforeRun": "always",

  // Указывает, отображается ли уведомление, когда поставщик работает медленно
  "task.slowProviderWarning": true,

  // Когда этот параметр включен, для медленных отрисовщиков автоматически применяется профилирование
  "application.experimental.rendererProfiling": false,

  // Определяет, следует ли представлению "Проблемы" отображать файлы при их открытии.
  "problems.autoReveal": true,

  // Отображение ошибок и предупреждений для файлов и папки.
  "problems.decorations.enabled": true,

  // Выбор режима отображения по умолчанию для представления "Проблемы".
  "problems.defaultViewMode": "tree",

  // Если этот параметр установлен, в строке состояния отображается текущая проблема.
  "problems.showCurrentInStatus": false,

  // Определяет порядок представления проблем.
  //  - severity: Навигация по проблемам, упорядоченным по уровню серьезности
  //  - position: Навигация по проблемам, упорядоченным по позиции
  "problems.sortOrder": "severity",

  // Включение/отключение иерархической навигации.
  "breadcrumbs.enabled": true,

  // Управляет тем, как пути к файлам отображаются в представлении навигации.
  //  - on: Отображать путь к файлу в представлении навигации.
  //  - off: Не отображать путь к файлу в представлении навигации.
  //  - last: Отображать только последний элемент пути к файлу в представлении навигации.
  "breadcrumbs.filePath": "on",

  // Отображать элементы навигации со значками.
  "breadcrumbs.icons": true,

  // Когда параметр включен, в элементах навигации отображаются символы "array".
  "breadcrumbs.showArrays": true,

  // Когда параметр включен, в элементах навигации отображаются символы "boolean".
  "breadcrumbs.showBooleans": true,

  // Когда параметр включен, в элементах навигации отображаются символы "class".
  "breadcrumbs.showClasses": true,

  // Когда параметр включен, в элементах навигации отображаются символы "constant".
  "breadcrumbs.showConstants": true,

  // Когда параметр включен, в элементах навигации отображаются символы "constructor".
  "breadcrumbs.showConstructors": true,

  // Когда параметр включен, в элементах навигации отображаются символы "enumMember".
  "breadcrumbs.showEnumMembers": true,

  // Когда параметр включен, в элементах навигации отображаются символы "enum".
  "breadcrumbs.showEnums": true,

  // Когда параметр включен, в элементах навигации отображаются символы "event".
  "breadcrumbs.showEvents": true,

  // Когда параметр включен, в элементах навигации отображаются символы "field".
  "breadcrumbs.showFields": true,

  // Когда параметр включен, в элементах навигации отображаются символы "file".
  "breadcrumbs.showFiles": true,

  // Когда параметр включен, в элементах навигации отображаются символы "function".
  "breadcrumbs.showFunctions": true,

  // Когда параметр включен, в элементах навигации отображаются символы "interface".
  "breadcrumbs.showInterfaces": true,

  // Когда параметр включен, в элементах навигации отображаются символы "key".
  "breadcrumbs.showKeys": true,

  // Когда параметр включен, в элементах навигации отображаются символы "method".
  "breadcrumbs.showMethods": true,

  // Когда параметр включен, в элементах навигации отображаются символы "module".
  "breadcrumbs.showModules": true,

  // Когда параметр включен, в элементах навигации отображаются символы "namespace".
  "breadcrumbs.showNamespaces": true,

  // Когда параметр включен, в элементах навигации отображаются символы "null".
  "breadcrumbs.showNull": true,

  // Когда параметр включен, в элементах навигации отображаются символы "number".
  "breadcrumbs.showNumbers": true,

  // Когда параметр включен, в элементах навигации отображаются символы "object".
  "breadcrumbs.showObjects": true,

  // Когда параметр включен, в элементах навигации отображаются символы "operator".
  "breadcrumbs.showOperators": true,

  // Когда параметр включен, в элементах навигации отображаются символы "package".
  "breadcrumbs.showPackages": true,

  // Когда параметр включен, в элементах навигации отображаются символы "property".
  "breadcrumbs.showProperties": true,

  // Когда параметр включен, в элементах навигации отображаются символы "string".
  "breadcrumbs.showStrings": true,

  // Когда параметр включен, в элементах навигации отображаются символы "struct".
  "breadcrumbs.showStructs": true,

  // Когда параметр включен, в элементах навигации отображаются символы "typeParameter".
  "breadcrumbs.showTypeParameters": true,

  // Когда параметр включен, в элементах навигации отображаются символы "variable".
  "breadcrumbs.showVariables": true,

  // Управляет тем, как символы отображаются в представлении навигации.
  //  - on: Отображать все символы в представлении навигации.
  //  - off: Не отображать символы в представлении навигации.
  //  - last: Отображать только текущий символ в представлении навигации.
  "breadcrumbs.symbolPath": "on",

  // Управляет тем, как символы отображаются в представлении навигации.
  //  - position: Отображает контур символа в порядке положения файла.
  //  - name: Отображать структуру символа в алфавитном порядке.
  //  - type: Отображать структуру символа в порядке типа символа.
  "breadcrumbs.symbolSortOrder": "position",

  // Определяет, свернуты или развернуты элементы структуры.
  //  - alwaysCollapse: Свернуть все элементы.
  //  - alwaysExpand: Развернуть все элементы.
  "outline.collapseItems": "alwaysExpand",

  // Отображать элементы структуры со значками.
  "outline.icons": true,

  // Использовать значки для ошибок и предупреждений для элементов структуры.
  "outline.problems.badges": true,

  // Использовать цвета для ошибок и предупреждений для элементов структуры.
  "outline.problems.colors": true,

  // Показать ошибки и предупреждения для элементов структуры.
  "outline.problems.enabled": true,

  // Когда параметр включен, в структуре отображаются символы "array".
  "outline.showArrays": true,

  // Когда параметр включен, в структуре отображаются символы "boolean".
  "outline.showBooleans": true,

  // Когда параметр включен, в структуре отображаются символы "class".
  "outline.showClasses": true,

  // Когда параметр включен, в структуре отображаются символы "constant".
  "outline.showConstants": true,

  // Когда параметр включен, в структуре отображаются символы "constructor".
  "outline.showConstructors": true,

  // Когда параметр включен, в структуре отображаются символы "enumMember".
  "outline.showEnumMembers": true,

  // Когда параметр включен, в структуре отображаются символы "enum".
  "outline.showEnums": true,

  // Когда параметр включен, в структуре отображаются символы "event".
  "outline.showEvents": true,

  // Когда параметр включен, в структуре отображаются символы "field".
  "outline.showFields": true,

  // Когда параметр включен, в структуре отображаются символы "file".
  "outline.showFiles": true,

  // Когда параметр включен, в структуре отображаются символы "function".
  "outline.showFunctions": true,

  // Когда параметр включен, в структуре отображаются символы "interface".
  "outline.showInterfaces": true,

  // Когда параметр включен, в структуре отображаются символы "key".
  "outline.showKeys": true,

  // Когда параметр включен, в структуре отображаются символы "method".
  "outline.showMethods": true,

  // Когда параметр включен, в структуре отображаются символы "module".
  "outline.showModules": true,

  // Когда параметр включен, в структуре отображаются символы "namespace".
  "outline.showNamespaces": true,

  // Когда параметр включен, в структуре отображаются символы "null".
  "outline.showNull": true,

  // Когда параметр включен, в структуре отображаются символы "number".
  "outline.showNumbers": true,

  // Когда параметр включен, в структуре отображаются символы "object".
  "outline.showObjects": true,

  // Когда параметр включен, в структуре отображаются символы "operator".
  "outline.showOperators": true,

  // Когда параметр включен, в структуре отображаются символы "package".
  "outline.showPackages": true,

  // Когда параметр включен, в структуре отображаются символы "property".
  "outline.showProperties": true,

  // Когда параметр включен, в структуре отображаются символы "string".
  "outline.showStrings": true,

  // Когда параметр включен, в структуре отображаются символы "struct".
  "outline.showStructs": true,

  // Когда параметр включен, в структуре отображаются символы "typeParameter".
  "outline.showTypeParameters": true,

  // Когда параметр включен, в структуре отображаются символы "variable".
  "outline.showVariables": true,

  // Экспериментальная функция. Определяет, будет ли представление временной шкалы загружать следующую страницу элементов при прокрутке до конца списка.
  "timeline.pageOnScroll": false,

  // Число элементов, отображаемых в представлении временной шкалы по умолчанию и при загрузке дополнительных элементов. Если задано значение null (по умолчанию), размер страницы выбирается автоматически на основе видимой области представления временной шкалы.
  "timeline.pageSize": null,

  // Настройка переопределяемых параметров для языка clojure.
  "[clojure]": {
    "diffEditor.ignoreTrimWhitespace": false
  },

  // Настройка переопределяемых параметров для языка coffeescript.
  "[coffeescript]": {
    "diffEditor.ignoreTrimWhitespace": false
  },

  // Настройка переопределяемых параметров для языка csharp.
  "[csharp]": {
    "editor.maxTokenizationLineLength": 2500
  },

  // Настройка переопределяемых параметров для языка css.
  "[css]": {
    "editor.suggest.insertMode": "replace"
  },

  // Настройка переопределяемых параметров для языка dockercompose.
  "[dockercompose]": {
    "editor.insertSpaces": true,
    "editor.tabSize": 2,
    "editor.autoIndent": "advanced"
  },

  // Настройка переопределяемых параметров для языка dockerfile.
  "[dockerfile]": {
    "editor.quickSuggestions": {
      "strings": true
    }
  },

  // Настройка переопределяемых параметров для языка fsharp.
  "[fsharp]": {
    "diffEditor.ignoreTrimWhitespace": false
  },

  // Настройка переопределяемых параметров для языка git-commit.
  "[git-commit]": {
    "editor.rulers": [72],
    "workbench.editor.restoreViewState": false
  },

  // Настройка переопределяемых параметров для языка git-rebase.
  "[git-rebase]": {
    "workbench.editor.restoreViewState": false
  },

  // Настройка переопределяемых параметров для языка go.
  "[go]": {
    "editor.insertSpaces": false
  },

  // Настройка переопределяемых параметров для языка handlebars.
  "[handlebars]": {
    "editor.suggest.insertMode": "replace"
  },

  // Настройка переопределяемых параметров для языка html.
  "[html]": {
    "editor.suggest.insertMode": "replace"
  },

  // Настройка переопределяемых параметров для языка jade.
  "[jade]": {
    "diffEditor.ignoreTrimWhitespace": false
  },

  // Настройка переопределяемых параметров для языка javascript.
  "[javascript]": {
    "editor.maxTokenizationLineLength": 2500
  },

  // Настройка переопределяемых параметров для языка json.
  "[json]": {
    "editor.quickSuggestions": {
      "strings": true
    },
    "editor.suggest.insertMode": "replace"
  },

  // Настройка переопределяемых параметров для языка jsonc.
  "[jsonc]": {
    "editor.quickSuggestions": {
      "strings": true
    },
    "editor.suggest.insertMode": "replace"
  },

  // Настройка переопределяемых параметров для языка less.
  "[less]": {
    "editor.suggest.insertMode": "replace"
  },

  // Настройка переопределяемых параметров для языка makefile.
  "[makefile]": {
    "editor.insertSpaces": false
  },

  // Настройка переопределяемых параметров для языка markdown.
  "[markdown]": {
    "editor.unicodeHighlight.ambiguousCharacters": false,
    "editor.unicodeHighlight.invisibleCharacters": false,
    "diffEditor.ignoreTrimWhitespace": false,
    "editor.wordWrap": "on",
    "editor.quickSuggestions": {
      "comments": "off",
      "strings": "off",
      "other": "off"
    }
  },

  // Настройка переопределяемых параметров для языка plaintext.
  "[plaintext]": {
    "editor.unicodeHighlight.ambiguousCharacters": false,
    "editor.unicodeHighlight.invisibleCharacters": false
  },

  // Настройка переопределяемых параметров для языка python.
  "[python]": {
    "diffEditor.ignoreTrimWhitespace": false
  },

  // Настройка переопределяемых параметров для языка scss.
  "[scss]": {
    "editor.suggest.insertMode": "replace"
  },

  // Настройка переопределяемых параметров для языка search-result.
  "[search-result]": {
    "editor.lineNumbers": "off"
  },

  // Настройка переопределяемых параметров для языка shellscript.
  "[shellscript]": {
    "files.eol": "\n"
  },

  // Настройка переопределяемых параметров для языка yaml.
  "[yaml]": {
    "editor.insertSpaces": true,
    "editor.tabSize": 2,
    "editor.autoIndent": "advanced",
    "diffEditor.ignoreTrimWhitespace": false
  },

  // Воспроизводит звук при выполнении запроса чата.
  //  - auto: Включить звуковой сигнал при подключении средства чтения с экрана.
  //  - on: Включить звуковой сигнал.
  //  - off: Отключить звуковой сигнал.
  "audioCues.chatRequestSent": "off",

  // Воспроизводит звук в цикле, пока ожидается ответ.
  //  - auto: Включить звуковой сигнал при подключении средства чтения с экрана.
  //  - on: Включить звуковой сигнал.
  //  - off: Отключить звуковой сигнал.
  "audioCues.chatResponsePending": "auto",

  // Воспроизводит звук в цикле при получении ответа.
  //  - auto: Включить звуковой сигнал при подключении средства чтения с экрана.
  //  - on: Включить звуковой сигнал.
  //  - off: Отключить звуковой сигнал.
  "audioCues.chatResponseReceived": "off",

  // Следует ли отменить изменения положения
  "audioCues.debouncePositionChanges": false,

  // Воспроизводит звук, когда фокус перемещается на удаленную строку в режиме просмотра с поддержкой специальных возможностей инструмента сравнений или на следующее/предыдущее изменение
  //  - auto: Включить звуковой сигнал при подключении средства чтения с экрана.
  //  - on: Включить звуковой сигнал.
  //  - off: Отключить звуковой сигнал.
  "audioCues.diffLineDeleted": "auto",

  // Воспроизводит звук при перемещении фокуса на вставленную строку в режиме просмотра инструмента сравнений или на следующее или предыдущее изменение
  //  - auto: Включить звуковой сигнал при подключении средства чтения с экрана.
  //  - on: Включить звуковой сигнал.
  //  - off: Отключить звуковой сигнал.
  "audioCues.diffLineInserted": "auto",

  // Воспроизводит звук, когда фокус перемещается на измененную строку в режиме просмотра с поддержкой специальных возможностей инструмента сравнений или на следующее/предыдущее изменение
  //  - auto: Включить звуковой сигнал при подключении средства чтения с экрана.
  //  - on: Включить звуковой сигнал.
  //  - off: Отключить звуковой сигнал.
  "audioCues.diffLineModified": "auto",

  // Deprecated. Use the specific setting for each audio cue instead (`audioCues.*`).
  //
  "audioCues.enabled": null,

  // Воспроизводит звук при наличии точки останова в активной строке.
  //  - auto: Включить звуковой сигнал при подключении средства чтения с экрана.
  //  - on: Включить звуковой сигнал.
  //  - off: Отключить звуковой сигнал.
  "audioCues.lineHasBreakpoint": "auto",

  // Воспроизводит звук при наличии ошибки в активной строке.
  //  - auto: Включить звуковой сигнал при подключении средства чтения с экрана.
  //  - on: Включить звуковой сигнал.
  //  - off: Отключить звуковой сигнал.
  "audioCues.lineHasError": "auto",

  // Воспроизводит звук, если активная строка содержит сложенную область, которую можно развернуть.
  //  - auto: Включить звуковой сигнал при подключении средства чтения с экрана.
  //  - on: Включить звуковой сигнал.
  //  - off: Отключить звуковой сигнал.
  "audioCues.lineHasFoldedArea": "auto",

  // Воспроизводит звук при наличии встроенной подсказки в активной строке.
  //  - auto: Включить звуковой сигнал при подключении средства чтения с экрана.
  //  - on: Включить звуковой сигнал.
  //  - off: Отключить звуковой сигнал.
  "audioCues.lineHasInlineSuggestion": "auto",

  // Воспроизводит звук при наличии предупреждения в активной строке.
  //  - auto: Включить звуковой сигнал при подключении средства чтения с экрана.
  //  - on: Включить звуковой сигнал.
  //  - off: Отключить звуковой сигнал.
  "audioCues.lineHasWarning": "off",

  // Воспроизводит звуковой сигнал при попытке чтения строки со встроенными подсказками, в которой нет встроенных подсказок.
  //  - auto: Включить звуковой сигнал при подключении средства чтения с экрана.
  //  - on: Включить звуковой сигнал.
  //  - off: Отключить звуковой сигнал.
  "audioCues.noInlayHints": "auto",

  // Воспроизводит звук при успешном выполнении ячейки записной книжки.
  //  - auto: Включить звуковой сигнал при подключении средства чтения с экрана.
  //  - on: Включить звуковой сигнал.
  //  - off: Отключить звуковой сигнал.
  "audioCues.notebookCellCompleted": "auto",

  // Воспроизводит звук при сбое выполнения ячейки записной книжки.
  //  - auto: Включить звуковой сигнал при подключении средства чтения с экрана.
  //  - on: Включить звуковой сигнал.
  //  - off: Отключить звуковой сигнал.
  "audioCues.notebookCellFailed": "auto",

  // Воспроизводит звук при остановке отладчика в точке останова.
  //  - auto: Включить звуковой сигнал при подключении средства чтения с экрана.
  //  - on: Включить звуковой сигнал.
  //  - off: Отключить звуковой сигнал.
  "audioCues.onDebugBreak": "auto",

  // Воспроизводить звук при завершении задачи.
  //  - auto: Включить звуковой сигнал при подключении средства чтения с экрана.
  //  - on: Включить звуковой сигнал.
  //  - off: Отключить звуковой сигнал.
  "audioCues.taskCompleted": "auto",

  // Воспроизводит звук при сбое задачи (ненулевой код выхода).
  //  - auto: Включить звуковой сигнал при подключении средства чтения с экрана.
  //  - on: Включить звуковой сигнал.
  //  - off: Отключить звуковой сигнал.
  "audioCues.taskFailed": "auto",

  // Воспроизводит звук при сбое команды терминала (ненулевой код выхода).
  //  - auto: Включить звуковой сигнал при подключении средства чтения с экрана.
  //  - on: Включить звуковой сигнал.
  //  - off: Отключить звуковой сигнал.
  "audioCues.terminalCommandFailed": "auto",

  // Воспроизводит звук, когда доступны быстрые исправления терминала.
  //  - auto: Включить звуковой сигнал при подключении средства чтения с экрана.
  //  - on: Включить звуковой сигнал.
  //  - off: Отключить звуковой сигнал.
  "audioCues.terminalQuickFix": "auto",

  // Громкость звуковых подсказок в процентах (0–100).
  "audioCues.volume": 70,

  // Имя, под которым регистрируется удаленный доступ к туннелю. Если не указано, используется имя узла.
  "remote.tunnels.access.hostNameOverride": "",

  // Запретить переход компьютера в спящий режим при включенном удаленном доступе к туннелю.
  "remote.tunnels.access.preventSleep": false,

  // При включении этого параметра будут обнаруживаться новые запущенные процессы, а порты, на которых они ожидают передачу данных, автоматически перенаправляются. Отключение этого параметра не предотвратит перенаправление портов. Даже при отключенном параметре расширения по-прежнему смогут вызывать перенаправление портов, а открытие некоторых URL-адресов также будет приводить к перенаправлению портов.
  "remote.autoForwardPorts": true,

  // Задает источник, из которого автоматически перенаправляются порты, когда `remote.autoForwardPorts` имеет значение TRUE. На удаленных устройствах Windows и Mac параметры "process" и "hybrid" не действуют, и будет использоваться параметр "output". Для вступления в силу требуется перезагрузка.
  //  - process: Порты будут автоматически перенаправляться при обнаружении путем отслеживания запущенных процессов, включающих эти порты.
  //  - output: Порты будут автоматически перенаправляться при обнаружении путем считывания выходных данных из терминала и выходных данных отладки. Не все процессы, использующие порты, будут выводить данные в интегрированный терминал или в консоль отладки, поэтому некоторые порты будут пропущены. Для портов, перенаправляемых на основе выходных данных, перенаправление не будет отменено, пока пользователь не закроет порт в представлении "Порты".
  //  - hybrid: Порты будут автоматически перенаправляться при обнаружении путем считывания выходных данных из терминала и выходных данных отладки. Не все процессы, использующие порты, будут выводить данные в интегрированный терминал или в консоль отладки, поэтому некоторые порты будут пропущены. Отмена перенаправления для портов будет осуществляться путем наблюдения за требующими завершения процессами, ожидающими передачи данных для этого порта.
  "remote.autoForwardPortsSource": "process",

  // Когда включенные расширения загружаются локально и устанавливаются удаленно.
  "remote.downloadExtensionsLocally": false,

  // Переопределите тип расширения. Расширения пользовательского интерфейса устанавливаются и выполняются на локальном компьютере, а расширения рабочей области выполняются на удаленном компьютере. Перезаписывая стандартный тип расширения с помощью этого параметра, вы указываете, что расширение следует установить и включить локально либо удаленно.
  "remote.extensionKind": {
    "pub.name": ["ui"]
  },

  // Определяет, будут ли локальные URL-адреса с портом переадресовываться при открытии из терминала и консоли отладки.
  "remote.forwardOnOpen": true,

  // Указывает имя локального узла, которое будет использоваться для пересылки портов.
  "remote.localPortHost": "localhost",

  // Установить свойства по умолчанию, которые применяются ко всем портам, не получающим свойства из параметра `remote.portsAttributes`. Например:
  //
  // """
  // {
  //   "onAutoForward": "ignore"
  // }
  // """
  "remote.otherPortsAttributes": {},

  // Задание свойств, которые применяются при перенаправлении порта с указанным номером. Например:
  //
  // '''
  // "3000": {
  //   "label": "Application"
  // },
  // "40000-55000": {
  //   "onAutoForward": "ignore"
  // },
  // ".+\\/server.js": {
  //  "onAutoForward": "openPreview"
  // }
  // '''
  "remote.portsAttributes": {
    "443": {
      "protocol": "https"
    },
    "8443": {
      "protocol": "https"
    }
  },

  // Восстанавливает порты, переадресованные в рабочей области.
  "remote.restoreForwardedPorts": true,

  // Provide information about how to navigate changes in the diff editor when it is focused
  "accessibility.verbosity.diffEditor": true,

  // Provide information about how to open the hover in an accessible view.
  "accessibility.verbosity.hover": true,

  // Provide information about how to access the inline editor chat accessibility help menu and alert with hints which describe how to use the feature when the input is focused
  "accessibility.verbosity.inlineChat": true,

  // Provide information about how to access the inline completions hover and accessible view
  "accessibility.verbosity.inlineCompletions": true,

  // Provide information about how to change a keybinding in the keybindings editor when a row is focused
  "accessibility.verbosity.keybindingsEditor": true,

  // Provide information about how to focus the cell container or inner editor when a notebook cell is focused.
  "accessibility.verbosity.notebook": true,

  // Provide information about how to open the notification in an accessible view.
  "accessibility.verbosity.notification": true,

  // Provide information about how to access the chat help menu when the chat input is focused
  "accessibility.verbosity.panelChat": true,

  // Provide information about how to access the terminal accessibility help menu when the terminal is focused
  "accessibility.verbosity.terminal": true,

  // Provide information about relevant actions in an untitled text editor.
  "accessibility.verbosity.untitledHint": true,

  //
  //  - legacy: Использует устаревший алгоритм сравнения.
  //  - advanced: Использует расширенный алгоритм сравнения.
  "mergeEditor.diffAlgorithm": "advanced",

  // Controls if deletions in base or one of the inputs should be indicated by a vertical bar.
  "mergeEditor.showDeletionMarkers": true,

  // Определяет семейство шрифтов в блоках кода чата.
  "chat.editor.fontFamily": "default",

  // Определяет размер шрифта в пикселях в блоках кода чата.
  "chat.editor.fontSize": 14,

  // Определяет насыщенность шрифта в блоках кода чата.
  "chat.editor.fontWeight": "default",

  // Определяет высоту строки в пикселях в блоках кода чата. Используйте значение 0 для определения высоты строки по размеру шрифта.
  "chat.editor.lineHeight": 0,

  // Определяет, следует ли переносить строки в блоках кода чата.
  "chat.editor.wordWrap": "off",

  // Массив языков, в которых не должны развертываться сокращения Emmet.
  "emmet.excludeLanguages": ["markdown"],

  // Массив путей, где каждый путь может содержать Emmet syntaxProfiles и (или) файлы фрагментов.
  // В случае конфликтов профили или фрагменты более поздних путей будут переопределять более ранние пути.
  // Дополнительные сведения и пример файла фрагмента см. на странице https://code.visualstudio.com/docs/editor/emmet.
  "emmet.extensionsPath": [],

  // Включите сокращения Emmet в языках, которые не поддерживаются по умолчанию. Добавьте сюда сопоставление между языком и другим языком, поддерживаемым Emmet.
  //  Например: {"vue-html": "html", "javascript": "javascriptreact"}
  "emmet.includeLanguages": {},

  // Если этот параметр имеет значение false, анализируется весь файл, чтобы проверить, можно ли выполнить развертывание сокращений Emmet в текущей позиции. Если этот параметр имеет значение true, в файлах CSS/SCSS/Less анализируется только содержимое рядом с текущей позицией.
  "emmet.optimizeStylesheetParsing": true,

  // Настройки, которые используются для изменения поведения некоторых действий и сопоставителей Emmet.
  "emmet.preferences": {},

  // Отображает возможные сокращения Emmet в виде предложений. Не применяется в таблицах стилей или если параметр emmet.showExpandedAbbreviation имеет значение "never".
  "emmet.showAbbreviationSuggestions": true,

  // Показывает развернутые сокращения Emmet в виде предложений.
  // Параметр inMarkupAndStylesheetFilesOnly применяется к html, haml, jade, slim, xml, xsl, css, scss, sass, less и stylus.
  // Параметр always применяется ко всем частям файла, независимо от разметки или CSS.
  "emmet.showExpandedAbbreviation": "always",

  // Если этот параметр имеет значение true, предложения Emmet будут отображаться в виде фрагментов, которые можно упорядочить с помощью параметра "#editor.snippetSuggestions#".
  "emmet.showSuggestionsAsSnippets": false,

  // Задайте профиль для указанного синтаксиса или используйте свой собственный профиль с определенными правилами.
  "emmet.syntaxProfiles": {},

  // Если этот параметр включен, сокращения Emmet развертываются при нажатии клавиши TAB, даже если завершения не отображаются. Если этот параметр отключен, то можно принимать отображаемые завершения, нажимая клавишу TAB.
  "emmet.triggerExpansionOnTab": false,

  // Если значение равно "true", Emmet будет использовать встроенные завершения для предложения расширений. Чтобы поставщик элементов завершения, отличных от встроенного, отображался так часто, как этот параметр имеет значение "true", включите "#editor.quickSuggestions#" в "inline" или "off" для элемента "other".
  "emmet.useInlineCompletions": false,

  // Переменные, которые будут использоваться во фрагментах Emmet.
  "emmet.variables": {},

  // Определяет, будет ли применяться принудительная отправка (с арендой или без).
  "git.allowForcePush": false,

  // Определяет, разрешены ли фиксации без выполнения обработчиков, запускаемых перед фиксацией, и обработчиков сообщений фиксации.
  "git.allowNoVerifyCommit": false,

  // Всегда показывать группу ресурсов "Изменения в индексе".
  "git.alwaysShowStagedChangesResourceGroup": false,

  // Управляет флагом одобрения (signoff) для всех создаваемых коммитов.
  "git.alwaysSignOff": false,

  // Если задано значение true, фиксации будут автоматически извлекаться из удаленного репозитория по умолчанию для текущего репозитория Git. Если задано значение all, фиксации будут извлекаться из всех удаленных репозиториев.
  "git.autofetch": false,

  // Длительность в секундах между автоматическими извлечениями из git, если включен параметр "#git.autofetch#".
  "git.autofetchPeriod": 180,

  // Включено ли автоматическое обновление.
  "git.autorefresh": true,

  // Определяет, как автоматически обнаруживать репозитории.
  //  - true: Сканировать подпапки для текущей открытой папки и родительские папки открытых файлов.
  //  - false: Отключить автоматический поиск репозиториев.
  //  - subFolders: Сканировать подпапки для текущей открытой папки.
  //  - openEditors: Сканировать родительские папки открытых файлов.
  "git.autoRepositoryDetection": true,

  // Прятать все изменения перед вытягиванием и восстанавливать их после успешного вытягивания.
  "git.autoStash": false,

  // Префикс, используемый при создании новой ветви.
  "git.branchPrefix": "",

  // Список защищенных ветвей. По умолчанию перед фиксацией изменений в защищенной ветви отображается запрос. Запросом можно управлять с помощью параметра `git.branchProtectionPrompt`.
  "git.branchProtection": [],

  // Управляет отображением подсказки перед фиксацией изменений в защищенной ветви.
  //  - alwaysCommit: Всегда фиксировать изменения в защищенной ветви.
  //  - alwaysCommitToNewBranch: Всегда фиксировать изменения в новой ветви.
  //  - alwaysPrompt: Всегда запрашивать перед фиксацией изменений в защищенной ветви.
  "git.branchProtectionPrompt": "alwaysPrompt",

  // Список словарей, используемых для случайно сгенерированного названия ветки. Каждое значение представляет словарь, используемый для создания сегмента имени ветки. Поддерживаемые словари: "прилагательные", "животные", "цвета" и "числа".
  //  - adjectives: Случайное прилагательное
  //  - animals: Случайное имя животного
  //  - colors: Случайное имя цвета
  //  - numbers: Случайное число от 100 до 999
  "git.branchRandomName.dictionary": ["adjectives", "animals"],

  // Определяет, создается ли случайное имя при создании новой ветви.
  "git.branchRandomName.enable": false,

  // Управляет порядком сортировки ветвей.
  "git.branchSortOrder": "committerdate",

  // Регулярное выражение для проверки новых имен ветвей.
  "git.branchValidationRegex": "",

  // Символ для замены пробелов в новых именах ветвей и для разделения сегментов случайно созданного имени ветви.
  "git.branchWhitespaceChar": "-",

  // Определяет, какие типы ссылок на GIT отображаются в списке при выполнении команды "Извлечь в...".
  //  - local: Локальные ветви
  //  - tags: Теги
  //  - remote: Удаленные ветви
  "git.checkoutType": ["local", "remote", "tags"],

  // Определяет, следует ли автоматически закрывать редактор несовпадений, когда изменения скрыты, зафиксированы, удалены, являются подготовленными или неподготовленными.
  "git.closeDiffOnOperation": false,

  // Список команд Git (например, commit, push), для которых `stdout` записывается в [выходные данные Git](command:git.showOutput). Если для команды Git настроен обработчик на стороне клиента, то `stdout` обработчика на стороне клиента также будет записан в [выходные данные Git](command:git.showOutput).
  "git.commandsToLog": [],

  // Всегда подтверждайте создание пустых фиксаций для команды "Git: Пустая фиксация".
  "git.confirmEmptyCommits": true,

  // Определяет, следует ли спрашивать подтверждение перед принудительной отправкой.
  "git.confirmForcePush": true,

  // Определяет, следует ли запрашивать подтверждение перед фиксацией без проверки.
  "git.confirmNoVerifyCommit": true,

  // Подтвердите синхронизацию репозиториев Git.
  "git.confirmSync": true,

  // Определяет индикатор событий Git.
  //  - all: Учитывать все изменения.
  //  - tracked: Учитывать только отслеживаемые изменения.
  //  - off: Отключить счетчик.
  "git.countBadge": "all",

  // Управляет тем, используются ли цвета и эмблемы Git в Проводнике и в представлении открытых редакторов.
  "git.decorations.enabled": true,

  // Имя стандартной ветви (например, главная, канал связи, разработка) при инициализации нового репозитория Git. Если задано пустое значение, будет использоваться имя стандартной ветви, настроенное в Git. **Примечание.** Требуется версия Git "2.28.0" или более поздняя.
  "git.defaultBranchName": "main",

  // Расположение по умолчанию, в которое будет клонирован репозиторий Git.
  "git.defaultCloneDirectory": null,

  // Определяет, следует ли автоматически определять подмодули Git.
  "git.detectSubmodules": true,

  // Управляет ограничением на количество обнаруженных подмодулей Git.
  "git.detectSubmodulesLimit": 10,

  // Разрешает подписывание фиксаций с использованием GPG или X.509.
  "git.enableCommitSigning": false,

  // Определяет, включен ли git.
  "git.enabled": true,

  // Делать коммит из всех изменений, когда нет изменений в индексе.
  "git.enableSmartCommit": false,

  // Определяет, отображается ли команда синхронизации Git в строке состояния.
  "git.enableStatusBarSync": true,

  // Если параметр включен, то при вытягивании получаются все ветви. В противном случае получается только текущая ветвь.
  "git.fetchOnPull": false,

  // Отправить все аннотированные метки при выполнении команды синхронизации.
  "git.followTagsWhenSync": false,

  // This setting is now deprecated, please use `github.gitAuthentication` instead.
  //
  "git.githubAuthentication": null,

  // Список репозиториев Git, которые будут проигнорированы.
  "git.ignoredRepositories": [],

  // Игнорирует предупреждение об устаревшей версии Git.
  "git.ignoreLegacyWarning": false,

  // Игнорирует предупреждение о том, что в репозитории слишком много изменений.
  "git.ignoreLimitWarning": false,

  // Игнорирует предупреждение об отсутствии Git.
  "git.ignoreMissingGitWarning": false,

  // Пропускает предупреждение, если изменения ветви могли быть перемещены в другую ветвь при получении.
  "git.ignoreRebaseWarning": false,

  // Игнорировать изменения подмодулей в дереве файлов.
  "git.ignoreSubmodules": false,

  // Игнорирует предупреждение, если в Windows установлен Git версий 2.25–2.26.
  "git.ignoreWindowsGit27Warning": false,

  // Определяет, как производить проверку введенного сообщения коммита.
  "git.inputValidation": "warn",

  // Определяет максимальную длину сообщения коммита, при превышении которой будет выдано предупреждение.
  "git.inputValidationLength": 72,

  // Управляет максимальной допустимой длиной темы сообщения фиксации, при превышении которой будет выдано предупреждение. Удалите это значение, чтобы использовалось значение параметра "config.inputValidationLength".
  "git.inputValidationSubjectLength": 50,

  // Откройте редактор объединения для файлов, которые сейчас конфликтуют.
  "git.mergeEditor": false,

  // Определяет, следует ли автоматически открывать репозиторий после клонирования.
  //  - always: Всегда открывать в текущем окне.
  //  - alwaysNewWindow: Всегда открывать в новом окне.
  //  - whenNoFolderOpen: Открывать в текущем окне только при отсутствии открытых папок.
  //  - prompt: Всегда запрашивать действие.
  "git.openAfterClone": "prompt",

  // Управляет тем, следует ли открыть редактор несовпадений при щелчке по изменению. Если этот параметр не установлен, будет открыт обычный редактор.
  "git.openDiffOnClick": true,

  // Определяет, где следует открывать репозиторий: в родительских папках рабочих областей или открытых файлов.
  //  - always: Всегда открывать репозиторий в родительских папках рабочих областей или открытых файлов.
  //  - never: Никогда не открывать репозиторий в родительских папках рабочих областей или открытых файлов.
  //  - prompt: Запрашивать перед открытием репозитория в родительских папках рабочих областей или открытых файлов.
  "git.openRepositoryInParentFolders": "prompt",

  // Управляет тем, следует ли оптимистично обновлять состояние представления "Исходный элемент управления" после запуска команд GIT.
  "git.optimisticUpdate": true,

  // Путь и имя исполняемого файла Git, например, "C:\Program Files\Git\bin\git.exe" (Windows). Это также может быть массив строковых значений, содержащий несколько путей для поиска.
  "git.path": null,

  // Запускает команду git после успешной фиксации.
  //  - none: Не выполнять никаких команд после успешной фиксации.
  //  - push: Выполнить "Git Push" после успешной фиксации.
  //  - sync: Выполнить "Git Pull" и "Git Push" после успешной фиксации.
  "git.postCommitCommand": "none",

  // Определяет, должен ли Git проверять несохраненные файлы перед фиксацией.
  //  - always: Проверить наличие несохраненных файлов.
  //  - staged: Проверять только наличие несохраненных промежуточных файлов.
  //  - never: Отключение этой проверки.
  "git.promptToSaveFilesBeforeCommit": "always",

  // Определяет, должен ли GIT проверять несохраненные файлы прежде чем прятать изменения.
  //  - always: Проверить наличие несохраненных файлов.
  //  - staged: Проверять только наличие несохраненных промежуточных файлов.
  //  - never: Отключите эту проверку.
  "git.promptToSaveFilesBeforeStash": "always",

  // Урезать при извлечении.
  "git.pruneOnFetch": false,

  // Определяет, будет ли ветвь без исходящих фиксаций перемотана вперед перед извлечением.
  "git.pullBeforeCheckout": false,

  // Получить все теги при извлечении.
  "git.pullTags": true,

  // Принудительно использовать перемещение изменений из одной ветви в другую вместо слияния при запуске команды sync в Git.
  "git.rebaseWhenSync": false,

  // Запомнить последнюю команду Git, которая выполнялась после фиксации.
  "git.rememberPostCommitCommand": false,

  // Список папок, которые игнорируются при сканировании репозиториев Git, когда для параметра "#git.autoRepositoryDetection#" задано значение "true" или "subFolders".
  "git.repositoryScanIgnoredFolders": ["node_modules"],

  // Определяет глубину, используемую при сканировании папок рабочей области для репозиториев Git, если для #git.autoRepositoryDetection# задано значение true или subFolders. Можно задать значение "-1" для снятия ограничений.
  "git.repositoryScanMaxDepth": 1,

  // Позволяет определить, требовать ли явной настройки пользователя Git или разрешить Git использовать предположения, если пользователь не указан.
  "git.requireGitUserConfig": true,

  // Список путей для поиска репозиториев Git.
  "git.scanRepositories": [],

  // Определяет, отображается ли кнопка действия в представлении системы управления версиями.
  "git.showActionButton": {
    "commit": true,
    "publish": true,
    "sync": true
  },

  // Определяет, отображаются ли входные данные фиксации на панели управления исходным кодом Git.
  "git.showCommitInput": true,

  // Определяет, должно ли отображаться интерактивное действие "Открыть файл" в представлении "Изменения Git".
  "git.showInlineOpenFileAction": true,

  // Определяет, следует ли отображать ход выполнения для действий Git.
  "git.showProgress": true,

  // Определяет, следует ли отображать уведомление об успешной отправке.
  "git.showPushSuccessNotification": false,

  // Определяет пороговое значение индекса сходства (например, количество добавлений/удалений по сравнению с размером файла), чтобы изменения в паре добавленных/удаленных файлов считались переименованием. **Примечание.** Требуется версия Git "2.18.0" или более поздняя.
  "git.similarityThreshold": 50,

  // Определяет, какие изменения автоматически размещаются при интеллектуальной фиксации.
  //  - all: Автоматически размещать все изменения.
  //  - tracked: Только автоматически размещенные отслеживаемые изменения.
  "git.smartCommitChanges": "all",

  // Определяет, как ограничить число изменений, которые можно проанализировать из команды состояния Git. Можно задать значение 0 без ограничений.
  "git.statusLimit": 10000,

  // Предлагает включить интеллектуальную фиксацию (отправка всех изменений даже при отсутствии промежуточных изменений).
  "git.suggestSmartCommit": true,

  // Определяет, выдается ли уведомление при запуске действия синхронизации. Это уведомление позволяет пользователю отменить операцию.
  "git.supportCancellation": false,

  // Определяет, следует ли включить VS Code в качестве обработчика проверки подлинности для процессов Git, порожденных во встроенном терминале. Примечание. Для изменения этого параметра необходимо перезапустить терминалы.
  "git.terminalAuthentication": true,

  // Определяет, следует ли включить VS Code в качестве редактора GIT для процессов GIT, порожденных во встроенном терминале. Примечание. Для получения изменения в этом параметре необходимо перезапустить терминалы.
  "git.terminalGitEditor": false,

  // Определяет, какую дату использовать для элементов в представлении временной шкалы.
  //  - committed: Использовать дату фиксации
  //  - authored: Использовать дату создания
  "git.timeline.date": "committed",

  // Определяет, показывать ли автора фиксации в представлении временной шкалы.
  "git.timeline.showAuthor": true,

  // Определяет, показывать ли незафиксированные изменения в представлении временной шкалы.
  "git.timeline.showUncommitted": false,

  // Определяет поведение неотслеживаемых изменений.
  //  - mixed: Все изменения — отслеживаемые и неотслеживаемые — отображаются вместе и работают одинаково.
  //  - separate: Неотслеживаемые изменения отображаются отдельно от представления исходного кода. Они также исключаются из нескольких действий.
  //  - hidden: Неотслеживаемые изменения скрываются и исключаются из нескольких действий.
  "git.untrackedChanges": "mixed",

  // Определяет, следует ли использовать сообщение из поля входных данных фиксации в качестве сообщения о спрятанных изменениях по умолчанию.
  "git.useCommitInputAsStashMessage": false,

  // Управляет тем, будет ли использоваться полнотекстовый редактор для создания сообщений фиксации, если в поле ввода фиксации не указано сообщение.
  "git.useEditorAsCommitInput": true,

  // Определяет, используется ли более безопасный вариант принудительной отправки с арендой.
  "git.useForcePushWithLease": true,

  // Определяет, следует ли перезаписать GIT_ASKPASS для использования интегрированной версии.
  "git.useIntegratedAskPass": true,

  // Включить подробные выходные данные, если включен `git.useEditorAsCommitInput`.
  "git.verboseCommit": false,

  // Определяет, следует ли запрашивать правила репозитория для репозиториев GitHub
  "github.branchProtection": true,

  // Управляет тем, следует ли включить автоматическую проверку подлинности GitHub для команд Git в VS Code.
  "github.gitAuthentication": true,

  // Определяет, какой протокол используется для клонирования репозитория GitHub
  "github.gitProtocol": "https",

  // GitHub Enterprise Server URI
  "github-enterprise.uri": "",

  // Управляет включением обнаружения задач Grunt. Обнаружение задач Grunt может привести к выполнению файлов в любой открытой рабочей области.
  "grunt.autoDetect": "off",

  // Управляет включением обнаружения задач Gulp. Обнаружение задач Gulp может привести к выполнению файлов в любой открытой рабочей области.
  "gulp.autoDetect": "off",

  // Включите или отключите вставку изображений в ячейки Markdown в файлах записных книжек IPYNB. Изображения вставляется в ячейку как вложения.
  "ipynb.pasteImagesAsAttachments.enabled": true,

  // Управляет включением обнаружения задач Джейка. Обнаружение задач Джейка может привести к выполнению файлов в любой открытой рабочей области.
  "jake.autoDetect": "off",

  // Включить или отключить отрисовку математических символов во встроенном предварительном просмотре Markdown.
  "markdown.math.enabled": true,

  // Коллекция пользовательских макросов. Каждый макрос — это пара "ключ-значение", где ключ — новое имя команды, а значение — расширение макроса.
  "markdown.math.macros": {},

  // Начните воспроизводить видео без звука автоматически.
  "mediaPreview.video.autoPlay": false,

  // Снова автоматически зациклить видео.
  "mediaPreview.video.loop": false,

  // Следует ли автоматически перейти к следующему конфликту слияния после устранения конфликта слияния.
  "merge-conflict.autoNavigateNextConflict.enabled": false,

  // Создать Code Lens для блоков объединения конфликтов в редакторе.
  "merge-conflict.codeLens.enabled": true,

  // Создать декораторы для блоков объединения конфликтов в редакторе.
  "merge-conflict.decorators.enabled": true,

  // Определяет, где следует открыть представление инструмента сравнения при сравнении изменений в конфликтах слияния.
  //  - Current: Откройте представление инструмента сравнения в текущей группе редакторов.
  //  - Beside: Откройте представление инструмента сравнения рядом с текущей группой редакторов.
  //  - Below: Откройте представление инструмента сравнения под текущей группой редакторов.
  "merge-conflict.diffViewPosition": "Current",

  // Пользовательская конфигурация национального облака для использования с поставщиком проверки подлинности национального облака Microsoft. Для использования этой функции также необходимо задать для параметра `microsoft-sovereign-cloud.environment` значение "custom".
  "microsoft-sovereign-cloud.customEnvironment": {},

  // Национальное облако, используемое для проверки подлинности. Если выбрано значение "custom", необходимо также задать параметр `microsoft-sovereign-cloud.customEnvironment`.
  //  - ChinaCloud: Azure для Китая
  //  - USGovernment: Azure для государственных организаций США
  //  - custom: Пользовательское национальное облако Майкрософт
  "microsoft-sovereign-cloud.environment": "",

  // Определяет, к каким процессам необходимо автоматически присоединяться для отладки, если установлен параметр "#debug.node.autoAttach#". Присоединение к процессам Node, запущенным с флагом "--inspect", будет осуществляться всегда, независимо от значения этого параметра.
  //  - always: Автоматически присоединяться к каждому процессу Node.js, запущенному в терминале.
  //  - smart: Автоматически присоединяться при запуске сценариев, не находящихся в папке node_modules.
  //  - onlyWithFlag: Присоединяться только в том случае, если указан параметр "--inspect".
  //  - disabled: Автоматическое подключение отключено и не отображается в строке состояния.
  "debug.javascript.autoAttachFilter": "disabled",

  // Настраивает стандартные маски определения момента присоединения в интеллектуальном режиме "#debug.javascript.autoAttachFilter#". "$KNOWN_TOOLS$" заменяется списком имен распространенных средства запуска тестов и кода. [Дополнительные сведения см. в документации по VS Code](https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_auto-attach-smart-patterns).
  "debug.javascript.autoAttachSmartPattern": [
    "${workspaceFolder}/**",
    "!**/node_modules/**",
    "**/$KNOWN_TOOLS$/**"
  ],

  // При отладке удаленного веб-приложения определяет, следует ли автоматически туннелировать удаленный сервер на локальный компьютер.
  "debug.javascript.automaticallyTunnelRemoteServer": true,

  // Следует ли останавливать выполнение, если в условной точке останова возникла ошибка.
  "debug.javascript.breakOnConditionalError": false,

  // Где требуется отобразить группы связанных элементов кода "Run" и "Debug" в ваших скриптах npm. Можно использовать значение "all" — во всех скриптах, "top" — сверху раздела скриптов или "never" — нигде.
  "debug.javascript.codelens.npmScripts": "top",

  // Параметры, используемые при отладке открытых ссылок, выбранных изнутри терминала отладки. Можно задать значение "false", чтобы отключить это поведение.
  "debug.javascript.debugByLinkOptions": "on",

  // Значение "runtimeExecutable" по умолчанию, используемое для конфигураций запуска, если значение не указано. Оно может использоваться для настройки пользовательских путей для Node.js или установок браузера.
  "debug.javascript.defaultRuntimeExecutable": {
    "pwa-node": "node"
  },

  // Параметры по умолчанию, используемые при отладке процесса с помощью команды "Отладка: присоединить к процессу Node.js"
  "debug.javascript.pickAndAttachOptions": {},

  // Параметры запроса, используемые при загрузке ресурсов в отладчике, таких как сопоставители с исходным кодом. Этот параметр может потребоваться задать в том случае, если для сопоставителей с исходным кодом требуется проверка подлинности или самозаверяющий сертификат. Параметры используются для создания запроса с помощью библиотеки ["got"](https://github.com/sindresorhus/got).
  //
  // В общем случае для отключения проверки сертификата можно передать параметр "{ "https": { "rejectUnauthorized": false } }".
  "debug.javascript.resourceRequestOptions": {},

  // Параметры запуска по умолчанию для терминала отладки JavaScript и скриптов npm.
  "debug.javascript.terminalOptions": {},

  // Определяет, будет ли автоматически отменено сопоставление с исходным кодом для файла, если исходный файл не может быть прочитан. Если этот параметр имеет значение false (по умолчанию), отображается запрос.
  "debug.javascript.unmapMissingSources": false,

  // Определяет, следует ли автоматически обнаруживать сценарии npm.
  "npm.autoDetect": "on",

  // Включение запуска скриптов NPM, содержащихся в папке, из контекстного меню обозревателя.
  "npm.enableRunFromFolder": false,

  // The NPM Script Explorer is now available in 'Views' menu in the Explorer in all folders.
  // Включить представление обозревателя для сценариев npm при отсутствии файла верхнего уровня "package.json".
  "npm.enableScriptExplorer": false,

  // Настройте стандартные маски для папок, которые должны быть обработаны с помощью автоматического определения сценария.
  "npm.exclude": "",

  // Извлеките данные из https://registry.npmjs.org и https://registry.bower.io, чтобы обеспечить автозавершение и выведение сведений при наведении указателя для зависимостей npm.
  "npm.fetchOnlinePackageInfo": true,

  // Диспетчер пакетов, используемый для запуска сценариев.
  //  - auto: Автоматическое определение диспетчера пакетов, используемого для выполнения скриптов, на основе файлов блокировки и установленных диспетчеров пакетов.
  //  - npm: Использовать npm в качестве диспетчера пакетов для выполнения скриптов.
  //  - yarn: Использовать yarn в качестве диспетчера пакетов для выполнения скриптов.
  //  - pnpm: Использовать pnpm в качестве диспетчера пакетов для выполнения скриптов.
  "npm.packageManager": "auto",

  // Запускать команды npm с параметром '--silent'.
  "npm.runSilent": false,

  // Действие щелчка по умолчанию, используемое в обозревателе скриптов npm: "открыть" или "запустить", по умолчанию — "открыть".
  "npm.scriptExplorerAction": "open",

  // Массив регулярных выражений, указывающих, какие сценарии следует исключить из представления "Сценарии NPM".
  "npm.scriptExplorerExclude": [],

  // Отображать наведение для сценариев с командами "Выполнить" и "Отладка".
  "npm.scriptHover": true,

  // Определяет, вызывается ли при выборе ссылок CodeLens параметр "Выбор ссылок" или "Поиск ссылок"
  //  - peek: Показать ссылки в быстром редакторе.
  //  - view: Показать ссылки в отдельном представлении.
  "references.preferredLocation": "peek",

  // Включение или отключение плавающего индикатора, отображающегося при получении фокуса в простом браузере.
  "simpleBrowser.focusLockIndicator.enabled": true,

  // This setting is deprecated, please use `htmlEndTagLabels.labelColor` Color Theme option instead. Read more about Color Theme options [here](https://code.visualstudio.com/api/references/theme-color).
  // Label foreground color (if empty will use `editorCodeLens.foreground` instead).
  "htmlEndTagLabels.labelColor": "",

  // Label prefix. Default: `/`.
  "htmlEndTagLabels.labelPrefix": "/",

  // Traces the communication between VS Code and the Tailwind CSS Language Server.
  "tailwindcss-intellisense.trace.server": "off",

  // The HTML attributes for which to provide class completions, hover previews, linting etc.
  "tailwindCSS.classAttributes": [
    "class",
    "className",
    "ngClass",
    "class:list"
  ],

  // Enable code actions.
  "tailwindCSS.codeActions": true,

  // Controls whether the editor should render inline color decorators for Tailwind CSS classes and helper functions.
  "tailwindCSS.colorDecorators": true,

  // Enable class name completions when using Emmet-style syntax, for example `div.bg-red-500.uppercase`
  "tailwindCSS.emmetCompletions": false,

  //
  "tailwindCSS.experimental.classRegex": [],

  // Manually specify the Tailwind config file or files that should be read to provide IntelliSense features. Can either be a single string value, or an object where each key is a config file path and each value is a glob or array of globs representing the set of files that the config file applies to.
  "tailwindCSS.experimental.configFile": null,

  // Configure glob patterns to exclude from all IntelliSense features. Inherits all glob patterns from the `files.exclude` setting.
  "tailwindCSS.files.exclude": [
    "**/.git/**",
    "**/node_modules/**",
    "**/.hg/**",
    "**/.svn/**"
  ],

  // Enable hovers.
  "tailwindCSS.hovers": true,

  // Enable features in languages that are not supported by default. Add a mapping here between the new language and an already supported language.
  //  E.g.: `{"plaintext": "html"}`
  "tailwindCSS.includeLanguages": {},

  // Enable the Node.js inspector agent for the language server and listen on the specified port.
  "tailwindCSS.inspectPort": null,

  // Class names on the same HTML element which apply the same CSS property or properties
  "tailwindCSS.lint.cssConflict": "warning",

  // Unsupported use of the [`@apply` directive](https://tailwindcss.com/docs/functions-and-directives/#apply)
  "tailwindCSS.lint.invalidApply": "error",

  // Unknown or invalid path used with the [`theme` helper](https://tailwindcss.com/docs/functions-and-directives/#theme)
  "tailwindCSS.lint.invalidConfigPath": "error",

  // Unknown screen name used with the [`@screen` directive](https://tailwindcss.com/docs/functions-and-directives/#screen)
  "tailwindCSS.lint.invalidScreen": "error",

  // Unknown value used with the [`@tailwind` directive](https://tailwindcss.com/docs/functions-and-directives/#tailwind)
  "tailwindCSS.lint.invalidTailwindDirective": "error",

  // Unknown variant name used with the [`@variants` directive](https://tailwindcss.com/docs/functions-and-directives/#variants)
  "tailwindCSS.lint.invalidVariant": "error",

  // Class variants not in the recommended order (applies in [JIT mode](https://tailwindcss.com/docs/just-in-time-mode) only)
  "tailwindCSS.lint.recommendedVariantOrder": "warning",

  // Root font size in pixels. Used to convert `rem` CSS values to their `px` equivalents. See `tailwindCSS.showPixelEquivalents`.
  "tailwindCSS.rootFontSize": 16,

  // Show `px` equivalents for `rem` CSS values.
  "tailwindCSS.showPixelEquivalents": true,

  // Enable autocomplete suggestions.
  "tailwindCSS.suggestions": true,

  // Enable linting. Rules can be configured individually using the `tailwindcss.lint.*` settings
  "tailwindCSS.validate": true,

  // Include parentheses around a sole arrow function parameter.
  "prettier.arrowParens": "always",

  // Puts the `>` of a multi-line HTML (HTML, JSX, Vue, Angular) element at the end of the last line instead of being alone on the next line (does not apply to self closing elements).
  "prettier.bracketSameLine": false,

  // Controls the printing of spaces inside object literals.
  "prettier.bracketSpacing": true,

  // Path to the prettier configuration file.
  "prettier.configPath": "",

  // This feature is no longer supported. Instead, configure VS Code [default formatters](https://github.com/prettier/prettier-vscode#default-formatter) or use .prettierignore.
  // A list of languages IDs to disable this extension on.
  "prettier.disableLanguages": [],

  // A list of [glob patterns](https://code.visualstudio.com/api/references/vscode-api#GlobPattern) to register Prettier formatter.
  "prettier.documentSelectors": [],

  // Control whether Prettier formats quoted code embedded in the file.
  "prettier.embeddedLanguageFormatting": "auto",

  // Controls whether Prettier is enabled or not. Reload required.
  "prettier.enable": true,

  // Enable debug logs for troubleshooting.
  "prettier.enableDebugLogs": false,

  // Specify the end of line used by prettier.
  "prettier.endOfLine": "lf",

  // Try prettier's [new ternary formatting](https://github.com/prettier/prettier/pull/13183) before it becomes the default behavior.
  "prettier.experimentalTernaries": false,

  // Specify the global [whitespace sensitivity](https://prettier.io/blog/2018/11/07/1.15.0.html#whitespace-sensitive-formatting) for HTML files.
  // Valid options:
  // - `css` - Respect the default value of CSS `display` property.
  // - `strict` - Whitespaces are considered sensitive.
  // - `ignore` - Whitespaces are considered insensitive.
  "prettier.htmlWhitespaceSensitivity": "css",

  // Path to a `.prettierignore` file.
  "prettier.ignorePath": ".prettierignore",

  // Prettier can insert a special `@format` marker at the top of files specifying that the file has been formatted with prettier. This works well when used in tandem with the `--require-pragma` option. If there is already a docblock at the top of the file then this option will add a newline to it with the `@format` marker.
  "prettier.insertPragma": false,

  // This option has been deprecated in v2.4.0, use `bracketSameLine` instead.
  // Puts the `>` of a multi-line jsx element at the end of the last line instead of being alone on the next line (does not apply to self closing elements).
  "prettier.jsxBracketSameLine": false,

  // Use single quotes instead of double quotes in JSX.
  "prettier.jsxSingleQuote": false,

  // Package manager is now automatically detected by VS Code. This setting is no longer used.
  // The package manager you use to install node modules.
  "prettier.packageManager": "npm",

  // Path to the `prettier` module, eg: `./node_modules/prettier`.
  "prettier.prettierPath": "",

  // Fit code within this line limit.
  "prettier.printWidth": 80,

  // (Markdown) wrap prose over multiple lines.
  "prettier.proseWrap": "preserve",

  // Change when properties in objects are quoted.
  // Valid options:
  // - `"as-needed"` - Only add quotes around object properties where required.
  // - `"consistent"` - If at least one property in an object requires quotes, quote all properties.
  // - `"preserve"` - Respect the input use of quotes in object properties.
  "prettier.quoteProps": "as-needed",

  // Require a prettier configuration file to format. See [documentation for valid configuration files](https://prettier.io/docs/en/configuration.html).
  //
  // > _Note, untitled files will still be formatted using the VS Code prettier settings even when this setting is set._
  "prettier.requireConfig": false,

  // Prettier can restrict itself to only format files that contain a special comment, called a pragma, at the top of the file. This is very useful when gradually transitioning large, unformatted codebases to prettier.
  "prettier.requirePragma": false,

  // When enabled, this extension will attempt to use global npm or yarn modules if local modules cannot be resolved.
  // > _This setting can have a negative performance impact, particularly on Windows when you have attached network drives. Only enable this if you must use global modules._
  "prettier.resolveGlobalModules": false,

  // Whether to add a semicolon at the end of every line.
  "prettier.semi": true,

  // Enforces single attribute per line in HTML, JSX, Vue and Angular.
  "prettier.singleAttributePerLine": false,

  // Use single instead of double quotes.
  "prettier.singleQuote": false,

  // Number of spaces it should use per tab.
  "prettier.tabWidth": 2,

  // Controls the printing of trailing commas wherever possible.
  // Valid options:
  // - `none` - No trailing commas
  // - `es5` - Trailing commas where valid in ES5 (objects, arrays, etc)
  // - `all` - Trailing commas wherever possible (function arguments)
  "prettier.trailingComma": "es5",

  // Whether or not to take `.editorconfig` into account when parsing configuration. See the [`prettier.resolveConfig`](https://prettier.io/docs/en/api.html) docs for details.
  "prettier.useEditorConfig": true,

  // Indent lines with tabs.
  "prettier.useTabs": false,

  // Whether or not to indent the code inside `<script>` and `<style>` tags in Vue SFC files.
  "prettier.vueIndentScriptAndStyle": false,

  // This extension will process files in `node_modules`.
  "prettier.withNodeModules": false,

  // Set the languages that the extension will be activated.  e.g. ["html","xml","php"]. Use ["*"] to activate for all languages.
  "auto-close-tag.activationOnLanguage": [
    "xml",
    "php",
    "blade",
    "ejs",
    "jinja",
    "javascript",
    "javascriptreact",
    "typescript",
    "typescriptreact",
    "plaintext",
    "markdown",
    "vue",
    "liquid",
    "erb",
    "lang-cfml",
    "cfml",
    "HTML (EEx)",
    "HTML (Eex)",
    "plist"
  ],

  // Set the languages where the extension will be disabled.  e.g. ["html","xml","php"].
  "auto-close-tag.disableOnLanguage": [],

  // Whether to close self-closing tag automatically
  "auto-close-tag.enableAutoCloseSelfClosingTag": true,

  // Whether to insert close tag automatically
  "auto-close-tag.enableAutoCloseTag": true,

  // Set the tag list that would not be auto closed.
  "auto-close-tag.excludedTags": [
    "area",
    "base",
    "br",
    "col",
    "command",
    "embed",
    "hr",
    "img",
    "input",
    "keygen",
    "link",
    "meta",
    "param",
    "source",
    "track",
    "wbr"
  ],

  // Enable both Visual Studio and Sublime Text mode
  "auto-close-tag.fullMode": false,

  // Insert a space before the forward slash in a self-closing tag.
  "auto-close-tag.insertSpaceBeforeSelfClosingTag": false,

  // Auto close tag when </ is typed, same as Sublime Text 3
  "auto-close-tag.SublimeText3Mode": false,

  // Set the languages that the extension will be activated.  e.g. ["html","xml","php"] By default, it is ["*"] and will be activated for all languages.
  "auto-rename-tag.activationOnLanguage": ["*"],

  // Automatically add vendor prefixes to unsupported CSS properties (e. g. transform -> -ms-transform). Specify what browsers to target with an array of strings (uses [Browserslist](https://github.com/ai/browserslist)). Pass `false` to turn off.
  "liveSassCompile.settings.autoprefix": "defaults",

  // Set this to `false` if you don't want all Sass files to be compiled when Live Sass Compiler starts watching.
  "liveSassCompile.settings.compileOnWatch": true,

  // All Sass/Scss files inside the folders will be excluded.
  //
  // Examples:
  // '/**/node_modules/**',
  // '/.vscode/**',
  // '/.history/**'
  //
  // Glob Patterns are accepted.
  "liveSassCompile.settings.excludeList": [
    "/**/node_modules/**",
    "/.vscode/**"
  ],

  // Defines a subdirectory to search from (no directory outside of this will be search)
  "liveSassCompile.settings.forceBaseDirectory": null,

  // Set your exported CSS Styles, Formats & save location.
  "liveSassCompile.settings.formats": [
    {
      "format": "expanded",
      "extensionName": ".css",
      "savePath": null,
      "savePathReplacementPairs": null
    }
  ],

  // Set to `false` if you don't want a `.map` file for each compiled CSS.
  // Default is `true`
  "liveSassCompile.settings.generateMap": true,

  // This setting is useful when you only deal with a few sass files. Only these Sass files will be included.
  // NOTE: There is no need to include partial sass files.
  "liveSassCompile.settings.includeItems": null,

  // Specific glob patterns to identify partial files/folders
  "liveSassCompile.settings.partialsList": ["/**/_*.s[ac]ss"],

  // A leading slash is relative to the workspace, not the drive (e.g C://)
  "liveSassCompile.settings.rootIsWorkspace": false,

  // Show the announcement whenever a new version is installed
  "liveSassCompile.settings.showAnnouncements": true,

  // Please use showOutputWindowOn instead
  // Backwards compatible setting for those migrating from the original extension
  "liveSassCompile.settings.showOutputWindow": null,

  // Set the level of logging that is recorded and shown to you.
  // Default is `Information`
  "liveSassCompile.settings.showOutputWindowOn": "Information",

  // Set to `true` to use new SASS's new `compile` function. It's more performant!
  "liveSassCompile.settings.useNewCompiler": false,

  // Set this to `true` if you want Live Sass Compiler to automatically start watching your .sass or .scss file when you open an applicable workspace
  // Default is `false`
  "liveSassCompile.settings.watchOnLaunch": false,

  // Выберите набор значков, которые включают определенные значки.
  //  - angular: Иконки для Angular.
  //  - angular_ngrx: Иконки для Angular и ngrx.
  //  - react: Иконки для React.
  //  - react_redux: Иконки для React и Redux.
  //  - qwik: Иконки для Qwik.
  //  - vue: Иконки для Vue.
  //  - vue_vuex: Иконки для Vue и Vuex.
  //  - nest: Иконки для NestJS.
  //  - none: Папка с иконками не включена.
  "material-icon-theme.activeIconPack": "angular",

  // Enable logging to the output channel.
  "material-icon-theme.enableLogging": false,

  // Настройка пользовательских ассоциаций значков файлов.
  "material-icon-theme.files.associations": {},

  // Change the color of the file icons.
  "material-icon-theme.files.color": "#90a4ae",

  // Clone any existing icon and create a new one with custom colors and associations
  "material-icon-theme.files.customClones": [],

  // Настройка пользовательских ассоциаций значков папок.
  "material-icon-theme.folders.associations": {},

  // Изменение цвета иконок папок.
  "material-icon-theme.folders.color": "#90a4ae",

  // Clone any existing icon and create a new one with custom colors and associations
  "material-icon-theme.folders.customClones": [],

  // Установить тип иконок для папок.
  //  - specific: Выберите конкретные значки папок.
  //  - classic: Выберите классические значки папок.
  //  - none: Нет значков папок.
  "material-icon-theme.folders.theme": "specific",

  // Скрыть стрелки проводника перед папкой.
  "material-icon-theme.hidesExplorerArrows": false,

  // Настройка ассоциаций значков пользовательского языка.
  "material-icon-theme.languages.associations": {},

  // Set the log level for output messages.
  "material-icon-theme.logLevel": "info",

  // Измените прозрачность значков.
  "material-icon-theme.opacity": 1,

  // Change the saturation of the icons.
  "material-icon-theme.saturation": 1,

  // Note: If it is not Null, It will override CustomBrowser and ChromeDebuggingAttachment settings.
  //
  //  Examples :
  // chrome --incognito --headless --remote-debugging-port=9222
  //  C:\\Program Files\\Firefox Developer Edition\\firefox.exe --private-window
  "liveServer.settings.AdvanceCustomBrowserCmdLine": null,

  // Enable Chrome Debugging Attachment to Live Server at Debuging Port 9222.
  //  NOTE: You have to install 'Debugger for Chrome'
  // If the value is true, Select 'Attach to Chrome' from Debug Window to start debugging.
  //
  //  CAUTION: If it is true, 'Launch Chrome against localhost' may not work.
  "liveServer.settings.ChromeDebuggingAttachment": false,

  // Specify custom browser settings for Live Server.
  // By Default it will open your default favorite browser.
  "liveServer.settings.CustomBrowser": null,

  // To disable information pop up messages.
  "liveServer.settings.donotShowInfoMsg": false,

  // To turn off prompt warning message if body or head or other supporting tag is missing in your HTML.
  "liveServer.settings.donotVerifyTags": false,

  // When set, serve this file (server root relative) for every 404 (useful for single-page applications)
  "liveServer.settings.file": "",

  // By Default Live Server inject CSS changes without full reloading of browser. You can change this behavior by making this setting as `true`
  "liveServer.settings.fullReload": false,

  // To switch between localhost or 127.0.0.1 or anything else. Default is 127.0.0.1
  "liveServer.settings.host": "127.0.0.1",

  // Setup https configuration
  "liveServer.settings.https": {
    "enable": false,
    "cert": "",
    "key": "",
    "passphrase": ""
  },

  // To ignore specific file changes
  "liveServer.settings.ignoreFiles": [
    ".vscode/**",
    "**/*.scss",
    "**/*.sass",
    "**/*.ts"
  ],

  // Mount a directory to a route. Such as [['/components', './node_modules']]
  "liveServer.settings.mount": [],

  // This the entry point of server when you're in multiroot workspace
  "liveServer.settings.multiRootWorkspaceName": null,

  // If it is true live server will start without browser opened.
  "liveServer.settings.NoBrowser": false,

  // Set Custom Port Number of Live Server. Set 0 if you want random port.
  "liveServer.settings.port": 5500,

  // To Setup Proxy
  "liveServer.settings.proxy": {
    "enable": false,
    "baseUri": "/",
    "proxyUri": "http://127.0.0.1:80"
  },

  // Set Custom root of Live Server.
  // To change root the the server to sub folder of workspace, use '/' and relative path from workspace.
  // Example: /subfolder1/subfolder2
  "liveServer.settings.root": "/",

  // Change this to false if you don't want the button to show in the statusbar
  "liveServer.settings.showOnStatusbar": true,

  // Use local IP as host
  "liveServer.settings.useLocalIp": false,

  // You have to install a browser extension. That will be works for your dynamic pages (like PHP).
  "liveServer.settings.useWebExt": false,

  // Delay before live reloading. Value in milliseconds. Default is 100
  "liveServer.settings.wait": 100,

  // Defines scopes for extension to work with.
  // multi-root: all selectors found within all root folders will be visible to all stylesheets.
  // workspace: all selectors found within particular workspace folder/project will be visible to stylesheets within that workspace folder.
  // linked files: selectors will be provided only for linked stylesheets.
  // Default: "multi-root"
  "html-to-css-autocompletion.autocompletionFilesScope": "multi-root",

  // Set custom glob pattern to exclude search on pattern matches. E.g.: **/{folderName1,folderName2,...}/**
  "html-to-css-autocompletion.excludePattern": "",

  // Defines folder names to be excluded from being searched. Default: ["node_modules"]
  "html-to-css-autocompletion.folderNamesToBeExcluded": ["node_modules"],

  // Defines only specific folder names to be searched. Default: [""]
  "html-to-css-autocompletion.folderNamesToBeIncluded": [""],

  // Defines file types to be searched for classes/ids.
  // Defaults: ["html", "php"]
  "html-to-css-autocompletion.getSelectorsFromFileTypes": ["html", "php"],

  // Set custom glob pattern to get classes/ids from matched files. E.g.: **/{folderName1,folderName2,...}/*.{fileType1,fileType2,...}
  "html-to-css-autocompletion.includePattern": "",

  // Set true to populate Intellisense with selectors only when '#' or '.' characters are typed. Default: false
  "html-to-css-autocompletion.triggerCharacters": false,

  // The tabnine cloud host to connect to (restart to take effect)
  "tabnine.cloudHost": null,

  // Enable/Disable Tabnine code actions (Visual Studio Code must be restarted for this setting to take effect)
  "tabnine.codeLensEnabled": true,

  // debounce milliseconds before rendering tabnine suggestion
  "tabnine.debounceMilliseconds": 0,

  // Disable Tabnine when the file path contains a match of any of the provided regexes. For example, add "[.]js$" to disable Tabnine in JavaScript files.
  "tabnine.disableFileRegex": [],

  // Disable Tabnine when the current line contains a match of any of the provided regexes. For example, add "require" to disable Tabnine when the current line contains the word 'require'.
  "tabnine.disableLineRegex": [],

  // Experimental: Enable modules auto-import following applying Tabnine suggestions
  "tabnine.experimentalAutoImports": null,

  // Ignore SSL certificate errors when calling Tabnine API (restart to take effect)
  "tabnine.ignoreCertificateErrors": false,

  // Log Tabnine engine process (Visual Studio Code must be restarted for this setting to take effect)
  "tabnine.logEngine": false,

  // Tabnine's log file (Visual Studio Code must be restarted for this setting to take effect)
  "tabnine.logFilePath": "",

  // Tabnine's log level (Visual Studio Code must be restarted for this setting to take effect)
  "tabnine.logLevel": "",

  // Receive Tabnine VSCode extention beta updates
  "tabnine.receiveBetaChannelUpdates": false,

  // Hours to disable inline completions when clicking the snooze button
  "tabnine.snoozeDuration": 1,

  // Use the proxy support for Tabnine (Visual Studio Code must be restarted for this setting to take effect)
  "tabnine.useProxySupport": true,

  // A list of CSS based languages where suggestions are enabled.
  "html-css-class-completion.CSSLanguages": ["css", "sass", "scss"],

  // Enables completion when you're writing Emmet abbreviations.
  "html-css-class-completion.enableEmmetSupport": false,

  // A glob pattern that defines files and folders to exclude. The glob pattern will be matched against the file paths of resulting matches relative to their workspace.
  "html-css-class-completion.excludeGlobPattern": "",

  // A list of HTML based languages where suggestions are enabled.
  "html-css-class-completion.HTMLLanguages": [
    "html",
    "vue",
    "razor",
    "blade",
    "handlebars",
    "twig",
    "django-html",
    "php",
    "markdown",
    "erb",
    "ejs",
    "svelte"
  ],

  // A glob pattern that defines files and folders to search for. The glob pattern will be matched against the paths of resulting matches relative to their workspace.
  "html-css-class-completion.includeGlobPattern": "**/*.{css,html}",

  // A list of JavaScript based languages where suggestions are enabled.
  "html-css-class-completion.JavaScriptLanguages": [
    "javascript",
    "javascriptreact",
    "typescriptreact"
  ]
}
